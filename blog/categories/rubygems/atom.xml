<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubygems | 黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/rubygems/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2012-01-14T17:52:50+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的 capistrano 完整設定檔說明]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-14/my-capistrano-config-with-multistage-apache-restart-assets-precompile-and-symlink-shared/"/>
    <updated>2012-01-14T16:09:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-14/my-capistrano-config-with-multistage-apache-restart-assets-precompile-and-symlink-shared</id>
    <content type="html"><![CDATA[<p>capistrano 是一套強大的佈署工具, 今天提供小弟的設定檔內容給大家參考</p>

<!-- more -->


<p>rvm 和 bundler</p>

<p><code>ruby config/deploy.rb
$:.unshift(File.expand_path('./lib', ENV['rvm_path'])) # Add RVM's lib directory to the load path.
require "rvm/capistrano" # Load RVM's capistrano plugin.
require 'bundler/capistrano'
</code></p>

<p>capistrano color, 讓佈署過程中的訊息內容上色</p>

<p><code>ruby config/deploy.rb
begin
  require 'capistrano_colors'
rescue LoadError
  puts "`gem install capistrano_colors` to get output more userfriendly."
end
</code></p>

<p>multistages 設定, 讓 server 端的設定和佈署工作各自獨立管理, 同時資源佈署多個 server</p>

<p><code>ruby config/deploy.rb
require 'capistrano/ext/multistage'
set :stages,        %w(staging production)
set :default_stage, "staging"
</code></p>

<p>基本設定, 包含 git</p>

<p>```ruby config/deploy.rb
set :application, "foo"
set :repository,  "git@github.com:marsz/foo.git"</p>

<p>set :scm, :git</p>

<p>set :use_sudo, false
```</p>

<p>設定 deploy:restart, capistrano 預設是空的, 所以重起 rack 的部份一定要自己寫, 以下範例以 <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#_redeploying_restarting_the_ruby_on_rails_application" target="_blank">passenger + apache</a> 的重啟方式做為參考</p>

<p>```ruby config/deploy.rb</p>

<h1>namespace :deploy 內</h1>

<p>namespace :deploy do
  # .....
  task :restart, :roles => :app, :except => { :no_release => true } do</p>

<pre><code>run "touch #{current_path}/tmp/restart.txt"
</code></pre>

<p>  end
  # .....
end
```</p>

<p>設定 symlink_shared, 有一些沒進 version control 的 config 檔案, 要在佈署時, link 過去, 例如 config/database.yml, 以下僅供參考, 實際 link 內容須自己寫</p>

<p>```ruby config/deploy.rb</p>

<h1>namespace :deploy 內</h1>

<p>namespace :deploy
  # ....
  task :symlink_shared, :roles => [:app] do</p>

<pre><code>config_files = [:database, :redis]
symlink_hash = {}
config_files.each do |fname|
  from = "#{shared_path}/config/#{fname}.yml"
  to = "#{release_path}/config/#{fname}.yml"
  run "ln -s #{from} #{to}"
end
</code></pre>

<p>  end
  # ....
end</p>

<h1>把 symlink_shared 內容掛進去 deploy 中</h1>

<p>before "deploy:assets:symlink", "deploy:symlink_shared"
```</p>

<p>tail log, 要線上 debug 時可用</p>

<p>```ruby config/deploy.rb
task :tail_log, :roles => :app do
  run "tail -f -n 100 #{shared_path}/log/#{rails_env}.log"
end</p>

<h1>執行 cap production tail_log 即可</h1>

<p>```</p>

<p>使用了 multistage 後, 各個 server 的設定檔必須放在 config/deploy/ 下, 檔名對應 stage 名稱<br/>
例如 config/deploy/production.rb
以下為 stage 設定檔內容</p>

<p>預設 rails env</p>

<p><code>ruby config/deploy/production.rb
set :rails_env, "production"
</code></p>

<p>github 分支</p>

<p><code>ruby config/deploy/production.rb
set :branch, 'master'
</code></p>

<p>ssh 登入相關, 建議多利用 <a href="http://www.eng.cam.ac.uk/help/jpmg/ssh/authorized_keys_howto.html" target="_blank"> SSH 免密碼登入 </a></p>

<p><code>ruby config/deploy/production.rb
set :user, 'marsz'
set :domain, 'xxx.com'
server "#{domain}", :web, :app, :db, :primary =&gt; true
</code></p>

<p>佈署的 dir path</p>

<p><code>ruby config/deploy/production.rb
set :deploy_to, "/path/to/app"
</code></p>

<p>佈署指令</p>

<p><code>
cap production setup # 第一次佈署環境建立
cap production deploy # 進行佈署
cap production deploy:migrations # 進行佈署並且跑 migration
</code></p>

<p>若想要在 cap deploy 時也執行 rake assets:precompile<br/>
可以參考 <a href="http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy/" target="_blank">這篇</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Carrierwave 處理檔案上傳 (整合 imagemagick 與 Amazon S3)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-10/carrierwave-guides-with-amazon-s3-and-imagemagick-integration/"/>
    <updated>2012-01-10T23:38:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-10/carrierwave-guides-with-amazon-s3-and-imagemagick-integration</id>
    <content type="html"><![CDATA[<h2>參考來源</h2>

<ul>
<li>Github <a href="https://github.com/jnicklas/carrierwave">https://github.com/jnicklas/carrierwave</a></li>
</ul>


<h2>安裝</h2>

<p>```ruby Gemfile</p>

<pre><code>gem 'carrierwave'
</code></pre>

<p>```</p>

<h2>建立 uploader</h2>

<pre><code>rails generate uploader user_avatar
</code></pre>

<p>檔案產生於</p>

<pre><code>app/uploader/user_avatar_uploader.rb
</code></pre>

<h2>簡易範例</h2>

<h4>直接使用</h4>

<p>```ruby</p>

<pre><code>uploader = UserAvatarUploader.new
uploader.store!(my_file)
</code></pre>

<p>```</p>

<h4>掛在 model 裡使用</h4>

<p>在 model 裡
```ruby app/models/user.rb</p>

<pre><code>class User
  mount_uploader :picture, UserAvatarUploader
end
</code></pre>

<p>```</p>

<p>新增 migration, 因欄位名稱是 picture, 所以新增一個 picture 的 string 欄位在 users table 裡</p>

<pre><code>rails g migration add_column_picture_to_users
</code></pre>

<p>```ruby db/migrate/201101011213_add_column_picture_to_users.rb</p>

<pre><code>add_column :users, :picture, :string
</code></pre>

<p>```</p>

<p>```html _form.html.erb</p>

<pre><code>&lt;input type="file" name="picture" /&gt;
</code></pre>

<p>```</p>

<p>```ruby users_controller.rb</p>

<pre><code>u = User.new
u.picture = params[:picture]
u.save!
u.picture.url # =&gt; /url/to/file.png
</code></pre>

<p>```</p>

<p>在 _form.html.erb 送出 post 後, 便會按照在 user_avatar_uploader.rb 中的設定進行儲存並且回傳檔案>網址</p>

<h2>uploader 設定</h2>

<h4>儲存</h4>

<p>存成檔案, fog  為將檔案上傳至 cdn 用, 稍後會介紹
```ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>storage :file
# storage :fog
</code></pre>

<p><code>
可覆寫 store_dir, 以指定儲存路徑, 以 public/ 為基礎
</code>ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>def store_dir
   "uploader/user_avatar"
end
</code></pre>

<p><code>
限定檔案附檔名
</code>ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>def extension_white_list
  %w(jpg jpeg gif png)
end
</code></pre>

<p><code>
指定檔名, 包含附檔名 (model.id 稍後介紹)
</code>ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>def filename
  # @filename
  "#{model.id}.png"
end
</code></pre>

<p><code>
指定預設的 url (e.g.沒有圖的時候)
</code>ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>def default_url
  "/images/fallback/" + [version_name, "default.png"].compact.join('_')
end
</code></pre>

<p>```</p>

<h4>使用 Imagemagick 壓縮</h4>

<p>Gemfile
```ruby Gemfile</p>

<pre><code>gem 'rmagick'
</code></pre>

<p><code>
uploader 加上
</code>ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>include CarrierWave::RMagick
</code></pre>

<p><code>
在 user_avatar_uploader.rb 中可以自行定義要用哪些 Imagemagick 的 method 處理圖片
</code>ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code># 轉換成 png
process :convert =&gt; 'png'
# 按比例縮成指定大小並且補白
process :resize_and_pad =&gt; [160, 160]
</code></pre>

<p>```
所有可用的 api 見 <a href="https://github.com/jnicklas/carrierwave/blob/master/lib/carrierwave/processing/rmagick.rb">https://github.com/jnicklas/carrierwave/blob/master/lib/carrierwave/processing/rmagick.rb</a></p>

<p>若希望可以另做縮圖, 可以透過 version 同時建立與原圖不同的版本
```ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code># 版本名稱為 thumb
version :thumb do
   process :resize_and_pad =&gt; [100, 100]
   process :convert =&gt; 'png'
end
# 版本名稱為 small
version :small do
   process :resize_and_pad =&gt; [160, 160]
   process :convert =&gt; 'png'
end
</code></pre>

<p>```</p>

<p>mixin 類似 CarrierWave::RMagick 的 module 可以將更多 RMagick 的 api 應用在 process 中</p>

<p>RMagick api 可參考</p>

<blockquote><ul>
<li>doc: <a href="http://studio.imagemagick.org/RMagick/doc/">http://studio.imagemagick.org/RMagick/doc/</a></li>
<li>source: <a href="https://github.com/rmagick/rmagick/blob/master/lib/RMagick.rb">https://github.com/rmagick/rmagick/blob/master/lib/RMagick.rb</a></li>
</ul>
</blockquote>

<p>取得 version :
```ruby</p>

<pre><code>u = User.find(1)
u.picture.url # 原圖 url
u.picture.thumb.url # thumb 版本的 url
u.picture.small.url # small 版本的 url
</code></pre>

<p>```</p>

<h4>上傳至 CDN (以 Amazon S3 為例)</h4>

<p>```ruby Gemfile</p>

<pre><code>gem 'fog'
</code></pre>

<p><code>
在 storage 改為 fog
</code>ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>storage :fog
</code></pre>

<p><code>
新增 config/initializer/carrierwave.rb, 內容如下
</code>ruby config/initializer/carrierwave.rb</p>

<pre><code>CarrierWave.configure do |config|
  config.fog_credentials = {
    :provider               =&gt; 'AWS',       # required
    :aws_access_key_id      =&gt; 'XXXXX',       # your aws access key id
    :aws_secret_access_key  =&gt; 'xxxxxxxxxx',       # your aws secret access key
    :region                 =&gt; 'ap-southeast-1'  # your bucket's region in S3, defaults to 'us-east-1'
  }
  # your S3 bucket name
  config.fog_directory  = 'my_bucket'
  # custome your domain on aws S3, defaults to nil
  config.fog_host       = 'http://myapp.com'
  config.fog_public     = true                                   # optional, defaults to true
  config.fog_attributes = {'Cache-Control'=&gt;'max-age=315576000'}  # optional, defaults to {}
end
</code></pre>

<p>```
依上述範例, 要在 S3 開一個 public bucket 名為 "my_bucket", 地區為新加坡</p>

<p>access key 可至 <a href="https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key">https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key</a> 搜尋</p>

<p>bucket 中儲存的路徑可在 user_avatar_uploader.rb 中的 store_dir 定義
```ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>def store_dir
    "user_avatar/#{model.id}"
end
</code></pre>

<p>```</p>

<h4>uploader 的 methods</h4>

<p>當你將 uploader mount 進 model, 就可以在 uploader 中直接取得該 model 的 instance
```ruby app/uploader/user_avatar_uploader.rb</p>

<pre><code>def filename
   "#{model.id}.png"
end
# and mounted_as
def store_dir
   "uploader/user_avatar/#{mounted_as}"
end
</code></pre>

<p>```
uploader 有哪些 medthods 可參考 <a href="https://github.com/jnicklas/carrierwave/tree/master/lib/carrierwave/uploader">https://github.com/jnicklas/carrierwave/tree/master/lib/carrierwave/uploader</a></p>

<h4>處理 local file 或 remote file</h4>

<p>remote file, 參考 <a href="http://stackoverflow.com/questions/5007575/how-to-assign-a-remote-file-to-carrierwave">http://stackoverflow.com/questions/5007575/how-to-assign-a-remote-file-to-carrierwave</a>
```ruby</p>

<pre><code>u = User.find(1)
url = "http://www.google.com/logo.png"
u.remote_picture_url = url
u.save
</code></pre>

<p><code>
local file
</code>ruby</p>

<pre><code>u =  User.find(1)
file_path = "#{Rails.root}/public/images/exmaples/foo.png"
u.picture = File.open(file_path)
</code></pre>

<p>```</p>

<p>Carrierwave 的特色在於細節定義都在 uploader 中, 而 model 只要 mount 以及加上 string 欄位即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise 在登入或登出之後執行回乎]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-10/callbacks-of-devise-after-sign-in-or-sign-out/"/>
    <updated>2012-01-10T23:11:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-10/callbacks-of-devise-after-sign-in-or-sign-out</id>
    <content type="html"><![CDATA[<h4>需求</h4>

<p>想要在登入或登出後執行指定的行為</p>

<!-- more -->


<h4>官方 wiki</h4>

<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Change-the-redirect-path-after-destroying-a-session-i.e.-signing-out" target="_blank">How To: Change the redirect path after destroying a session i.e. signing out</a></p>

<h4>說明</h4>

<ul>
<li>從 <a href="https://github.com/plataformatec/devise/blob/master/app/controllers/devise/sessions_controller.rb" target="_blank">SessionsController</a> 可得知每次登入後會 redirect 到 after_sign_in_path_for 這個 helper method 所回傳的路徑, 登出則是 after_sign_out_path_for</li>
<li>找到 <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb#L207" target="_blank">Controller::Helper</a> 定義了  after_sign_in_path_for 和 after_sign_out_path_for</li>
<li>針對這兩個 method 進行覆寫</li>
</ul>


<h4>範例</h4>

<p>注意要用 private, 並且傳進一參數為 model instance
```ruby app/controllers/application_controller.rb
class ApplicationController &lt; ActionController::Base
  private</p>

<p>  # Overwriting the sign_in redirect path method
  def after_sign_in_path_for(resource_or_scope)</p>

<pre><code>root_path
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[databse 資料以 yaml 格式匯入/匯出]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-28/rake-data-dump-and-load-by-yaml/"/>
    <updated>2011-12-28T14:07:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-28/rake-data-dump-and-load-by-yaml</id>
    <content type="html"><![CDATA[<p>在備份資料的過程中常用到的一個 gem
可透過 rake 指令將 db 資料以 yaml 格式進行匯出與匯入</p>

<h2>yaml_db</h2>

<p>github: <a href="https://github.com/ludicast/yaml_db" target="_blank">https://github.com/ludicast/yaml_db</a></p>

<!-- more -->


<h2>安裝 (rails 3)</h2>

<p><code>ruby
gem 'yaml_db'
</code></p>

<p><code>
bundle install
</code></p>

<h2>匯出</h2>

<p>把資料匯出到 db/data.yml</p>

<p><code>
bundle exec rake db:data:dump
</code></p>

<p>匯出不同環境的 database (設定在 config/database.yml, 預設是 development)
<code>
bundle exec rake db:data:dump RAILS_ENV=production
</code></p>

<p>若要依照一個 table 一個檔案匯出..
(2011/12/28 notice: 目前此方法在 1.9.2 + 3.1.0 的環境下測試會有一些問題)
<code>
cd path/to/dump_dir  # cd 到欲匯出的 dir 下, 理論上依然是在專案目錄內
db:data:dump_dir
</code></p>

<h2>匯入</h2>

<p>把資料從 db/data.yml 匯入
<code>
bundle exec rake db:data:load
</code></p>

<p>匯入不同環境的 database
<code>
bundle exec rake db:data:load RAILS_ENV=production
</code></p>

<p>匯入某個目錄下的所有的 yaml (原理同 rake db:data:dump_dir)
(2011/12/28 notice: 此方法在 1.9.2 + 3.1.0 下仍有問題)
<code>
cd path/to/yamls_dir # cd 到 yaml 檔存放的 dir
bundle exec rake db:data:load_dir
</code></p>

<h2>其他</h2>

<ul>
<li>配合 whenever 可做定期備份, 並且將 yml 檔上傳至其他處存放</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Capistrano 中 deploy 時能夠自動執行 rake assets:precompile]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy/"/>
    <updated>2011-12-25T15:14:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy</id>
    <content type="html"><![CDATA[<p>當我們在專案目錄中執行 "capify ." 時, 會產生 Capfile 檔
在該檔案加上</p>

<p><code>ruby Capfile
load 'deploy/assets'
</code></p>

<!-- more -->


<p>capistrano 會將 current/public/assets 連結到 shared/assets 中
若 shared 下無此目錄, 記得要 mkdir 一下</p>
]]></content>
  </entry>
  
</feed>
