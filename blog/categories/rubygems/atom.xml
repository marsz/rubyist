<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rubygems | 黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/rubygems/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2012-05-15T16:57:48+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 backup gem 做自動化備份]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-03-08/backup-gem/"/>
    <updated>2012-03-08T11:57:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-03-08/backup-gem</id>
    <content type="html"><![CDATA[<p>source: <a href="https://github.com/meskyanichi/backup" target="_blank">https://github.com/meskyanichi/backup</a><br/>
和 <a href="http://godrb.com/" target="_blank">God</a> 一樣是一個獨立的 gem，因此也可用於其他語言</p>

<!-- more -->


<p><code>backup</code> 的特色:</p>

<ol>
<li>可備份 <code>Redis</code>、<code>MongoDB</code>、<code>Mysql</code> 等 DB</li>
<li>可備份檔案、目錄</li>
<li>備份可儲存於 local disk、<code>Amazon S3</code>、<code>Dropbox</code> 或透過 <code>ftp</code>.<code>scp</code> 等協定將檔案上傳</li>
</ol>


<p>範例檔的備份標的:</p>

<ol>
<li><code>Mysql</code></li>
<li>使用者上傳之頭像圖檔儲存於 <code>Rails</code> public/uploads</li>
<li>備份檔案上傳至 <code>Amazon S3</code></li>
</ol>


<h4>安裝</h4>

<p><code>gem install backup</code></p>

<h4>範例</h4>

<p>打開空檔案即可使用</p>

<p>```ruby backup_config.rb
Backup::Model.new(:my_app, 'db data of my app') do
  # mysql 備份
  database MySQL do |db|</p>

<pre><code>db.name               = "my_app_db"
db.username           = "root"
db.password           = "12341234"
db.host               = "127.0.0.1"
db.port               = 3306
db.socket             = "/tmp/mysql.sock"
</code></pre>

<p>  end</p>

<p>  # user 頭像檔案<br/>
  archive :uploads do |archive|</p>

<pre><code>archive.add "/path/to/my_app/public/uploads"
</code></pre>

<p>  end</p>

<p>  # 上傳至 S3<br/>
  store_with S3 do |s3|</p>

<pre><code>s3.access_key_id      = "12341234"
s3.secret_access_key  = "!@#$%^&amp;*("
s3.region             = "us-east-1"
s3.bucket             = "my_app_backup"
s3.path               = '/'
s3.keep               = 50
</code></pre>

<p>  end</p>

<p>  # 壓縮打包設定
  compress_with Gzip do |compression|</p>

<pre><code>compression.best = true
compression.fast = false
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>執行</p>

<p><code>ruby
backup perform -t my_app -c backup_config.rb
</code></p>

<p>就可進行備份</p>

<p>若要做 <code>Rails</code> 定期備份, 再將指令整合於 <code>whenever</code> 即可<br/>
另外再提供儲存於 local disk 的範例</p>

<p>```ruby backup_config.rb
  store_with Local do |local|</p>

<pre><code>local.path = "/path/to/back/dir"
local.keep = 50
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec 設定 request 或 controller 的 spec 中 render view]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-03-06/rspec-render-views/"/>
    <updated>2012-03-06T11:05:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-03-06/rspec-render-views</id>
    <content type="html"><![CDATA[<p><code>rspec rails</code> 中預設是不會 render view 的, 因此 <code>response.body</code> 的內容會是空字串</p>

<!-- more -->


<p>為了讓 response.body 能實際的把 view render 出來, 可以有個別或預設的作法</p>

<p>個別</p>

<p>```ruby
describe UsersController do
  render_views
  it "GET #index" do</p>

<pre><code>get :index
response.body.should match("foo")
</code></pre>

<p>  end
end
```</p>

<p>預設</p>

<p><code>ruby spec/spec_helper.rb
RSpec.configure do |config|
  ....
  config.render_views
  ....
end
</code></p>

<p>小弟個人較偏好每個 request / controller 的 spec 都要 render_view<br/>
一方面可以檢驗 view 的正確性<br/>
若 view 中有使用 helper method, 也可以順便檢驗</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Girl 的回呼 (callbacks)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-29/factory-girl-callbacks/"/>
    <updated>2012-02-29T10:18:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-29/factory-girl-callbacks</id>
    <content type="html"><![CDATA[<p>在寫測試中, 有許多的情境, 可能會需要在產生測試用資料後做許多處理, 因此 <code>Factory Girl</code> 本身也提供了 <code>callback</code> 機制...</p>

<!-- more -->


<p>```ruby
FactoryGirl.define do
  factory :user do</p>

<pre><code>sequence(:email) { |n| "foo#{n}@bar.com" }
name "barbar"
password "12341234"
after_create do |user|
  # callback code block here
end
</code></pre>

<p>  end
end
```</p>

<p>詳細使用方式可見 <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md" target="_blank">官方說明文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[factory_girl 中的 model 關連 (association)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-27/factory-girl-for-associations/"/>
    <updated>2012-02-27T09:42:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-27/factory-girl-for-associations</id>
    <content type="html"><![CDATA[<p>不論是 <code>one-to-one</code> <code>one-to-many</code> 或 <code>many-to-many</code>, 我們都希望 model 中的關連也能反應到 <code>factory_girl</code> 的定義中</p>

<!-- more -->


<p>方法如下:  (brand has many products)</p>

<p>```ruby spec/factories/brands.rb
FactoryGirl.define do
  factory :brand do</p>

<pre><code>sequence(:name) { |n| "brand name #{n}" }
</code></pre>

<p>  end
end
```</p>

<p>```ruby spec/factories/products.rb
FactoryGirl.define do
  factory :products do</p>

<pre><code>name "product name"
brand do
  Factory :brand
end
</code></pre>

<p>  end
end
```</p>

<p><code>ruby app/models/product.rb
class Product &lt; ActiveRecord::Base
  belongs_to :brand  # brand_id
end
</code></p>

<p>如此只要每次 <code>Factory(:product)</code> , 該 product 的 brancd 也會透過 brancd 產生, 而不需要再每次的 factory 中去進行關連了 <code>Factory(:product, :brand =&gt; Factory(:brand))</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[factory_girl 的 validates_uniqueness_of 欄位問題]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-25/factory-girl-for-uniqueness-column/"/>
    <updated>2012-02-25T09:25:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-25/factory-girl-for-uniqueness-column</id>
    <content type="html"><![CDATA[<p><code>model</code> 中有 <code>validates_uniqueness_of</code> 的欄位, 在 <code>factory_girl</code> 中可透過 <code>sequence</code> 來避免兩次以上的 factory 因 validation 沒過而無法產生假資料的情況</p>

<!-- more -->


<p>```ruby spec/factories/users.rb
FactoryGirl.define do
  factory :user do</p>

<pre><code>sequence(:email) do |n|
  "foo#{n}@bar.com"
end
name "barbar"
password "12341234"
</code></pre>

<p>  end
end
```</p>

<p><code>n</code> 為流水號, 因此可用於 <code>number</code> 或 <code>string</code> 類型的 column</p>
]]></content>
  </entry>
  
</feed>
