<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Rubygems | 黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/Rubygems/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2012-11-16T01:52:03+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubygems 處理 Amazon Web Service (AWS) EC2]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-11-09/rubygeems-for-aws-ec2/"/>
    <updated>2012-11-09T13:55:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-11-09/rubygeems-for-aws-ec2</id>
    <content type="html"><![CDATA[<p>參考: <a href="https://github.com/grempe/amazon-ec2" target="_blank">https://github.com/grempe/amazon-ec2</a></p>

<!-- more -->


<h3>安裝設定</h3>

<p><code>ruby Gemfile
gem 'amazon-ec2', :require =&gt; "AWS"
</code></p>

<p><code>yaml config/aws.yml
development: &amp;default
  :access_key_id: "abcdabcd"
  :secret_access_key: "abcdabcd"
  :host: "ap-southeast-1.ec2.amazonaws.com"
test:
  &lt;&lt;: *default
</code></p>

<p><code>access_key_id</code> 和 <code>secret_access_key</code> 可至 <a href="https://portal.aws.amazon.com/gp/aws/developer/account/index.html?action=access-key" target="_blank">AWS Security Credentials</a> 查看<br/>
<code>host</code> 則是目標 region 所對應的 endpoint，對應表可至 <a href="https://github.com/garnaat/missingcloud/blob/master/aws.json#L372" target="_blank">https://github.com/garnaat/missingcloud/blob/master/aws.json#L372</a> 查看</p>

<p>養成好習慣, 請勿將 yaml 檔 commit 進去...</p>

<p><code>ruby .gitignore
config/aws.yml
</code></p>

<p>```yaml config/aws.yml.example</p>

<h1>to see region and host mapping :</h1>

<h1>https://github.com/garnaat/missingcloud/blob/master/aws.json#L372</h1>

<p>development: &amp;default
  :access_key_id: ""
  :secret_access_key: ""
  :host: ""
test:
  &lt;&lt;: *default
```</p>

<h3>使用方法</h3>

<ul>
<li>初始化</li>
</ul>


<p><code>ruby example.rb
config = YAML::load(File.open("#{Rails.root}/config/aws.yml"))[Rails.env]
ec2 = AWS::EC2::Base.new(:access_key_id =&gt; config[:access_key_id], :secret_access_key =&gt; config[:secret_access_key], :server =&gt; config[:host])
</code></p>

<ul>
<li>取得 instance 列表</li>
</ul>


<p>```ruby exmaple.rb
instances = ec2.describe_instances</p>

<h1>instances["reservationSet"]["item"] 才會取得 array</h1>

<p>```</p>

<ul>
<li>取得所有 snapshots (自己 create 的)</li>
</ul>


<p>```ruby exmaple.rb
snapshots = ec2.describe_snapshots(:owner => "self")</p>

<h1>snapshots["snapshotSet"]["item"] 才會取得 array</h1>

<p>```</p>

<ul>
<li>取得所有 volumes</li>
</ul>


<p>```ruby exmaple.rb
volumes = ec2.describe_volumes</p>

<h1>volumes["volumeSet"]["item"] 才會取得 array</h1>

<p>```</p>

<ul>
<li>建立 snapshot, 必須先取得 volume id</li>
</ul>


<p><code>ruby example.rb
volume_id = volumes["volumeSet"]["item"].first["volumeId"]
ec2.create_snapshot(:volume_id =&gt; volume_id, :description =&gt; "my snapshot")
</code></p>

<ul>
<li>建立某個 instance 的 snapshot, 有 instance id 的情況下</li>
</ul>


<p><code>ruby example.rb
instance_id = "i-abcd"
volume_id = (((ec2.describe_volumes["volumeSet"] || {})["item"] || []).select { |volume|
  (volume["attachmentSet"]["item"].select{ |ins| ins["instanceId"] == instance_id }.first || {})["instanceId"] == instance_id
}.first || {})["volumeId"]
result = ec2.create_snapshot(:volume_id =&gt; volume_id, :description =&gt; "foo bar")
puts result["snapshotId"] # 新的 snapshot id
</code></p>

<ul>
<li>更多可參考 API: <a href="https://github.com/grempe/amazon-ec2/tree/master/lib/AWS/EC2" target="_blank">https://github.com/grempe/amazon-ec2/tree/master/lib/AWS/EC2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake db 的 tasks 整理]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-09-03/about-rake-db-tasks/"/>
    <updated>2012-09-03T15:38:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-09-03/about-rake-db-tasks</id>
    <content type="html"><![CDATA[<p>善用 rails rake 內建的 DB tasks 進行資料庫操作</p>

<!-- more -->


<p><code>rake db:migrate</code> - 執行 db/migrate 中還沒跑過的 migrations<br/>
<code>rake db:migrate VERSION=12341234</code> - 針對設定的 migrations 版本執行<br/>
<code>rake db:migrate:redo</code> - 重跑目前最新的 migration<br/>
<code>rake db:migrate:redo STEP=3</code> - 重跑目前最新的三個 migration<br/>
<code>rake db:rollback</code> - 還原跑過最新的 migration<br/>
<code>rake db:rollback STEP=3</code> - 還原跑過最新三個的 migration<br/>
<code>rake db:create</code> - 建立 database<br/>
<code>rake db:drop</code> - 刪除整個 database<br/>
<code>rake db:schema:dump</code> - 從目前 database 中實際的 schema 建立 db/schema.rb<br/>
<code>rake db:schema:load</code> - 從 db/schema.rb 中把 schema 建立到 databse 中<br/>
<code>rake db:structure:dump</code> - 從目前 database 中實際的 schema 輸出到 db/structure.sql<br/>
<code>rake db:reset</code> - 合體的 task ( db:drop => db:create => db:schema:load)</p>

<p>另外安裝了 <a href="https://github.com/ludicast/yaml_db" target="_blank"><code>yaml_db</code></a> 後，可以透過以下兩個指令把資料庫的資料做 export/import (不包含 schema)</p>

<p><code>rake db:data:dump</code> - 把資料輸出到 db/data.yml<br/>
<code>rake db:data:load</code> - 把資料從 db/data.yml 輸入到 database 中</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[omniauth 登入後的 redirect 設定]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-10/omniauth-redirect-after-login/"/>
    <updated>2012-08-10T14:08:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-10/omniauth-redirect-after-login</id>
    <content type="html"><![CDATA[<p>我們曾在 <a href="http://rubyist.marsz.tw/blog/2012-01-10/callbacks-of-devise-after-sign-in-or-sign-out/">Devise callbacks</a> 中，描述如何在登入後自定 redirect。這次則是在 omniauth 進行 open id 驗證時就先把 redirect 當參數先丟。</p>

<!-- more -->


<p>參考 <a href="https://github.com/intridea/omniauth/issues/218">官方作法</a><br/>
利用 <code>origin</code> 參數即可在 open id 驗證後進行 redirect</p>

<p><code>ruby config/routes.rb
match '/auth/facebook', :as =&gt; :facebook_login
</code></p>

<p>```ruby app/views/xxx.erb</p>

<h1>view 或 controller 下</h1>

<p>facebook_login_path(:origin => "/url/for/redirect")</p>

<h1>即 "/auth/facebook?origin=/url/for/redirect"</h1>

<p>```</p>

<p>若 <code>devise</code> 中已經透過 application_controller.rb 的 <code>after_sign_in_path_for</code> 處理登入後的 redirect 時，則可以透過 <code>request.env['omniauth.origin']</code> 取得 origin 參數的內容。</p>

<p><code>ruby app/controllers/application_controller.rb
def after_sign_in_path_for(user)
  return request.env['omniauth.origin'] || root_path
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise 的 user 登入免驗證密碼]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-09/devise-user-without-validate_password/"/>
    <updated>2012-08-09T17:15:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-09/devise-user-without-validate_password</id>
    <content type="html"><![CDATA[<p><code>Devise</code> 加上 <code>Omniauth</code> (或其他 Open ID 登入機制) 時，資料庫的密碼欄位可能會需要為空值，因此可在 user 的 model 中覆寫 <code>password_required?</code> (為 public method) 即可。</p>

<!-- more -->


<p>```ruby app/models/user.rb
  def password_required?</p>

<pre><code>return (self.facebook_id ? false : true)
</code></pre>

<p>  end
```</p>

<p>該範例之邏輯為，有 facebook id 時密碼欄位可為空值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 backup gem 做自動化備份]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-03-08/backup-gem/"/>
    <updated>2012-03-08T11:57:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-03-08/backup-gem</id>
    <content type="html"><![CDATA[<p>source: <a href="https://github.com/meskyanichi/backup" target="_blank">https://github.com/meskyanichi/backup</a><br/>
和 <a href="http://godrb.com/" target="_blank">God</a> 一樣是一個獨立的 gem，因此也可用於其他語言</p>

<!-- more -->


<p><code>backup</code> 的特色:</p>

<ol>
<li>可備份 <code>Redis</code>、<code>MongoDB</code>、<code>Mysql</code> 等 DB</li>
<li>可備份檔案、目錄</li>
<li>備份可儲存於 local disk、<code>Amazon S3</code>、<code>Dropbox</code> 或透過 <code>ftp</code>.<code>scp</code> 等協定將檔案上傳</li>
</ol>


<p>範例檔的備份標的:</p>

<ol>
<li><code>Mysql</code></li>
<li>使用者上傳之頭像圖檔儲存於 <code>Rails</code> public/uploads</li>
<li>備份檔案上傳至 <code>Amazon S3</code></li>
</ol>


<h4>安裝</h4>

<p><code>gem install backup</code></p>

<h4>範例</h4>

<p>打開空檔案即可使用</p>

<p>```ruby backup_config.rb
Backup::Model.new(:my_app, 'db data of my app') do
  # mysql 備份
  database MySQL do |db|</p>

<pre><code>db.name               = "my_app_db"
db.username           = "root"
db.password           = "12341234"
db.host               = "127.0.0.1"
db.port               = 3306
db.socket             = "/tmp/mysql.sock"
</code></pre>

<p>  end</p>

<p>  # user 頭像檔案<br/>
  archive :uploads do |archive|</p>

<pre><code>archive.add "/path/to/my_app/public/uploads"
</code></pre>

<p>  end</p>

<p>  # 上傳至 S3<br/>
  store_with S3 do |s3|</p>

<pre><code>s3.access_key_id      = "12341234"
s3.secret_access_key  = "!@#$%^&amp;*("
s3.region             = "us-east-1"
s3.bucket             = "my_app_backup"
s3.path               = '/'
s3.keep               = 50
</code></pre>

<p>  end</p>

<p>  # 壓縮打包設定
  compress_with Gzip do |compression|</p>

<pre><code>compression.best = true
compression.fast = false
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>執行</p>

<p><code>ruby
backup perform -t my_app -c backup_config.rb
</code></p>

<p>就可進行備份</p>

<p>若要做 <code>Rails</code> 定期備份, 再將指令整合於 <code>whenever</code> 即可<br/>
另外再提供儲存於 local disk 的範例</p>

<p>```ruby backup_config.rb
  store_with Local do |local|</p>

<pre><code>local.path = "/path/to/back/dir"
local.keep = 50
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
</feed>
