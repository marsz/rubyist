<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: API | 黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/API/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2013-05-06T15:36:59+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用 Swagger 產生互動式 API 文件]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-05-04/swagger-api-doc-rails/"/>
    <updated>2013-05-04T20:48:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-05-04/swagger-api-doc-rails</id>
    <content type="html"><![CDATA[<p><a href="https://developers.helloreverb.com/swagger/" target="_blank">Swagger</a> 是一套由 HTML + Javascript 撰寫的 REST API 文件的框架。 (core 是以 scala 寫的)</p>

<!-- more -->


<p>從 <a href="http://petstore.swagger.wordnik.com/" target="_blank">Demo 頁</a> 可了解到 Swagger 不僅僅提供 API 的規格資訊，也提供互動介面讓開發者可以直接輸入參數進行測試。<br/>
<img src="http://i.imgur.com/a5vAGKz.png" /></p>

<p>亦支援 GET &amp; POST 以外的 http method (PUT、DELETE)。</p>

<p><img src="http://i.imgur.com/L3c5TTt.png" /></p>

<p>Demo 頁面的 source code 在<a href="https://github.com/wordnik/swagger-ui" target="_blank"> Github </a>上。也可以參考 wordnik 的<a href="http://developer.wordnik.com/docs.html" target="_blank"> 官方正式 API 文件 </a>。</p>

<p>API 文件內容完全是透過 ajax 取得 JSON data 產生的，因此必須提供 server 吐出符合 Swagger 文件中所定義的 JSON 格式，讓前端網頁能夠生成 API 文件的介面。</p>

<p><img src="http://i.imgur.com/iC3LFIL.png" border="1" style="border-color:#000000" /></p>

<p>在 Swagger 文件中所定義的物件有:</p>

<ol>
<li><code>doc</code>: 代表整份 API 文件 (<a href="https://github.com/wordnik/swagger-core/wiki/Resource-Listing" target="_blank">規格文件</a>)</li>
<li><code>resource</code>: API 文件下的分類目錄 (<a href="https://github.com/wordnik/swagger-core/wiki/API-Declaration" target="_blank">規格文件</a>)</li>
<li><code>api</code>: 每一條 REST Request (<a href="https://github.com/wordnik/swagger-core/wiki/API-Declaration" target="_blank">規格文件</a>)</li>
<li><code>parameter</code>: <code>api</code> 下的每個參數 (<a href="https://github.com/wordnik/swagger-core/wiki/Parameters" target="_blank">規格文件</a>)</li>
<li><code>model</code>: 自訂的 return data type (<a href="https://github.com/wordnik/swagger-core/wiki/Datatypes" target="_blank">規格文件</a>)</li>
</ol>


<p>鑿於定義相當繁多且複雜，Swagger 本身有提供<a href="https://github.com/wordnik/swagger-codegen/tree/master/samples/server-generator" target="_blank">部分語言的 API 文件生成後台</a> (Ruby 開發者可選擇 sinatra)，讓開發者能夠花最少的時間開始使用 Swagger。</p>

<p>但筆者仍覺得 Swagger 使開發者進入狀況的門檻仍高，因此花了點時間以 rails app 開發 Swagger json data 的管理後台生成 swagger API 文件，提供後台的 web 操作介面來產生 Swagger 的 API 文件。</p>

<p>Github: <a href="https://github.com/marsz/swagger-rails" target="_blank">https://github.com/marsz/swagger-rails</a><br/>
Demo: <a href="http://swagger.5fpro.com/" target="_blank">http://swagger.5fpro.com/</a></p>

<p>功能特色:</p>

<ol>
<li>FB 登入/註冊，單一帳號下可建立多筆 <code>doc</code></li>
<li>自訂 API 實際測試的目標網域</li>
<li>可設定獨立網域 (FQDN)，若沒有設定系統也會自動產生一組給你用</li>
<li><code>resource</code> 可排序</li>
</ol>


<p>讓我們 step by step 來建立 API 文件吧。<br/>
範例是小弟在早期自己寫的 API，用來提供台灣縣市鄉鎮的資料庫。</p>

<ol>
<li>建立 <code>doc</code>，內容如下:<br/>
<img src="http://i.imgur.com/dM1Ori8.png" /></li>
<li>建立 <code>doc</code> 後，系統會提供你 API 實測時的網址格式<br/>
<img src="http://i.imgur.com/RNsHmMx.png" /></li>
<li>建立 <code>resource</code> (圖略)， <code>resource</code> 可以用來當做是管理許多 API 的目錄</li>
<li>建立 <code>api</code>: 選擇 http method 和 path<br/>
<img src="http://i.imgur.com/x9wfS0U.png" /><br/>
若 API 參數在 path 中，可用大括號包起來，必且給予參數名稱</li>
<li>填寫 return data type，若為某個 model 的 array 可以以圖內的格式表示<br/>
<img src="http://i.imgur.com/5TyRs6L.png" /></li>
<li>api path 內有參數的話，底下的 parameters 也必須增加 <code>parameter type</code> 為 <code>path</code> 的參數 (如圖)，名稱和大括號內對應<br/>
<img src="http://i.imgur.com/98IsmNe.png" /></li>
<li>有關 <code>model</code> 的定義，可在 doc 頁找到，這裡的定義與否不會影響文件的正常顯示，有定義的話文件也會顯示出來，內容也就更完整囉<br/>
<img src="http://i.imgur.com/F1vZR2E.png" /></li>
<li>點擊 doc information 內的連結即可看到結果(<a href="http://gaia-doc.5fpro.tw/#!/3/api_6_get_2" target="_blank">http://gaia-doc.5fpro.tw/#!/3/api_6_get_2</a>)<br/>
<img src="http://i.imgur.com/8x0rLQX.png" /></li>
<li>當然，API 實測要有資料，必須實作 <a href="http://gaia.5fpro.tw/cities/1.json" target="_blank">http://gaia.5fpro.tw/cities/1.json</a> 回傳的 JSON data 才行。</li>
</ol>


<p>目前的 swagger-rails 仍有許多待增加的功能:</p>

<ol>
<li>多人協作</li>
<li>修改記錄</li>
<li>自訂前端 CSS</li>
<li>後台介面優化</li>
<li>100% 實作 Swagger 所有支援的格式</li>
</ol>


<p>最後附上筆者目前正式對外開放的 API 文件給各位參考:</p>

<ol>
<li><a href="http://api-doc.thewall.tw/" target="_blank">THEWALL 這牆音樂</a></li>
<li><a href="http://gaia-doc.5fpro.tw/" target="_blank">台灣縣市鄉鎮資料庫</a>, 含郵遞區號</li>
<li><a href="http://medusa-doc.5fpro.com/" target="_blank">爬蟲系統</a> (暫不開放申請)</li>
</ol>


<p>筆者目前透過自己蓋的 <code>swagger-rails</code> 用於內部溝通居多，不論在 mobile app 開發或跨語言的資料傳遞，透過 Swagger 介面的 API 實測功能，使用者很快就可以了解每條 API 的取用方式與資料格式，大大減少了溝通的成本。</p>

<p>Swagger 參考資料:</p>

<ol>
<li><a href="https://github.com/wordnik/swagger-core/wiki" target="_blank">Swagger Specification</a></li>
<li><a href="https://github.com/wordnik/swagger-core/wiki/Downloads" target="_blank">Swagger Downloads</a></li>
<li><a href="https://developers.helloreverb.com/swagger/" target="_blank">Official Site</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server 端允許 ajax cross domain 存取]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-04-28/server-side-accept-cross-domain-ajax-request/"/>
    <updated>2013-04-28T13:07:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-04-28/server-side-accept-cross-domain-ajax-request</id>
    <content type="html"><![CDATA[<p>在 controller 中加入以下即可允許來自 cross domain 的 ajax request</p>

<p><code>ruby
response.headers["Access-Control-Allow-Origin"] = "*"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修正 IE 無法透過 cross-domain AJAX 取得 JSON 物件]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-03-29/ie-jquery-ajax-jsonp-n-cross-domain-n-cache-control-public/"/>
    <updated>2013-03-29T22:52:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-03-29/ie-jquery-ajax-jsonp-n-cross-domain-n-cache-control-public</id>
    <content type="html"><![CDATA[<p>controller 中的 <code>respond_to</code> 可用來 return 指定的 format 供 JS 取用 API 資料<br/>
但很不幸的 IE 9 以下在透過 jquery 中的 getJSON 無法取得 return 的 json 物件。</p>

<!-- more -->


<p>server 端的 action</p>

<p>```ruby
def index
  response.headers["Access-Control-Allow-Origin"] = "*"
  expires_in 1.day, :public => true
  @data = SomeModel.all
  respond_to do |f|</p>

<pre><code>f.json{ render :json =&gt; @data }
f.xml{ render :xml =&gt; @data }
</code></pre>

<p>  end
end
```</p>

<p>client 端的 javascript</p>

<p><code>javascript
$.getJSON("http://apihost.com/products.json","jsonp", function(products){
   console.log(products);
});
</code></p>

<p>結果:  IE9 以下不 work，其他瀏覽器沒問題(生氣)</p>

<p>解決此問題的方法必須例用 jquery jsonp callback 的方式達到目的即可<br/>
因此 server 端的 response 的 content-type 必須是 javascript (見 <a href="http://d.pr/i/66d0" target="_blank">此圖</a>)</p>

<p>server 端寫法</p>

<p>```ruby
def index
  response.headers["Access-Control-Allow-Origin"] = "*"
  expires_in 1.day, :public => true
  @data = SomeModel.all
  respond_to do |f|</p>

<pre><code>f.json{ render :json =&gt; @data }
f.xml{ render :xml =&gt; @data }
f.js{ :json =&gt; @data, :callback =&gt; params[:callback] }
</code></pre>

<p>  end
end
```</p>

<p>client 端的 javascript</p>

<p><code>javascript
$.getJSON("http://apihost.com/products.js?callback=?",function(data){
   console.log(data);
});
</code></p>

<p>搞定!!!</p>

<p>server 端其他寫法的補充:</p>

<p>開啟 cross-domain 的 ajax request</p>

<p><code>ruby
response.headers["Access-Control-Allow-Origin"] = "*"
</code></p>

<p>開啟 cache-control 為 public:</p>

<p><code>ruby
expires_in 1.day, :public =&gt; true
</code></p>
]]></content>
  </entry>
  
</feed>
