<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ActiveRecord | Ruby on Rails]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/activerecord/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2011-12-30T17:23:59+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[實作 sql 中的數值欄位的遞增(counter increment)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-30/counter-increment-with-custom-value/"/>
    <updated>2011-12-30T17:07:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-30/counter-increment-with-custom-value</id>
    <content type="html"><![CDATA[<p>針對 db 的數值欄位做直接加減以避免 inconsistent update 問題
即想在 sql 中實作出
<code>sql
UPDATE users SET score = score + 1 WHERE id = 1
</code></p>

<!-- more -->


<p>rails 在實作 counter cache 中有 api 可用
<code>ruby
User.increment_counter "score", user.id
</code></p>

<p>對應 sql:
<code>sql
UPDATE users SET score = score + 1 WHERE id = 1
</code></p>

<h6>參考</h6>

<p><a href="http://apidock.com/rails/ActiveRecord/CounterCache/increment_counter" target="_blank">http://apidock.com/rails/ActiveRecord/CounterCache/increment_counter</a></p>

<p>當然, 遞減的 method 相對是 decrement_counter</p>

<p>若增減值大於 1 的話, 則可用 update_counters 來實作
<code>ruby
User.update_counters user.id, :score =&gt; 3
</code></p>

<p>輸出 sql
<code>sql
UPDATE users SET score = score + 3 WHERE id = 1
</code></p>

<p>update_counters 可以一次對多個欄位做增減
<code>ruby
User.update_counters user.id, :score =&gt; 3, :karma =&gt; 6
</code></p>

<h6>參考</h6>

<p><a href="http://apidock.com/rails/ActiveRecord/CounterCache/update_counters" target="_blank">http://apidock.com/rails/ActiveRecord/CounterCache/update_counters</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[巢狀 (nested) to_json / to_xml 應用]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-23/nested-to_json-and-to_xml/"/>
    <updated>2011-12-23T21:40:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-23/nested-to_json-and-to_xml</id>
    <content type="html"><![CDATA[<p>在做 api 輸出(json,xml等)時, 想要將 model 中的某些 attribute 或關連的其他 model 一起輸出, rails 中的 to_json 或 to_xml 更可以針對 method 做輸出!</p>

<!-- more -->


<h2>參考</h2>

<ul>
<li>ApiDock</li>
</ul>


<p><a href="http://apidock.com/rails/ActiveRecord/Serialization/to_json" target="_blank">http://apidock.com/rails/ActiveRecord/Serialization/to_json</a></p>

<ul>
<li>Stackoverflow</li>
</ul>


<p><a href="http://stackoverflow.com/questions/4443218/ror-nested-include-to-include-sub-resources-in-to-xml-to-json" target="_blank">http://stackoverflow.com/questions/4443218/ror-nested-include-to-include-sub-resources-in-to-xml-to-json</a></p>

<h2>說明</h2>

<ul>
<li>參數為 include</li>
<li>可以搭配 only, methods 做部分 attribute 或 method 的輸出</li>
</ul>


<h2>範例</h2>

<p>```ruby
foo.to_json(:include =></p>

<pre><code>           { :emails =&gt; { :only =&gt; :address }, 
             :friends =&gt; { :only =&gt; :name, 
               :include =&gt; { :emails =&gt; { :only =&gt; :address } } 
             }
           })
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
