<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Capistrano | 黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/Capistrano/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2013-06-08T15:52:11+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[安裝與設定 unicorn 實現佈署時 zero down time]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-06-03/unicorn-rails-and-capistrano/"/>
    <updated>2013-06-03T11:27:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-06-03/unicorn-rails-and-capistrano</id>
    <content type="html"><![CDATA[<p>本文章的 code 可參考公開的 pull request<br/>
<a href="https://github.com/5fpro/cupid/pull/11/files" target="_blank">https://github.com/5fpro/cupid/pull/11/files</a><br/>
這是基礎到不行的設定方式，考量到 server 效能在設定上的 best practice 將會在日後持續 update 本文。</p>

<!-- more -->


<h3>安裝 gem</h3>

<p>```ruby Gemfile
group :development do
  gem 'capistrano-unicorn', :require => false
end</p>

<p>gem 'unicorn'
```</p>

<p>本文所採用的 gem 版本</p>

<p><code>ruby Gemfile.lock
capistrano-unicorn (0.1.9)
unicorn (4.6.2)
</code></p>

<h3>佈署設定</h3>

<p>這裡的 <code>production.rb</code> 是針對 <code>rails_env=production</code>，而非 capistrano 中 multistage 的 production</p>

<p>```ruby config/unicorn/production.rb
worker_processes 1
preload_app true</p>

<p>listen '/tmp/unicorn.cupid.sock' # sock 檔名可依照 app 需求設定</p>

<p>stderr_path 'log/unicorn.error.log'
stdout_path 'log/unicorn.log'</p>

<p>pid "tmp/pids/unicorn.pid"</p>

<p>rails_env = ENV['RAILS_ENV'] || 'production'</p>

<h1>before/after fork 可自行擴充</h1>

<p>before_fork do |server, worker|
end</p>

<p>after_fork do |server, worker|
end
```</p>

<p>(也可以把上述檔案放在 <code>config/unicorn.rb</code>)</p>

<h3>server 上的 nginx.conf</h3>

<p>```ruby nginx.conf
upstream my_app {  # upstream 名稱可自定
  server unix:/tmp/unicorn.cupid.sock; # 這裡要和 config/unicorn/production.rb 中 listen 的設定對應
}</p>

<p>server {
  listen 80;
  server_name example.com;</p>

<p>  # passenger_enabled on; # 原本要設定 passenger 的記得要拿掉
  # .......</p>

<p>  location / {</p>

<pre><code>proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header Host $http_host;
proxy_pass http://my_app; # upstream 名稱
</code></pre>

<p>  }</p>

<p>  # .......
}
```</p>

<h3>把 unicorn 重啟的 hook 掛到 deploy.rb 中</h3>

<p><code>ruby config/deploy.rb
require 'capistrano-unicorn'
after 'deploy:restart', 'unicorn:restart'
</code></p>

<p>done!</p>

<h3>如何在本機測試 unicorn</h3>

<p><code>bundle exec unicorn</code></p>

<p>Go to http://localhost:8080</p>

<h3>參考資料</h3>

<ul>
<li>更多 unicorn 可以在 cap 指令中的應用: <a href="https://github.com/sosedoff/capistrano-unicorn/blob/master/lib/capistrano-unicorn/capistrano_integration.rb" target="_blank">https://github.com/sosedoff/capistrano-unicorn/blob/master/lib/capistrano-unicorn/capistrano_integration.rb</a></li>
<li>unicorn 設定檔說明: <a href="https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb" target="_blank">https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb</a></li>
<li>Github Blog 上說明他們自己的 unicorn 如何設定: <a href="https://github.com/blog/517-unicorn" target="_blank">https://github.com/blog/517-unicorn</a></li>
<li>其他 unicorn 設定相關教學:

<ul>
<li><a href="http://tech.gadii.net/blog/2013/03/07/rails-deploy-ji-chu-jiao-xue/" target="_blank">http://tech.gadii.net/blog/2013/03/07/rails-deploy-ji-chu-jiao-xue/</a></li>
<li><a href="https://devcenter.heroku.com/articles/rails-unicorn" target="_blank">https://devcenter.heroku.com/articles/rails-unicorn</a></li>
<li><a href="http://ruby-china.org/topics/471" target="_blank">http://ruby-china.org/topics/471</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 ( 佈署篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-21/resque-deploy-worker/"/>
    <updated>2012-02-21T01:56:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-21/resque-deploy-worker</id>
    <content type="html"><![CDATA[<p>透過 capistrano 佈署到 server 時，除了需要啟動 worker 之外，也會希望在每次佈署後，也重新啟動 worker<br/>
因為 worker 是透過 rake 啟動的，所以當 perform 相關的程式有修改時，worker 也必須重新啟動<br/>
以下將介紹如何將重啟 worker 整合到 capistrano 中</p>

<!-- more -->


<h4>將 worker 丟背景執行的方法</h4>

<p>resque 1.9 以上有提供參數 :)</p>

<p><code>
BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work
</code></p>

<p>背景的 worker 要留一下 pid file, 以方便 kill</p>

<p><code>
PIDFILE=./resque.pid BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work
</code></p>

<h4>整合 capistrano</h4>

<p>deploy 中加 restart_resque 的 task</p>

<p>```ruby config/deploy.rb
namespace :deploy do
  # .....
  task :restart_resque, :roles => :app do</p>

<pre><code>queues = [:foo_queue, :barbar]
queues.each do |queue|
  pid_file = "#{current_path}/tmp/pids/resque-#{queue}.pid"    
  run "test -f #{pid_file} &amp;&amp; cd #{current_path} &amp;&amp; kill -s QUIT `cat #{pid_file}` || rm -f #{pid_file}"
  run "cd #{current_path} &amp;&amp; PIDFILE=#{pid_file} RAILS_ENV=#{rails_env} BACKGROUND=yes QUEUE=#{queue} bundle exec rake environment resque:work"
end
</code></pre>

<p>  end
  #...
end
```</p>

<p>上面的例子是以一條 queue 配一個 worker 的方式執行，若要通通塞一個 worker 就 QUEUE=* 吧 XD</p>

<p>restart app 後就 restart resque worker 吧!!</p>

<p><code>ruby config/deploy.rb
after 'deploy:restart', 'deploy:restart_resque'
</code></p>

<h4>有關啟動 worker 的參數</h4>

<p>resque 提供了許多參數，讓你可以依照不同的需求執行worker，底下將介紹</p>

<h6>將 worker 執行的結果輸出</h6>

<p>debug 很好用，但個人還是推薦用 rspec 去 debug 吧 XD</p>

<p><code>ruby
VVERBOSE=1 QUEUE=* bundle exec rake environment resque:work
</code></p>

<h6>指定 queue (一條或多條)</h6>

<p>多條可以逗號隔開</p>

<p><code>ruby
QUEUES=file_serve,warm_cache bundle exec rake environment resque:work
</code></p>

<p>* 則是所有的 queue</p>

<p><code>ruby
QUEUES=* bundle exec rake environment resque:work
</code></p>

<h6>polling 的頻率</h6>

<p>針對即時性高的需求,以秒計,預設為 5 秒</p>

<p><code>
INTERVAL=0.1 QUEUE=foo bundle exec rake environment resque:work
</code></p>

<h6>多個 worker 同步執行</h6>

<p><code>
COUNT=5 QUEUE=* bundle exec rake environment resque:workers
</code></p>

<p>但官方推薦用 gem "god" 來執行多個 worker<br/>
相關可參考 <a href="https://github.com/defunkt/resque/blob/master/examples/god/resque.god" target="_blank">官方範例</a><br/>
god 也可以用來解決 worker 掛掉的問題<br/>
有關 god 的整合, 有空再分享 :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的 capistrano 完整設定檔說明]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-14/my-capistrano-config-with-multistage-apache-restart-assets-precompile-and-symlink-shared/"/>
    <updated>2012-01-14T16:09:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-14/my-capistrano-config-with-multistage-apache-restart-assets-precompile-and-symlink-shared</id>
    <content type="html"><![CDATA[<p>capistrano 是一套強大的佈署工具, 今天提供小弟的設定檔內容給大家參考</p>

<!-- more -->


<p>rvm 和 bundler</p>

<p><code>ruby config/deploy.rb
$:.unshift(File.expand_path('./lib', ENV['rvm_path'])) # Add RVM's lib directory to the load path.
require "rvm/capistrano" # Load RVM's capistrano plugin.
require 'bundler/capistrano'
</code></p>

<p>capistrano color, 讓佈署過程中的訊息內容上色<br/>
Gemfile 必須先加上 gem 'capistrano_colors'</p>

<p><code>ruby config/deploy.rb
begin
  require 'capistrano_colors'
rescue LoadError
  puts "`gem install capistrano_colors` to get output more userfriendly."
end
</code></p>

<p>cron 設定, 透過 whenever gem 在 deploy 時, 更新 cron<br/>
Gemfile 要有 gem 'whenever'</p>

<p><code>ruby config/deploy.rb
require "whenever/capistrano"
</code></p>

<p>multistages 設定, 讓 server 端的設定和佈署工作各自獨立管理, 同時資源佈署多個 server</p>

<p><code>ruby config/deploy.rb
require 'capistrano/ext/multistage'
set :stages,        %w(staging production)
set :default_stage, "staging"
</code></p>

<p>基本設定, 包含 git</p>

<p>```ruby config/deploy.rb
set :application, "foo"
set :repository,  "git@github.com:marsz/foo.git"</p>

<p>set :scm, :git</p>

<p>set :use_sudo, false
```</p>

<p>設定 deploy:restart, capistrano 預設是空的, 所以重起 rack 的部份一定要自己寫, 以下範例以 <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#_redeploying_restarting_the_ruby_on_rails_application" target="_blank">passenger + apache</a> 的重啟方式做為參考</p>

<p>```ruby config/deploy.rb</p>

<h1>namespace :deploy 內</h1>

<p>namespace :deploy do
  # .....
  task :restart, :roles => :app, :except => { :no_release => true } do</p>

<pre><code>run "touch #{current_path}/tmp/restart.txt"
</code></pre>

<p>  end
  # .....
end
```</p>

<p>設定 symlink_shared, 有一些沒進 version control 的 config 檔案, 要在佈署時, link 過去, 例如 config/database.yml, 以下僅供參考, 實際 link 內容須自己寫</p>

<p>```ruby config/deploy.rb</p>

<h1>namespace :deploy 內</h1>

<p>namespace :deploy
  # ....
  task :symlink_shared, :roles => [:app] do</p>

<pre><code>config_files = [:database, :redis]
symlink_hash = {}
config_files.each do |fname|
  from = "#{shared_path}/config/#{fname}.yml"
  to = "#{release_path}/config/#{fname}.yml"
  run "ln -s #{from} #{to}"
end
</code></pre>

<p>  end
  # ....
end</p>

<h1>把 symlink_shared 內容掛進去 deploy 中</h1>

<p>before "bundle:install", "deploy:symlink_shared"
```</p>

<p>tail log, 要線上 debug 時可用</p>

<p>```ruby config/deploy.rb
task :tail_log, :roles => :app do
  run "tail -f -n 100 #{shared_path}/log/#{rails_env}.log"
end</p>

<h1>執行 cap production tail_log 即可</h1>

<p>```</p>

<p>使用了 multistage 後, 各個 server 的設定檔必須放在 config/deploy/ 下, 檔名對應 stage 名稱<br/>
例如 config/deploy/production.rb
以下為 stage 設定檔內容</p>

<p>預設 rails env</p>

<p><code>ruby config/deploy/production.rb
set :rails_env, "production"
</code></p>

<p>github 分支</p>

<p><code>ruby config/deploy/production.rb
set :branch, 'master'
</code></p>

<p>ssh 登入相關, 建議多利用 <a href="http://www.eng.cam.ac.uk/help/jpmg/ssh/authorized_keys_howto.html" target="_blank"> SSH 免密碼登入 </a></p>

<p><code>ruby config/deploy/production.rb
set :user, 'marsz'
set :domain, 'xxx.com'
server "#{domain}", :web, :app, :db, :primary =&gt; true
</code></p>

<p>佈署的 dir path</p>

<p><code>ruby config/deploy/production.rb
set :deploy_to, "/path/to/app"
</code></p>

<p>佈署指令</p>

<p><code>
cap production setup # 第一次佈署環境建立
cap production deploy # 進行佈署
cap production deploy:migrations # 進行佈署並且跑 migration
</code></p>

<p>若想要在 cap deploy 時也執行 rake assets:precompile<br/>
可以參考 <a href="http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy/" target="_blank">這篇</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Capistrano 中 deploy 時能夠自動執行 rake assets:precompile]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy/"/>
    <updated>2011-12-25T15:14:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy</id>
    <content type="html"><![CDATA[<p>當我們在專案目錄中執行 "capify ." 時, 會產生 Capfile 檔
在該檔案加上</p>

<p><code>ruby Capfile
load 'deploy/assets'
</code></p>

<!-- more -->


<p>capistrano 會將 current/public/assets 連結到 shared/assets 中
若 shared 下無此目錄, 記得要 mkdir 一下</p>
]]></content>
  </entry>
  
</feed>
