<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Rubygems | 黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/Rubygems/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2013-03-31T02:10:27+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我寫的 gem - venus 簡介]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-03-13/rubygems-venus/"/>
    <updated>2013-03-13T13:12:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-03-13/rubygems-venus</id>
    <content type="html"><![CDATA[<p>因受到了<a href="http://railsapps.github.com/rails-composer/" target="_blank"> rails composor </a> 的影響，決定也來寫一個客製化的 rails generator。<br/>
但後來又覺得只能在開新專案用的話，使用頻率也不太高...</p>

<!-- more -->


<p>鑿於在許多專案中，總是為了要安裝某些 gem 而必須再回去翻寫過專案中的 code 或上官網找範例 code 做 copy/paste + 修改，於是我決定寫一個 generator 來設定這些常用的 gem，僅需要如同 rails composor 一樣回答一些問題就可以把所有的設定弄到好。</p>

<p>因此 venus 因應而生</p>

<p>安裝: <a href="https://rubygems.org/gems/venus" target="_blank">https://rubygems.org/gems/venus</a>  <br/>
源碼: <a href="https://github.com/marsz/venus" target="_blank">https://github.com/marsz/venus</a></p>

<p>以下逐一介紹各個指令</p>

<p><code>rails generate venus:init</code></p>

<p>專案初始化設定，例如移除 public/index.html，安裝必要的 gem 例如分頁用的 <code>kminari</code>，剛 new 好的 rails 專案適合執行此指令。</p>

<p><code>rails generate venus:mysql</code></p>

<p>設定 mysql，包含從 <code>Gemfile</code> 安裝 mysql2，設定 <code>database.yml</code> 以及 <code>database.yml.example</code>，最後再將 <code>config/database.yml</code> 加到 .gitignore 中。</p>

<p><code>rails generate venus:paginate</code></p>

<p>單獨安裝分頁用的 gem - <code>kminari</code>，也會問你要不要產生客製化的 view 出來。</p>

<p><code>rails generate venus:simple_form</code></p>

<p>view 使用 form 必備的 <a href="https://github.com/plataformatec/simple_form" target="_blank">simple_form</a>，預設會產生 bootstrap wrapper 的設定檔。也會詢問是否要順便安裝 <a href="https://github.com/ryanb/nested_form" target="_blank">nested_form</a>，安裝 nested_form 需要在 js 中 require gem 裡面包好的 JS，所以也會詢問 require code 和 example code 要放的檔案路徑。</p>

<p><code>rails generate venus:settingslogic</code></p>

<p>gem - <a href="https://github.com/binarylogic/settingslogic" target="_blank"><code>settingslogic</code></a>。可以將多個 yml 的設定檔放在此 gem 所讀取的 yaml 下，使其能夠容易管理。此 generator 同時也會產生 .example 檔以及加入 .yml 到 .gitignore 下。</p>

<p><code>rails generate venus:rspec</code></p>

<p>安裝並且設定 <code>rspec</code>，並且移除 test 目錄，在 <code>config/application.rb</code> 中設定 generate controller 時，不自動產生 assets files 和 helper。</p>

<p><code>rails generate venus:devise</code></p>

<p>安裝並且設定 scope 為 user 的 devise gem。</p>

<p><code>rails generate venus:omniauth</code></p>

<p>會先檢查是否有安裝 settingslogic 以及 devise，然後再安裝 omniauth，過程中會詢問 facebook / twitter / github 登入的安裝與否。</p>

<p><code>rails generate venus:redis</code></p>

<p>安裝並且設定 redis client gem <a href="https://github.com/redis/redis-rb" target="_blank">redis-rb</a> 。</p>

<p><code>rails generate venus:aws</code></p>

<p>安裝並且設定 Amazon <a href="https://github.com/aws/aws-sdk-ruby" target="_blank">官方的 ruby client </a>。過程中會先檢查 settingslogic，並且將 api key 和 secret 存到其中。最後也會詢問否需要順便安裝 Amazon Simple Email Service (SES)，用來發 email。</p>

<p><code>rails generate venus:carrierwave</code></p>

<p>安裝並且設定 carrierwave，其中包含 rmagick 進行縮圖，以及 fog 將檔案上傳至S3。過程中會安裝 aws-sdk，所以也會順便詢問 SES 的設定 :p。最後會產生一個 <code>venus_uploader.rb</code> 做為範例。</p>

<p><code>rails generate venus:jqueryui</code></p>

<p>安裝 jquery ui 的 gem。其中會詢問是否要安裝 datepicker，包含產生 trigger 用的 js 範例 code。gem 的 參考連結 => <a href="https://github.com/joliss/jquery-ui-rails" target="_blank">https://github.com/joliss/jquery-ui-rails</a>。 (若有要安裝 datepicker 的話，也會詢問語系)</p>

<p><code>rails generate venus:chosen</code></p>

<p>安裝 <a href="https://github.com/tsechingho/chosen-rails" target="_blank">chosen-rails</a> 並且提供 trigger chosen 的範例 js code。</p>

<p><code>rails generate venus:bootstrap</code></p>

<p>安裝 <code>twitter bootstrap</code> ，包含 gem 設定、 assets require，最後產生範例 layout 檔於 <code>app/views/layouts/</code> 下。內建提供 <a href="http://wrapbootstrap.com/preview/WB0F35928" target="_blank">unicorn admin</a> 的版型套用，蓋後台超爽 XD</p>

<h1>TODOs</h1>

<p>對於此 gem 未來將會逐漸加入我自己寫的 best practice :p 也望各位大大能不吝指教或回報 bug :D</p>

<ul>
<li>sidekiq : 強大的 background job gem</li>
<li>unicorn : 配合 capistrano 讓佈署時可以 zero down time</li>
<li><a href="https://github.com/airblade/paper_trail" target="_blank">paper_trail</a> : 對 model 進行版本控制的 gem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自動化產生 ER 圖的 rubygem]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-11-13/auto-generate-erd-graph/"/>
    <updated>2012-11-13T05:39:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-11-13/auto-generate-erd-graph</id>
    <content type="html"><![CDATA[<p>參考連結:<br/>
1. 官網 : <a href="http://rails-erd.rubyforge.org/" target="_blank">http://rails-erd.rubyforge.org/</a><br/>
2. 相關教學 : <a href="http://zool.me/rails/2010/12/29/Rails-generate-entity-relationship-diagram-projects/" target="_blank">http://zool.me/rails/2010/12/29/Rails-generate-entity-relationship-diagram-projects/</a></p>

<!-- more -->


<h3>系統需求</h3>

<p>MAC OS 請先安裝 <code>brew</code></p>

<h3>安裝 Graphviz</h3>

<h5>MAC OS</h5>

<p><code>
brew install cairo pango graphviz
</code></p>

<p>若無法順利安裝可至 <a href="http://www.graphviz.org/Download_macos.php" target="_blank">graphviz for MAC OS download</a> 頁面下載對應的系統，直接打開 finder 以 window 介面安裝</p>

<h5>Ubuntu</h5>

<p><code>
sudo aptitude install graphviz
</code></p>

<h3>Rails 設定</h3>

<h5>Gemfile</h5>

<p><code>ruby
group :development do
  gem "rails-erd"
end
</code></p>

<p><code>
bundle install
</code></p>

<h3>生成 ERD</h3>

<p><code>
bundle exec rake erd
</code></p>

<p>生成的 ERD 會在專案目錄下的 erd.pdf</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubygems 處理 Amazon Web Service (AWS) EC2]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-11-09/rubygeems-for-aws-ec2/"/>
    <updated>2012-11-09T13:55:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-11-09/rubygeems-for-aws-ec2</id>
    <content type="html"><![CDATA[<p>參考: <a href="https://github.com/grempe/amazon-ec2" target="_blank">https://github.com/grempe/amazon-ec2</a></p>

<!-- more -->


<h3>安裝設定</h3>

<p><code>ruby Gemfile
gem 'amazon-ec2', :require =&gt; "AWS"
</code></p>

<p><code>yaml config/aws.yml
development: &amp;default
  :access_key_id: "abcdabcd"
  :secret_access_key: "abcdabcd"
  :host: "ap-southeast-1.ec2.amazonaws.com"
test:
  &lt;&lt;: *default
</code></p>

<p><code>access_key_id</code> 和 <code>secret_access_key</code> 可至 <a href="https://portal.aws.amazon.com/gp/aws/developer/account/index.html?action=access-key" target="_blank">AWS Security Credentials</a> 查看<br/>
<code>host</code> 則是目標 region 所對應的 endpoint，對應表可至 <a href="https://github.com/garnaat/missingcloud/blob/master/aws.json#L372" target="_blank">https://github.com/garnaat/missingcloud/blob/master/aws.json#L372</a> 查看</p>

<p>養成好習慣, 請勿將 yaml 檔 commit 進去...</p>

<p><code>ruby .gitignore
config/aws.yml
</code></p>

<p>```yaml config/aws.yml.example</p>

<h1>to see region and host mapping :</h1>

<h1>https://github.com/garnaat/missingcloud/blob/master/aws.json#L372</h1>

<p>development: &amp;default
  :access_key_id: ""
  :secret_access_key: ""
  :host: ""
test:
  &lt;&lt;: *default
```</p>

<h3>使用方法</h3>

<ul>
<li>初始化</li>
</ul>


<p><code>ruby example.rb
config = YAML::load(File.open("#{Rails.root}/config/aws.yml"))[Rails.env]
ec2 = AWS::EC2::Base.new(:access_key_id =&gt; config[:access_key_id], :secret_access_key =&gt; config[:secret_access_key], :server =&gt; config[:host])
</code></p>

<ul>
<li>取得 instance 列表</li>
</ul>


<p>```ruby exmaple.rb
instances = ec2.describe_instances</p>

<h1>instances["reservationSet"]["item"] 才會取得 array</h1>

<p>```</p>

<ul>
<li>取得所有 snapshots (自己 create 的)</li>
</ul>


<p>```ruby exmaple.rb
snapshots = ec2.describe_snapshots(:owner => "self")</p>

<h1>snapshots["snapshotSet"]["item"] 才會取得 array</h1>

<p>```</p>

<ul>
<li>取得所有 volumes</li>
</ul>


<p>```ruby exmaple.rb
volumes = ec2.describe_volumes</p>

<h1>volumes["volumeSet"]["item"] 才會取得 array</h1>

<p>```</p>

<ul>
<li>建立 snapshot, 必須先取得 volume id</li>
</ul>


<p><code>ruby example.rb
volume_id = volumes["volumeSet"]["item"].first["volumeId"]
ec2.create_snapshot(:volume_id =&gt; volume_id, :description =&gt; "my snapshot")
</code></p>

<ul>
<li>建立某個 instance 的 snapshot, 有 instance id 的情況下</li>
</ul>


<p><code>ruby example.rb
instance_id = "i-abcd"
volume_id = (((ec2.describe_volumes["volumeSet"] || {})["item"] || []).select { |volume|
  (volume["attachmentSet"]["item"].select{ |ins| ins["instanceId"] == instance_id }.first || {})["instanceId"] == instance_id
}.first || {})["volumeId"]
result = ec2.create_snapshot(:volume_id =&gt; volume_id, :description =&gt; "foo bar")
puts result["snapshotId"] # 新的 snapshot id
</code></p>

<ul>
<li>更多可參考 API: <a href="https://github.com/grempe/amazon-ec2/tree/master/lib/AWS/EC2" target="_blank">https://github.com/grempe/amazon-ec2/tree/master/lib/AWS/EC2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake db 的 tasks 整理]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-09-03/about-rake-db-tasks/"/>
    <updated>2012-09-03T15:38:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-09-03/about-rake-db-tasks</id>
    <content type="html"><![CDATA[<p>善用 rails rake 內建的 DB tasks 進行資料庫操作</p>

<!-- more -->


<p><code>rake db:migrate</code> - 執行 db/migrate 中還沒跑過的 migrations<br/>
<code>rake db:migrate VERSION=12341234</code> - 針對設定的 migrations 版本執行<br/>
<code>rake db:migrate:redo</code> - 重跑目前最新的 migration<br/>
<code>rake db:migrate:redo STEP=3</code> - 重跑目前最新的三個 migration<br/>
<code>rake db:rollback</code> - 還原跑過最新的 migration<br/>
<code>rake db:rollback STEP=3</code> - 還原跑過最新三個的 migration<br/>
<code>rake db:create</code> - 建立 database<br/>
<code>rake db:drop</code> - 刪除整個 database<br/>
<code>rake db:schema:dump</code> - 從目前 database 中實際的 schema 建立 db/schema.rb<br/>
<code>rake db:schema:load</code> - 從 db/schema.rb 中把 schema 建立到 databse 中<br/>
<code>rake db:structure:dump</code> - 從目前 database 中實際的 schema 輸出到 db/structure.sql<br/>
<code>rake db:reset</code> - 合體的 task ( db:drop => db:create => db:schema:load)</p>

<p>另外安裝了 <a href="https://github.com/ludicast/yaml_db" target="_blank"><code>yaml_db</code></a> 後，可以透過以下兩個指令把資料庫的資料做 export/import (不包含 schema)</p>

<p><code>rake db:data:dump</code> - 把資料輸出到 db/data.yml<br/>
<code>rake db:data:load</code> - 把資料從 db/data.yml 輸入到 database 中</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[omniauth 登入後的 redirect 設定]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-10/omniauth-redirect-after-login/"/>
    <updated>2012-08-10T14:08:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-10/omniauth-redirect-after-login</id>
    <content type="html"><![CDATA[<p>我們曾在 <a href="http://rubyist.marsz.tw/blog/2012-01-10/callbacks-of-devise-after-sign-in-or-sign-out/">Devise callbacks</a> 中，描述如何在登入後自定 redirect。這次則是在 omniauth 進行 open id 驗證時就先把 redirect 當參數先丟。</p>

<!-- more -->


<p>參考 <a href="https://github.com/intridea/omniauth/issues/218">官方作法</a><br/>
利用 <code>origin</code> 參數即可在 open id 驗證後進行 redirect</p>

<p><code>ruby config/routes.rb
match '/auth/facebook', :as =&gt; :facebook_login
</code></p>

<p>```ruby app/views/xxx.erb</p>

<h1>view 或 controller 下</h1>

<p>facebook_login_path(:origin => "/url/for/redirect")</p>

<h1>即 "/auth/facebook?origin=/url/for/redirect"</h1>

<p>```</p>

<p>若 <code>devise</code> 中已經透過 application_controller.rb 的 <code>after_sign_in_path_for</code> 處理登入後的 redirect 時，則可以透過 <code>request.env['omniauth.origin']</code> 取得 origin 參數的內容。</p>

<p><code>ruby app/controllers/application_controller.rb
def after_sign_in_path_for(user)
  return request.env['omniauth.origin'] || root_path
end
</code></p>
]]></content>
  </entry>
  
</feed>
