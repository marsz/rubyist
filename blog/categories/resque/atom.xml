<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Resque | 黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/blog/categories/resque/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2012-08-21T15:21:56+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 ( 佈署篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-21/resque-deploy-worker/"/>
    <updated>2012-02-21T01:56:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-21/resque-deploy-worker</id>
    <content type="html"><![CDATA[<p>透過 capistrano 佈署到 server 時，除了需要啟動 worker 之外，也會希望在每次佈署後，也重新啟動 worker<br/>
因為 worker 是透過 rake 啟動的，所以當 perform 相關的程式有修改時，worker 也必須重新啟動<br/>
以下將介紹如何將重啟 worker 整合到 capistrano 中</p>

<!-- more -->


<h4>將 worker 丟背景執行的方法</h4>

<p>resque 1.9 以上有提供參數 :)</p>

<p><code>
BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work
</code></p>

<p>背景的 worker 要留一下 pid file, 以方便 kill</p>

<p><code>
PIDFILE=./resque.pid BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work
</code></p>

<h4>整合 capistrano</h4>

<p>deploy 中加 restart_resque 的 task</p>

<p>```ruby config/deploy.rb
namespace :deploy do
  # .....
  task :restart_resque, :roles => :app do</p>

<pre><code>queues = [:foo_queue, :barbar]
queues.each do |queue|
  pid_file = "#{current_path}/tmp/pids/resque-#{queue}.pid"    
  run "test -f #{pid_file} &amp;&amp; cd #{current_path} &amp;&amp; kill -s QUIT `cat #{pid_file}` || rm -f #{pid_file}"
  run "cd #{current_path} &amp;&amp; PIDFILE=#{pid_file} RAILS_ENV=#{rails_env} BACKGROUND=yes QUEUE=#{queue} bundle exec rake environment resque:work"
end
</code></pre>

<p>  end
  #...
end
```</p>

<p>上面的例子是以一條 queue 配一個 worker 的方式執行，若要通通塞一個 worker 就 QUEUE=* 吧 XD</p>

<p>restart app 後就 restart resque worker 吧!!</p>

<p><code>ruby config/deploy.rb
after 'deploy:restart', 'deploy:restart_resque'
</code></p>

<h4>有關啟動 worker 的參數</h4>

<p>resque 提供了許多參數，讓你可以依照不同的需求執行worker，底下將介紹</p>

<h6>將 worker 執行的結果輸出</h6>

<p>debug 很好用，但個人還是推薦用 rspec 去 debug 吧 XD</p>

<p><code>ruby
VVERBOSE=1 QUEUE=* bundle exec rake environment resque:work
</code></p>

<h6>指定 queue (一條或多條)</h6>

<p>多條可以逗號隔開</p>

<p><code>ruby
QUEUES=file_serve,warm_cache bundle exec rake environment resque:work
</code></p>

<p>* 則是所有的 queue</p>

<p><code>ruby
QUEUES=* bundle exec rake environment resque:work
</code></p>

<h6>polling 的頻率</h6>

<p>針對即時性高的需求,以秒計,預設為 5 秒</p>

<p><code>
INTERVAL=0.1 QUEUE=foo bundle exec rake environment resque:work
</code></p>

<h6>多個 worker 同步執行</h6>

<p><code>
COUNT=5 QUEUE=* bundle exec rake environment resque:workers
</code></p>

<p>但官方推薦用 gem "god" 來執行多個 worker<br/>
相關可參考 <a href="https://github.com/defunkt/resque/blob/master/examples/god/resque.god" target="_blank">官方範例</a><br/>
god 也可以用來解決 worker 掛掉的問題<br/>
有關 god 的整合, 有空再分享 :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 ( mailer 篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-19/resque-mailer/"/>
    <updated>2012-02-19T01:36:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-19/resque-mailer</id>
    <content type="html"><![CDATA[<p>寄信的工作是最必要丟背景的。在 web 前端使用的過程中，若要等待 server 產生 email 內容、和 smtp 連線、然後再把信送出去，這樣的過程肯定讓使用品質大大扣分...<br/>
因此 gem "resque_mailer" 將 resque 的 enqueue 和 perform 實作到 ActionMailer::Base 中</p>

<!-- more -->


<p>即原本的 deliver 應該是要根據 app 的 mailer 設定 (smtp或sendmail等) 把信送出<br/>
bundle resqie_mailer 後, deliver 的結果則變成送到 mq 上 (透過 Resque.enqueue)</p>

<h4>安裝</h4>

<p><code>ruby Gemfile
gem 'resque'
gem 'resque_mailer'
</code></p>

<h4>設定</h4>

<p>```ruby config/initializers/resque_mailer.rb</p>

<h1>queue 的名稱</h1>

<p>Resque::Mailer.default_queue_name = "foo_mailer"</p>

<h1>有 resque_spec</h1>

<p>Resque::Mailer.excluded_environments = []</p>

<h1>無 resque_spec</h1>

<p>Resque::Mailer.excluded_environments = [:test, :cucumber]
```</p>

<h4>使用</h4>

<p>```ruby
class MyMailer &lt; ActionMailer::Base
  include Resque::Mailer</p>

<p>  def foo(user_id)</p>

<pre><code># .....
</code></pre>

<p>  end
end
```</p>

<p>寄信 (送到 mq)</p>

<p><code>ruby
MyMailer.foo(user_id).deliver
</code></p>

<p>寄信 (直接寄出不送 mq)</p>

<p><code>ruby
MyMailer.foo(user_id).deliver!
</code></p>

<p>這裡要注意!!!!! 因為 resque 會將參數內容送到 mq 上, 而 redis 無法處理 number, string, array, hash 以外的變數, 所以在定義 mailer action 時, 參數務必限制在上述這些變數類型的範圍內</p>

<h4>worker 的執行</h4>

<p>一般 mailer 的 worker 建議獨立一條 queue 執行, 效率會比較好 :p</p>

<p><code>
QUEUE=foo_mailer bundle exec rake resque:work
</code></p>

<hr />

<p>resque_mailer 簡單, 但仍是 background job<br/>
因此測試還是要多多寫 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 (測試篇 - Rspec)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-17/resque-spec/"/>
    <updated>2012-02-17T00:40:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-17/resque-spec</id>
    <content type="html"><![CDATA[<p>不管用什麼方式實作 background job 後<br/>
令人頭痛的是很難知道 worker 在執行工作時有沒有噴 exception<br/>
因此測試就顯得更為重要, 每次佈署前必須做好完整的測試, 以減少 worker 出錯<br/>
當然也可以搭配 Exceptional 或 Aribrake 之類的雲端服務來進行監控...</p>

<!-- more -->


<p>resque 的測試有專門的 gem, 用來在測試環境下模擬 message queue 和 worker</p>

<p>resque_spec : <a href="https://github.com/leshill/resque_spec" target="_blank">https://github.com/leshill/resque_spec</a></p>

<h4>安裝</h4>

<p><code>ruby Gemfile
group :test do
  gem 'resque_spec'
end
</code></p>

<p>這裡要注意一點, 不要在 development 環境下 bundle resque_spec, 即 Gemfile 中的 resque_spec 只能 group 在 test 下, 否則執行 Resque.enqueue 就不會送到 redis 而是送進 resque_spec 中</p>

<h4>使用</h4>

<p>resque_spec 的作法是讓原本丟工作到 mq 上的 Resque.enqueue 改為丟到 resque_spec 模擬的 mq 中<br/>
因此 Gemfile bundle 後, 就可以直接在 rspec 中使用, 以下將介紹 rspec 中常用的語法</p>

<h6>清空 mq 所有的 job</h6>

<p>```ruby
describe "#foo" do
  before do</p>

<pre><code>ResqueSpec.reset!
</code></pre>

<p>  end
end
```</p>

<h6>檢查某個 worker 的 job 數</h6>

<p><code>ruby
  FooWorker.should have_queue_size_of(2)
</code></p>

<h6>檢查某個 worker 的 queue 中應該要有的 job</h6>

<p><code>ruby
  FooWorker.should have_queued(foo.id, "bar")
</code></p>

<p>foo.id, "bar" 都是 enqueue 的參數</p>

<p><code>ruby
  # some where enqueue
  Resque.enqueue(FooWorker, foo.id, "bar")
</code></p>

<h6>立即執行不送 queue</h6>

<p>用 "with_resque"</p>

<p>```ruby
it "should works" do
  with_resque do</p>

<pre><code>@foo.run
</code></pre>

<p>  end
end
```</p>

<p>假設 run 的內容是</p>

<p><code>ruby
def run
  Resque.enqueue(FooWorker, id)
end
</code></p>

<p>在 with_resque 內, Resque.enqueue(FooWorker, id) 相當於 FooWorker.perform(id)</p>

<h6>執行 queue 裡面所有的 job</h6>

<p><code>ruby
it "should  works" do
  @foo.run
  ResqueSpec.perform_all(:queue_foo)
end
</code></p>

<p>"queue_foo" 是 Worker 中定義的 queue name</p>

<h4>整合 ResqueMailer</h4>

<p>gem "resque_mailer" 會將 mailer 中的 deliver 行為內容改為 Resque.enqueue<br/>
但是在 test 環境中, resque_mailer 則會還原 deliver 原本的行為<br/>
所以為了 rspec 中也可以測試 mailer 是否 enqueu, 要在 resque_mailer 中的 config 將原本排除掉的 test 環境加入 resque_mailer 的運作中</p>

<p><code>ruby  config/initializers/resque_mailer.rb
Resque::Mailer.excluded_environments = []
</code></p>

<hr />

<p>一般我們都會將複雜或吃效能的工作丟到背景執行<br/>
而複雜的工作又常常需要 debug<br/>
因此平常應該要養成寫 spec 的習慣<br/>
才不會讓自己跟這些複雜的功能過不去 :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 (基本使用篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-15/resque-basic-usage/"/>
    <updated>2012-02-15T15:36:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-15/resque-basic-usage</id>
    <content type="html"><![CDATA[<p>上篇提到如何進行 redis, resque, worker 的設定安裝
本篇將介紹基本使用方式</p>

<!-- more -->


<h4>參考連結</h4>

<p>RailsCast - 影片: <a href="http://railscasts.com/episodes/271-resque" target="_blank">Resque</a>
RailsCast - 文字: <a href="http://railscasts.com/episodes/271-resque?view=asciicast" target="_blank">
Resque</a>
官方文件: <a href="https://github.com/defunkt/resque" target="_blank">Github</a></p>

<h4>基本使用</h4>

<p>情境: 文章內容更新後, 要重新計算其價值(p幣~XD)</p>

<p>先寫好 worker 要做的事情, worker 可以是任何 class</p>

<p>```ruby app/workers/post_evaluate.rb
class PostEvaluate</p>

<p>  @queue = :post_evaluate</p>

<p>  def self.perform(post_id, total_time_seconds)</p>

<pre><code>evaluate Post.find(post_id), total_time_seconds
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>worker 必備兩個部分:
1. @queue 指定 queue 的名稱
2. class method: perform 執行 job 內容, 參數可自定</p>

<p>接下來是如何把 job 丟上 queue</p>

<p>```ruby app/models/post.rb
after_save :evaluate</p>

<p>def evaluate
  Resque.enqueue PostEvaluate, self.id, total_secs
end
```</p>

<p>Resque.enqueue [worker class], [argument 1], [argument 2], .....</p>

<p>相當於 worker 執行了 PostEvaluate.perform(self.id, total_secs)</p>

<h4>注意事項</h4>

<p>enqueue 的參數類型儘可能簡單: Fixnum, String, Array, Hash<br/>
不要將整個 model 或 class instance 丟到 mq 上<br/>
redis 無法儲存像 model 這樣複雜的變數類型</p>

<p>下一篇將介紹如何寫測試(Rspec)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 (前置設定篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-13/resque-redis-and-worker-config/"/>
    <updated>2012-02-13T14:51:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-13/resque-redis-and-worker-config</id>
    <content type="html"><![CDATA[<p>resque 是一套可以用來實作 background job 的 gem<br/>
舉凡長時間的執行如 email, 點數計算等等非即時性的工作, 都可以採用非同步執行<br/>
以加速前端服務的反應速度<br/>
resque 是以 redis 做為 message queue server 的方式來進行...</p>

<!-- more -->


<h4>參考連結</h4>

<p>RailsCast - 影片: <a href="http://railscasts.com/episodes/271-resque" target="_blank">Resque</a><br/>
RailsCast - 文字: <a href="http://railscasts.com/episodes/271-resque?view=asciicast" target="_blank">Resque</a><br/>
官方文件: <a href="https://github.com/defunkt/resque" target="_blank">Github</a></p>

<h4>安裝 Gem</h4>

<p>```</p>

<h1>Gemfile</h1>

<p>gem "resque"
```</p>

<p><code>
bundle install
</code></p>

<h4>安裝 redis</h4>

<p>MacOS</p>

<p><code>
sudo brew install redis
</code></p>

<p>Debian / Ubuntu</p>

<p><code>
sudo apt-get install redis-server
</code></p>

<h4>啟動/停止 redis server</h4>

<p>MacOS</p>

<p>```</p>

<h1>啟動</h1>

<p>/usr/local/bin/redis-server /usr/local/etc/redis.conf</p>

<h1>停止 ps + kill :p</h1>

<p>sudo kill -SIGHUP $(ps aux|grep 'redis-server'|grep -v 'grep'|awk '{print $2}')
```</p>

<p>Debian / Ubuntu</p>

<p>```</p>

<h1>啟動</h1>

<p>sudo service redis-server start</p>

<h1>停止</h1>

<p>sudo service redis-server stop
```</p>

<h4>Resque 中的 redis 設定</h4>

<p>由於 resque 必須將 job 丟上 redis (mq server)<br/>
因此必須設定連線的位址</p>

<p>手動建立兩個檔案<br/>
config/redis.yml => redis 的連線設定檔<br/>
config/initializers/resque.rb => 初始化 resque</p>

<p><code>yml config/redis.yml
development:
  :redis: "localhost:6379"
</code></p>

<p><code>ruby config/initializers/resque.rb
config = YAML.load_file("#{Rails.root}/config/resque.yml")[Rails.env]
Resque.redis = config[:redis]
</code></p>

<h6>RedisToGo</h6>

<p>若是使用雲端的Redis服務-<a href="https://redistogo.com/" target="_blank">RedisToGo</a><br/>
可以直接在 yml 中貼上 instance 的 uri, 如</p>

<p><code>yml config/redis.yml
development:
  :redis: "redis://marsz:xxxxxx@stingfish.redistogo.com:9999"
</code></p>

<h6>redis-rb</h6>

<p>若 redis 有同時兼作 cache 或 db 用, 而且是透過 gem "redis" 進行連線的話<br/>
則可以直接將變數指定</p>

<p><code>yml config/redis.yml
development:
  :db: 0
  :host: "localhost"
  :port: 6379
</code></p>

<p><code>ruby config/initializers/resque.rb
config = YAML.load(File.open("#{Rails.root}/config/redis.yml"))[Rails.env]
Resque.redis = Redis.new( :host =&gt; config[:host], :port =&gt; config[:port], :db =&gt; config[:db] )
</code></p>

<p>一般小弟比較偏好最後一個方法, 因為 redis 太方便了, 只做 background job 有點可惜 XD</p>

<h4>Resque server</h4>

<p>想要有直觀的介面可以看目前 message queue (redis) 上的 job 執行狀況<br/>
resque 也有提供 :)</p>

<p>```ruby config/initializers/resque.rb</p>

<h1>在任何 initial 的檔案中加都可</h1>

<p>require "resque/server"
```</p>

<p><code>ruby config/routes.rb
mount Resque::Server.new, :at =&gt; "/admin/resque"  
</code></p>

<p>啟動 rails server, 連線 <a href="http://localhost:3000/admin/resque" target="_blank">http://localhost:3000/admin/resque</a> 就可以看到啦</p>

<h4>啟動 worker</h4>

<p>丟上 message queue 的工作, 必須透過 worker 逐個要下來執行<br/>
啟動worker...</p>

<p><code>ruby
QUEUE=* bundle exec rake resque:work
</code></p>

<p>上述指令啟動後就會掛著, 而 server 上的啟動可以透過 BACKGROUND=yes 讓 worker 變成背景執行, 之後會再介紹完整參數說明</p>

<p>worker 在 message queue 中有許多 issue, 例如:<br/>
1. 佈署時如何自動的重啟<br/>
2. server 上的 worker 掛了要怎麼自動重啟<br/>
3. worker 能否 multi-thread 執行或針對特定 queue 等等<br/>
將在後續會有相關 solution 的分享</p>

<hr />

<p>以上是有關 resque 的環境設定</p>

<p>redis => resuqe config => worker</p>

<p>下一篇將會介紹在 rails 中的基本使用方式</p>
]]></content>
  </entry>
  
</feed>
