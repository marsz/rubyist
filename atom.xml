<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2012-02-04T13:33:02+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CI server - Bigtuna 系列文]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-30/ci-system-bigtuna-index/"/>
    <updated>2012-01-30T12:06:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-30/ci-system-bigtuna-index</id>
    <content type="html"><![CDATA[<p>呼呼~終於完成了 Bigtuna 的系列文<br/>
這裡索引連結如下</p>

<!-- more -->


<p><a href="http://rubyist.marsz.tw/blog/2012-01-27/ci-system-bigtuna-install/">安裝篇</a> - 基本bigtuna安裝<br/>
<a href="http://rubyist.marsz.tw/blog/2012-01-28/ci-system-bigtuna-setup-project/">專案設定篇</a> - 設定第一個專案<br/>
<a href="http://rubyist.marsz.tw/blog/2012-01-29/ci-system-bigtuna-github-interation-and-email/">進階設定篇</a> - github 整合, email 通知與安全性</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CI server - Bigtuna (進階設定篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-29/ci-system-bigtuna-github-interation-and-email/"/>
    <updated>2012-01-29T12:50:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-29/ci-system-bigtuna-github-interation-and-email</id>
    <content type="html"><![CDATA[<p>上次提到專案在 bigtuna 上的設定<br/>
這次要示範:</p>

<ul>
<li>和 github 整合</li>
<li>將 build 結果寄送 email</li>
<li>安全性設定</li>
</ul>


<!-- more -->


<h4>一般的 github hook</h4>

<p>專案的編輯頁面中, 有一個欄位叫 &#8220;Hook Name&#8221;<br/>
用於做 http post request trigger (其實後來發現get也可以)</p>

<p><img src="https://img.skitch.com/20120204-gtdidekib9pitb4yjmyc8rwhjb.png" alt="" /></p>

<p>舉例來說, bigtuna server 的 domain 假設是 bigtina.marsz.tw 的話
若專案的 hookname 設定為 &#8220;myapp&#8221;<br/>
則 trigger project build 的 url 則是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://bigtuna.marsz.tw/hooks/build/myapp</span></code></pre></td></tr></table></div></figure>


<p>因此只要到 github.com 的專案頁面裡 &#8220;Admin&#8221; -> &#8220;Service Hooks&#8221; -> &#8220;Post-Receive URLs&#8221; 填入該網址即可</p>

<p><img src="https://img.skitch.com/20120204-tc8jni267711r4yi1d7qs3frfw.png" alt="" /></p>

<p>github 會在每次該專案有 push code 上來時, 送 post 到該 url</p>

<p>但常見的情況是, 在 github 上的專案裡有多條分支, 而我們只想針對某條分支有 push 時才進行 trigger</p>

<h4>針對不同分支的 github hook</h4>

<p>參考: <a href="http://bigtuna.appelier.com/configuration.html" target="_blank">http://bigtuna.appelier.com/configuration.html</a> 最下方區塊</p>

<p>到 bigtuna 的專案目錄下, 打開 config/bugtuna.yml 加入</p>

<figure class='code'><figcaption><span>config/bugtuna.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:github_secure</span><span class="p-Indicator">:</span> <span class="s">&quot;abcabc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重起 bigtuna 後, hook 在 github 上的 url 則改為</p>

<figure class='code'><figcaption><span>config/bugtuna.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">http://bigtuna.marsz.tw/hooks/build/github/abcabc</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8220;abcabc&#8221; 是你在 github_secure 填的值<br/>
因為 github 在送 post 到 url 時, 會帶上 push 的專案以及分支名稱<br/>
因此 bigtuna 會依據傳送過來的資訊找到對應的 github uri 和 branch 而啟動 build<br/>
而原先設定的 hook name 在這裡就沒有用到了<br/>
github_secure 的設定則是多一層簡單的安全性措施</p>

<h4>email config</h4>

<p>首先到 bigtuna 專案中設定 email smtp (以下為 gmail smtp 範例)</p>

<figure class='code'><figcaption><span>config/email.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:address</span><span class="p-Indicator">:</span> <span class="s">&quot;smtp.gmail.com&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">587</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:domain</span><span class="p-Indicator">:</span> <span class="s">&#39;your</span><span class="nv"> </span><span class="s">domain&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:user_name</span><span class="p-Indicator">:</span> <span class="s">&#39;your</span><span class="nv"> </span><span class="s">email&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:password</span><span class="p-Indicator">:</span> <span class="s">&#39;ur</span><span class="nv"> </span><span class="s">password&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:authentication</span><span class="p-Indicator">:</span> <span class="s">&#39;plain&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:enable_starttls_auto</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定 email 內容中的 url host</p>

<figure class='code'><figcaption><span>config/bigtuna.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:url_host</span><span class="p-Indicator">:</span> <span class="s">&quot;bigtuna.marsz.tw&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重起 delayed job</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span> <span class="o">.</span><span class="n">/script</span><span class="o">/</span><span class="n">delayed_job</span> <span class="n">stop</span>
</span><span class='line'><span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span> <span class="o">.</span><span class="n">/script</span><span class="o">/</span><span class="n">delayed_job</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 project 中的 hook => mailer 打勾, 然後儲存</p>

<p><img src="https://img.skitch.com/20120204-7tb6yfh51qek718t7ewk4uxkh.png" alt="" /></p>

<p>儲存後會發現原先打勾的地方多了 Configure</p>

<p><img src="https://img.skitch.com/20120204-qjtnx8xgh66rmd95u87yfcnjqt.png" alt="" /></p>

<p>設定 email 時機與對象</p>

<p><img src="https://img.skitch.com/20120204-mcnpxca3ad5r18kb6799m711fk.png" alt="" /></p>

<p>注意: 若要寄給多人, 必須以半型逗號隔開, 不能用換行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">foo</span><span class="vi">@marsz</span><span class="o">.</span><span class="n">tw</span><span class="p">,</span><span class="n">bar</span><span class="vi">@marsz</span><span class="o">.</span><span class="n">tw</span>
</span></code></pre></td></tr></table></div></figure>


<h4>其他安全性設定</h4>

<p>最簡單的方式可以利用 htpasswd<br/>
相關設定請參考 <a href="http://doc.norang.ca/apache-basic-auth.html" target="_blank">htpasswd</a><br/>
設定完成後, github 的 hook url 也必須一同加上帳號密碼</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">user</span><span class="ss">:pssword</span><span class="vi">@bigtuna</span><span class="o">.</span><span class="n">marsz</span><span class="o">.</span><span class="n">tw</span><span class="o">/</span><span class="n">hooks</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">github</span><span class="o">/</span><span class="n">abcabc</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CI server - Bigtuna (專案設定篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-28/ci-system-bigtuna-setup-project/"/>
    <updated>2012-01-28T12:06:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-28/ci-system-bigtuna-setup-project</id>
    <content type="html"><![CDATA[<p>上回提到 Bigtuna 的安裝<br/>
這次示範如何針對一個專案的自動化測試進行設定</p>

<!-- more -->


<p>首先點選右上角的 &#8220;new project&#8221;</p>

<p><img src="https://img.skitch.com/20120204-gxm36jskatwejffbr9emf3h13.png" alt="" /></p>

<p>填好重點資訊, 儲存</p>

<p><img src="https://img.skitch.com/20120204-nkft6nwwm4323bd4grrix5xxdr.png" alt="" /></p>

<p>儲存後仍會停留在同一頁, 拉到下面會看到</p>

<p><img src="https://img.skitch.com/20120204-bh4iib8dj31ac9wsymi4nc44m7.png" alt="" /></p>

<p>到目前為止,bigtuna可自動將專案從 github clone 下來(並且針對設定的分支)<br/>
因此這裡的 configuration 則是在 clone 下來後要做的動作(一般就是跑測試啦)</p>

<p>以下提供小弟的 steps 範例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 用 rvm 切換到專案所使用的 ruby 版本
</span><span class='line'>rvm 1.9.2-p290
</span><span class='line'># 將專案的設定檔 copy 到 clone 下來的專案目錄中
</span><span class='line'>cp /home/marsz/projects/myapp/config/database.yml %build_dir%/config/database.yml
</span><span class='line'># bundle install for test 環境
</span><span class='line'>bundle install RAILS_ENV=test
</span><span class='line'># 將資料庫schema load 到 mysql 中
</span><span class='line'>bundle exec rake db:setup RAILS_ENV=test
</span><span class='line'># 進行 rspec 測試
</span><span class='line'>bundle exec rake spec RAILS_ENV=test</span></code></pre></td></tr></table></div></figure>


<p>設定檔的部份, 因為我們不會將 db user/password 和 email smtp config 等設定 commit 到版本管理中, 因此每個專案在 bigtuna server 上的設定檔都要先手動建立, 以上述範例, 我將 myapp 這個專案的設定檔固定放在 /home/marsz/projects/myspp/config 下</p>

<p>而 %build_dir% 則是 bigtuna 提供的變數, 指向到每次 clone myapp 下來的臨時目錄</p>

<p>此外, 所有指令的環境都是在 test 下, 因此 config 設定也都必須針對 test</p>

<p>&#8220;rake spec&#8221; 設針對 gem Rspec 所跑的自動化測試, 也是測試的重點所在, 前面的步驟都是為了讓 Rspec 能順利跑起來</p>

<p>儲存後回到 &#8220;Home&#8221; 會看到專案列表, 在 bigtuna 中, 顏色的含意如下:<br/>
藍色 - 尚未執行<br/>
黃色 - 執行中
綠色 - 執行完畢 (沒error)<br/>
紅色 - 執行完畢 (有error)</p>

<p><img src="https://img.skitch.com/20120204-rxha851d97n1bi7kjjjhtt5hef.png" alt="" /></p>

<p>點進去 project 後, 右上角有一個 &#8220;BUILD NOW&#8221;, 可進行手動 build</p>

<p><img src="https://img.skitch.com/20120204-mi4mgi3fwswdwg5xchaa3gss9c.png" alt="" /></p>

<p>點了 &#8220;BUILD NOW&#8221; 我們就會看到專案開始進行 build</p>

<p><img src="https://img.skitch.com/20120204-pkhykjqc63thr3rkduqnymbus.png" alt="" /></p>

<p>若 build 結果有問題, 會看到&#8221;紅燈&#8221;, 點進去可以看到該 build 出現的錯誤訊息</p>

<p><img src="https://img.skitch.com/20120204-fi6b2tte3qs7x19fgjyu8h9wpa.png" alt="" /><br/>
<img src="https://img.skitch.com/20120204-ks36ja1g5i4wydaiq8qxjdrke4.png" alt="" /></p>

<p>如此一個專案的 CI 設定算是完成了<br/>
下一篇將介紹如何自動化進行 build, 整合 github 與 email 通知</p>

<h5>補充說明</h5>

<p>若你在 github 上的專案是 private 的話<br/>
必須讓 ci server 能夠 ssh github<br/>
相關設定可參考<a href="http://help.github.com/mac-set-up-git/" target="_blank">官網說明</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CI server - Bigtuna (安裝篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-27/ci-system-bigtuna-install/"/>
    <updated>2012-01-27T11:17:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-27/ci-system-bigtuna-install</id>
    <content type="html"><![CDATA[<p>CI 全名 &#8220;Continuous Interation&#8221;<br/>
用於開發流程中的一種管理技巧<br/>
在每一次的修改後, 能夠自動化進行相關測試, 讓該次修改正確無誤的整合進現行系統中<br/>
相關介紹可參考 ihower 的 <a href="http://ihower.tw/rails3/testing.html" target="_blank">測試 Testing</a><br/>
今天要介紹的則是用於 CI system 的 Bigtuna</p>

<!-- more -->


<h5>參考官方文件</h5>

<p><a href="http://bigtuna.appelier.com/" target="_blank">http://bigtuna.appelier.com/</a></p>

<h5>安裝步驟</h5>

<p>從 github clone</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/appelier/bigtuna.git
</span><span class='line'>cd bigtuna</span></code></pre></td></tr></table></div></figure>


<p>設定 Gemfile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim Gemfile</span></code></pre></td></tr></table></div></figure>


<p>2012.1.27 筆記: 因為 bigtuna 目前採用 rails 3.0.3, 而現行 rails 最新版為 3.1.2, 有許多 gem 因應更新, 而導致 3.0.3 無法使用最新版的 gem, 因此下列設定是針對 3.0.3 而做的版本修正, 若 bigtuna 有更新 rails 版本, 則下列的範例可能會不適用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;mysql2&quot;</span><span class="p">,</span> <span class="s2">&quot;0.2.6&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;delayed_job&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.1.4&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定 config/database.yml 以 mysql 為例, 僅供參考</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">production</span><span class="p">:</span>
</span><span class='line'>  <span class="n">adapter</span><span class="p">:</span> <span class="n">mysql2</span>
</span><span class='line'>  <span class="n">encoding</span><span class="p">:</span> <span class="n">utf8</span>
</span><span class='line'>  <span class="n">reconnect</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">database</span><span class="p">:</span> <span class="n">bigtuna_production</span>
</span><span class='line'>  <span class="n">pool</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>  <span class="n">username</span><span class="p">:</span> <span class="s2">&quot;db_user&quot;</span>
</span><span class='line'>  <span class="n">password</span><span class="p">:</span> <span class="s2">&quot;db_password&quot;</span>
</span><span class='line'>  <span class="n">host</span><span class="p">:</span> <span class="s2">&quot;db_host&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>安裝</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:create</span> <span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:schema:load</span> <span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span>
</span></code></pre></td></tr></table></div></figure>


<p>啟動 delayed job</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span> <span class="o">.</span><span class="n">/script</span><span class="o">/</span><span class="n">delayed_job</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成!!!<br/>
透過 web server 連線後, 看到以下畫面就表示 ok 啦!!<br/>
<img src="https://img.skitch.com/20120204-dayqp1qsffq3cnei1fgcpi3e2d.png" width="700" /><br/>
下一篇將介紹如何設定專案</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake assets:precompile 時出現 stack level too deep 的訊息]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-24/assets-precompile-encounter-stack-level-too-deep/"/>
    <updated>2012-01-24T19:53:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-24/assets-precompile-encounter-stack-level-too-deep</id>
    <content type="html"><![CDATA[<p>上禮拜終於要把服務佈署上去了<br/>
結果在執行 precompile 時遇到錯誤訊息如下:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake aborted!
</span><span class='line'>stack level too deep</span></code></pre></td></tr></table></div></figure>


<p>經過一陣搜索後發現, assets 檔案在同層目錄中, 不能有檔名和目錄名相同的情形<br/>
例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/assets/admin/foo.scss
</span><span class='line'>app/assets/admin.scss</span></code></pre></td></tr></table></div></figure>


<p>主要是因為我的 admin.scss 是用來作 layout file 的
其內容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c"> *= require_tree ./admin</span>
</span><span class='line'><span class="c">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>於是在 precompile 時就發生了悲劇 :p<br/>
後來將檔名更換後就沒問題了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git pull 時請愛用 rebase]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-20/git-pull-with-rebase/"/>
    <updated>2012-01-20T19:44:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-20/git-pull-with-rebase</id>
    <content type="html"><![CDATA[<p>因為
git pull = git fetch + git merge (remote branch merge to local branch)
而 merge 往往會造成線圖上產生無謂的分支 (可參考 <a href="http://ihower.tw/blog/archives/3843" target="_blank">ihower 大大的 rebase 文章</a> )</p>

<!-- more -->


<p>因此除了一般的 feture branch merge 時透過 rebase 外<br/>
我們對內也會要求 pull 時用 rebase</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull --rebase</span></code></pre></td></tr></table></div></figure>


<p>若覺得每次加都很麻煩可以在專案的 .git/config 加上</p>

<figure class='code'><figcaption><span>.git/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">branch</span> <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">remote</span> <span class="o">=</span> <span class="n">origin</span>
</span><span class='line'>  <span class="n">merge</span> <span class="o">=</span> <span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/</span><span class="n">master</span>
</span><span class='line'>  <span class="n">rebase</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1"># 這行</span>
</span></code></pre></td></tr></table></div></figure>


<p>若覺得每個專案都要加很麻煩, 可以在 ~/.gitconfig 加上</p>

<figure class='code'><figcaption><span>~/.gitconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">branch</span><span class="o">]</span>
</span><span class='line'>  <span class="n">autosetuprebase</span> <span class="o">=</span> <span class="n">always</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[透過rebase -i, reset, revert還原某個commit的方法]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-17/git-reset-and-revert-to-rollback-commit/"/>
    <updated>2012-01-17T18:56:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-17/git-reset-and-revert-to-rollback-commit</id>
    <content type="html"><![CDATA[<p>個人比較推薦用 reset 或 rebase -i, 底下將會同時介紹 revert 和 reset 的方法</p>

<p>commit 如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A -&gt; B -&gt; C -&gt; D -&gt; E</span></code></pre></td></tr></table></div></figure>


<p>想要還原到 commit C 之後的狀態 (也就是把 D 和 E rollback)</p>

<!-- more -->


<h5>用 git revert</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git revert E
</span><span class='line'>git revert D</span></code></pre></td></tr></table></div></figure>


<p>結果:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F -&gt; G</span></code></pre></td></tr></table></div></figure>


<p>F 是還原 commit E 修改結果的 commit<br/>
G 是還原 commit D 修改結果的 commit<br/>
因此 revert 只會讓 commit 繼續往前<br/>
優點是可以針對某個 commit 進行還原 並且留下還原記錄</p>

<h5>用 rebase -i</h5>

<p>有關 rebase -i 的詳細使用方式可以參考<a href="http://blog.yorkxin.org/2011/07/29/git-rebase/" target="_blank">這篇</a></p>

<p>假如想要抽掉某個 commit 又不想留下記錄, rebase -i 就很好用了</p>

<p>假如只想要還原 D 變成 A -> B -> C -> E</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase -i C</span></code></pre></td></tr></table></div></figure>


<p>這時候會出現文字編輯</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pick D xxx
</span><span class='line'>pick E ooo</span></code></pre></td></tr></table></div></figure>


<p>把 pick D xxx 整列移除後儲存就可以了
若中間有遇到衝突則必須自行修正後再</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git rebase --continue</span></code></pre></td></tr></table></div></figure>


<h5>用 reset</h5>

<p>用於做整段 commits 的還原<br/>
例如希望還原到 B commit  以後的狀態變成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A -&gt; B  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset B</span></code></pre></td></tr></table></div></figure>


<p>則 git 會將 log 中的 C, D, E 都清除<br/>
但檔案內容沒有任何變動, 因此會看到 C, D, E 修改的檔案處在 unstaged 階段<br/>
若針對部分檔案還原可以用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout [file path]</span></code></pre></td></tr></table></div></figure>


<p>若要全部還原可用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -f</span></code></pre></td></tr></table></div></figure>


<h4>結論</h4>

<p>還沒 push 前, 個人傾向不產生太多 commit<br/>
因次我都會用 rebase -i 進行編修, 順便合併或reword 一些 commit</p>

<p>某個特殊情況, 例如發現某個 commit 裡面包含了不相干的檔案, 欲重新 commit 時<br/>
就會先用 rebase -i 把欲修改的 commit 換到後面(較新), 然後再用 reset 重新 stage + commit</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的 capistrano 完整設定檔說明]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-14/my-capistrano-config-with-multistage-apache-restart-assets-precompile-and-symlink-shared/"/>
    <updated>2012-01-14T16:09:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-14/my-capistrano-config-with-multistage-apache-restart-assets-precompile-and-symlink-shared</id>
    <content type="html"><![CDATA[<p>capistrano 是一套強大的佈署工具, 今天提供小弟的設定檔內容給大家參考</p>

<!-- more -->


<p>rvm 和 bundler</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;./lib&#39;</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;rvm_path&#39;</span><span class="o">]</span><span class="p">))</span> <span class="c1"># Add RVM&#39;s lib directory to the load path.</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rvm/capistrano&quot;</span> <span class="c1"># Load RVM&#39;s capistrano plugin.</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>capistrano color, 讓佈署過程中的訊息內容上色<br/>
Gemfile 必須先加上 gem &#8216;capistrano_colors&#8217;</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;capistrano_colors&#39;</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;`gem install capistrano_colors` to get output more userfriendly.&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>cron 設定, 透過 whenever gem 在 deploy 時, 更新 cron<br/>
Gemfile 要有 gem &#8216;whenever&#8217;</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;whenever/capistrano&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>multistages 設定, 讓 server 端的設定和佈署工作各自獨立管理, 同時資源佈署多個 server</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span>        <span class="sx">%w(staging production)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s2">&quot;staging&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本設定, 包含 git</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:marsz/foo.git&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定 deploy:restart, capistrano 預設是空的, 所以重起 rack 的部份一定要自己寫, 以下範例以 <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#_redeploying_restarting_the_ruby_on_rails_application" target="_blank">passenger + apache</a> 的重啟方式做為參考</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># namespace :deploy 內</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># .....</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;touch </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/tmp/restart.txt&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># .....</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定 symlink_shared, 有一些沒進 version control 的 config 檔案, 要在佈署時, link 過去, 例如 config/database.yml, 以下僅供參考, 實際 link 內容須自己寫</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># namespace :deploy 內</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span>
</span><span class='line'>  <span class="c1"># ....</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:symlink_shared</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:app</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">config_files</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:database</span><span class="p">,</span> <span class="ss">:redis</span><span class="o">]</span>
</span><span class='line'>    <span class="n">symlink_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">config_files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">fname</span><span class="o">|</span>
</span><span class='line'>      <span class="n">from</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/</span><span class="si">#{</span><span class="n">fname</span><span class="si">}</span><span class="s2">.yml&quot;</span>
</span><span class='line'>      <span class="n">to</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/</span><span class="si">#{</span><span class="n">fname</span><span class="si">}</span><span class="s2">.yml&quot;</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;ln -s </span><span class="si">#{</span><span class="n">from</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">to</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ....</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 把 symlink_shared 內容掛進去 deploy 中</span>
</span><span class='line'><span class="n">before</span> <span class="s2">&quot;bundle:install&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:symlink_shared&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>tail log, 要線上 debug 時可用</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:tail_log</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run</span> <span class="s2">&quot;tail -f -n 100 </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/log/</span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2">.log&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 執行 cap production tail_log 即可</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用了 multistage 後, 各個 server 的設定檔必須放在 config/deploy/ 下, 檔名對應 stage 名稱<br/>
例如 config/deploy/production.rb
以下為 stage 設定檔內容</p>

<p>預設 rails env</p>

<figure class='code'><figcaption><span>config/deploy/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="s2">&quot;production&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>github 分支</p>

<figure class='code'><figcaption><span>config/deploy/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ssh 登入相關, 建議多利用 <a href="http://www.eng.cam.ac.uk/help/jpmg/ssh/authorized_keys_howto.html" target="_blank"> SSH 免密碼登入 </a></p>

<figure class='code'><figcaption><span>config/deploy/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;marsz&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:domain</span><span class="p">,</span> <span class="s1">&#39;xxx.com&#39;</span>
</span><span class='line'><span class="n">server</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>佈署的 dir path</p>

<figure class='code'><figcaption><span>config/deploy/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/path/to/app&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>佈署指令</p>

<figure class='code'><figcaption><span>config/deploy/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cap</span> <span class="n">production</span> <span class="n">setup</span> <span class="c1"># 第一次佈署環境建立</span>
</span><span class='line'><span class="n">cap</span> <span class="n">production</span> <span class="n">deploy</span> <span class="c1"># 進行佈署</span>
</span><span class='line'><span class="n">cap</span> <span class="n">production</span> <span class="n">deploy</span><span class="ss">:migrations</span> <span class="c1"># 進行佈署並且跑 migration</span>
</span></code></pre></td></tr></table></div></figure>


<p>若想要在 cap deploy 時也執行 rake assets:precompile<br/>
可以參考 <a href="http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy/" target="_blank">這篇</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Carrierwave 處理檔案上傳 (整合 imagemagick 與 Amazon S3)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-10/carrierwave-guides-with-amazon-s3-and-imagemagick-integration/"/>
    <updated>2012-01-10T23:38:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-10/carrierwave-guides-with-amazon-s3-and-imagemagick-integration</id>
    <content type="html"><![CDATA[<h2>參考來源</h2>

<ul>
<li>Github <a href="https://github.com/jnicklas/carrierwave">https://github.com/jnicklas/carrierwave</a></li>
</ul>


<!-- more -->


<h2>安裝</h2>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>建立 uploader</h2>

<pre><code>rails generate uploader user_avatar
</code></pre>

<p>檔案產生於</p>

<pre><code>app/uploader/user_avatar_uploader.rb
</code></pre>

<h2>簡易範例</h2>

<h4>直接使用</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">uploader</span> <span class="o">=</span> <span class="no">UserAvatarUploader</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">uploader</span><span class="o">.</span><span class="n">store!</span><span class="p">(</span><span class="n">my_file</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>掛在 model 裡使用</h4>

<p>在 model 裡</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:picture</span><span class="p">,</span> <span class="no">UserAvatarUploader</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>新增 migration, 因欄位名稱是 picture, 所以新增一個 picture 的 string 欄位在 users table 裡</p>

<pre><code>rails g migration add_column_picture_to_users
</code></pre>

<figure class='code'><figcaption><span>db/migrate/201101011213_add_column_picture_to_users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:picture</span><span class="p">,</span> <span class="ss">:string</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_form.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">name=</span><span class="s">&quot;picture&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>users_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">picture</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:picture</span><span class="o">]</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">picture</span><span class="o">.</span><span class="n">url</span> <span class="c1"># =&gt; /url/to/file.png</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 _form.html.erb 送出 post 後, 便會按照在 user_avatar_uploader.rb 中的設定進行儲存並且回傳檔案>網址</p>

<h2>uploader 設定</h2>

<h4>儲存</h4>

<p>存成檔案, fog  為將檔案上傳至 cdn 用, 稍後會介紹</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">storage</span> <span class="ss">:file</span>
</span><span class='line'><span class="c1"># storage :fog</span>
</span></code></pre></td></tr></table></div></figure>


<p>可覆寫 store_dir, 以指定儲存路徑, 以 public/ 為基礎</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">store_dir</span>
</span><span class='line'>   <span class="s2">&quot;uploader/user_avatar&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>限定檔案附檔名</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">extension_white_list</span>
</span><span class='line'>  <span class="sx">%w(jpg jpeg gif png)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>指定檔名, 包含附檔名 (model.id 稍後介紹)</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">filename</span>
</span><span class='line'>  <span class="c1"># @filename</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">.png&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>指定預設的 url (e.g.沒有圖的時候)</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">default_url</span>
</span><span class='line'>  <span class="s2">&quot;/images/fallback/&quot;</span> <span class="o">+</span> <span class="o">[</span><span class="n">version_name</span><span class="p">,</span> <span class="s2">&quot;default.png&quot;</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用 Imagemagick 壓縮</h4>

<p>Gemfile</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rmagick&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>uploader 加上</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span> <span class="no">CarrierWave</span><span class="o">::</span><span class="no">RMagick</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 user_avatar_uploader.rb 中可以自行定義要用哪些 Imagemagick 的 method 處理圖片</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 轉換成 png</span>
</span><span class='line'><span class="n">process</span> <span class="ss">:convert</span> <span class="o">=&gt;</span> <span class="s1">&#39;png&#39;</span>
</span><span class='line'><span class="c1"># 按比例縮成指定大小並且補白</span>
</span><span class='line'><span class="n">process</span> <span class="ss">:resize_and_pad</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">160</span><span class="p">,</span> <span class="mi">160</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有可用的 api 見 <a href="https://github.com/jnicklas/carrierwave/blob/master/lib/carrierwave/processing/rmagick.rb">https://github.com/jnicklas/carrierwave/blob/master/lib/carrierwave/processing/rmagick.rb</a></p>

<p>若希望可以另做縮圖, 可以透過 version 同時建立與原圖不同的版本</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 版本名稱為 thumb</span>
</span><span class='line'><span class="n">version</span> <span class="ss">:thumb</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">process</span> <span class="ss">:resize_and_pad</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="o">]</span>
</span><span class='line'>   <span class="n">process</span> <span class="ss">:convert</span> <span class="o">=&gt;</span> <span class="s1">&#39;png&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 版本名稱為 small</span>
</span><span class='line'><span class="n">version</span> <span class="ss">:small</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">process</span> <span class="ss">:resize_and_pad</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">160</span><span class="p">,</span> <span class="mi">160</span><span class="o">]</span>
</span><span class='line'>   <span class="n">process</span> <span class="ss">:convert</span> <span class="o">=&gt;</span> <span class="s1">&#39;png&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>mixin 類似 CarrierWave::RMagick 的 module 可以將更多 RMagick 的 api 應用在 process 中</p>

<p>RMagick api 可參考</p>

<blockquote><ul>
<li>doc: <a href="http://studio.imagemagick.org/RMagick/doc/">http://studio.imagemagick.org/RMagick/doc/</a></li>
<li>source: <a href="https://github.com/rmagick/rmagick/blob/master/lib/RMagick.rb">https://github.com/rmagick/rmagick/blob/master/lib/RMagick.rb</a></li>
</ul>
</blockquote>

<p>取得 version :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">picture</span><span class="o">.</span><span class="n">url</span> <span class="c1"># 原圖 url</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">picture</span><span class="o">.</span><span class="n">thumb</span><span class="o">.</span><span class="n">url</span> <span class="c1"># thumb 版本的 url</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">picture</span><span class="o">.</span><span class="n">small</span><span class="o">.</span><span class="n">url</span> <span class="c1"># small 版本的 url</span>
</span></code></pre></td></tr></table></div></figure>


<h4>上傳至 CDN (以 Amazon S3 為例)</h4>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;fog&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 storage 改為 fog</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">storage</span> <span class="ss">:fog</span>
</span></code></pre></td></tr></table></div></figure>


<p>新增 config/initializer/carrierwave.rb, 內容如下</p>

<figure class='code'><figcaption><span>config/initializer/carrierwave.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarrierWave</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_credentials</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:provider</span>               <span class="o">=&gt;</span> <span class="s1">&#39;AWS&#39;</span><span class="p">,</span>       <span class="c1"># required</span>
</span><span class='line'>    <span class="ss">:aws_access_key_id</span>      <span class="o">=&gt;</span> <span class="s1">&#39;XXXXX&#39;</span><span class="p">,</span>       <span class="c1"># your aws access key id</span>
</span><span class='line'>    <span class="ss">:aws_secret_access_key</span>  <span class="o">=&gt;</span> <span class="s1">&#39;xxxxxxxxxx&#39;</span><span class="p">,</span>       <span class="c1"># your aws secret access key</span>
</span><span class='line'>    <span class="ss">:region</span>                 <span class="o">=&gt;</span> <span class="s1">&#39;ap-southeast-1&#39;</span>  <span class="c1"># your bucket&#39;s region in S3, defaults to &#39;us-east-1&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1"># your S3 bucket name</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span>  <span class="o">=</span> <span class="s1">&#39;my_bucket&#39;</span>
</span><span class='line'>  <span class="c1"># custome your domain on aws S3, defaults to nil</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_host</span>       <span class="o">=</span> <span class="s1">&#39;http://myapp.com&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_public</span>     <span class="o">=</span> <span class="kp">true</span>                                   <span class="c1"># optional, defaults to true</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fog_attributes</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Cache-Control&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;max-age=315576000&#39;</span><span class="p">}</span>  <span class="c1"># optional, defaults to {}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>依上述範例, 要在 S3 開一個 public bucket 名為 &#8220;my_bucket&#8221;, 地區為新加坡</p>

<p>access key 可至 <a href="https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key">https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key</a> 搜尋</p>

<p>bucket 中儲存的路徑可在 user_avatar_uploader.rb 中的 store_dir 定義</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">store_dir</span>
</span><span class='line'>    <span class="s2">&quot;user_avatar/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>uploader 的 methods</h4>

<p>當你將 uploader mount 進 model, 就可以在 uploader 中直接取得該 model 的 instance</p>

<figure class='code'><figcaption><span>app/uploader/user_avatar_uploader.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">filename</span>
</span><span class='line'>   <span class="s2">&quot;</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">.png&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># and mounted_as</span>
</span><span class='line'><span class="k">def</span> <span class="nf">store_dir</span>
</span><span class='line'>   <span class="s2">&quot;uploader/user_avatar/</span><span class="si">#{</span><span class="n">mounted_as</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>uploader 有哪些 medthods 可參考 <a href="https://github.com/jnicklas/carrierwave/tree/master/lib/carrierwave/uploader">https://github.com/jnicklas/carrierwave/tree/master/lib/carrierwave/uploader</a></p>

<h4>處理 local file 或 remote file</h4>

<p>remote file, 參考 <a href="http://stackoverflow.com/questions/5007575/how-to-assign-a-remote-file-to-carrierwave">http://stackoverflow.com/questions/5007575/how-to-assign-a-remote-file-to-carrierwave</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://www.google.com/logo.png&quot;</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">remote_picture_url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>local file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">u</span> <span class="o">=</span>  <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">file_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/public/images/exmaples/foo.png&quot;</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">picture</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Carrierwave 的特色在於細節定義都在 uploader 中, 而 model 只要 mount 以及加上 string 欄位即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise 在登入或登出之後執行回乎]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-10/callbacks-of-devise-after-sign-in-or-sign-out/"/>
    <updated>2012-01-10T23:11:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-10/callbacks-of-devise-after-sign-in-or-sign-out</id>
    <content type="html"><![CDATA[<h4>需求</h4>

<p>想要在登入或登出後執行指定的行為</p>

<!-- more -->


<h4>官方 wiki</h4>

<p><a href="https://github.com/plataformatec/devise/wiki/How-To:-Change-the-redirect-path-after-destroying-a-session-i.e.-signing-out" target="_blank">How To: Change the redirect path after destroying a session i.e. signing out</a></p>

<h4>說明</h4>

<ul>
<li>從 <a href="https://github.com/plataformatec/devise/blob/master/app/controllers/devise/sessions_controller.rb" target="_blank">SessionsController</a> 可得知每次登入後會 redirect 到 after_sign_in_path_for 這個 helper method 所回傳的路徑, 登出則是 after_sign_out_path_for</li>
<li>找到 <a href="https://github.com/plataformatec/devise/blob/master/lib/devise/controllers/helpers.rb#L207" target="_blank">Controller::Helper</a> 定義了  after_sign_in_path_for 和 after_sign_out_path_for</li>
<li>針對這兩個 method 進行覆寫</li>
</ul>


<h4>範例</h4>

<p>注意要用 private, 並且傳進一參數為 model instance</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Overwriting the sign_in redirect path method</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_sign_in_path_for</span><span class="p">(</span><span class="n">resource_or_scope</span><span class="p">)</span>
</span><span class='line'>    <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在partial中取得完整的locals(當Hash用)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-10/get-locals-whole-variables-as-hash-in-partial/"/>
    <updated>2012-01-10T22:50:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-10/get-locals-whole-variables-as-hash-in-partial</id>
    <content type="html"><![CDATA[<p>我們都知道在一般的 view 下,即使在 controller 沒有指定 @foo 的值, view 直接讀取 @foo 也不會噴 Exception. 可是同樣的情況到了 partial 就會噴 Exception</p>

<!-- more -->


<p>render_partial 沒有只指定該變數的key到locals中</p>

<figure class='code'><figcaption><span>app/views/bar/index.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">render_partial</span> <span class="ss">:foo</span><span class="p">,</span> <span class="ss">:locals</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 partial 中直接讀取變數會噴 Exception</p>

<figure class='code'><figcaption><span>app/views/bar/_foo.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="o">!</span><span class="n">foo</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  not assign foo to locals</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>透過 local_assigns 便可將整個 locals 當 hash 用</p>

<figure class='code'><figcaption><span>app/views/bar/_foo.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="o">!</span><span class="n">local_assigns</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  not assign foo to locals</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>haml 版</p>

<figure class='code'><figcaption><span>app/views/bar/_foo.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="k">if</span> <span class="o">!</span><span class="n">local_assigns</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>
</span><span class='line'>  <span class="p">=</span> <span class="s2">&quot;not assign foo to locals&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[輸出除去0的日期格式]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-10/date_format_without_zero/"/>
    <updated>2012-01-10T22:34:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-10/date_format_without_zero</id>
    <content type="html"><![CDATA[<p>ruby 中 Date 或 Datetime 都有 <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/date/rdoc/Date.html#method-i-strftime" taget="_blank">#srtftime</a> 可以用來作自定格式的日期輸出<br/>
若我們希望輸出的日期或時間能夠去除多餘的0, 或者輸入的月份英文可以全部大寫<br/>
以下範例 (Date, Datetime均適用) 擷取自官方文件可作為參考</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="s2">&quot;2012-01-01&quot;</span><span class="o">.</span><span class="n">to_date</span>
</span><span class='line'><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%m/%d&quot;</span><span class="p">)</span> <span class="c1"># 01/01</span>
</span><span class='line'><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%-m/%-d&quot;</span><span class="p">)</span> <span class="c1"># 1/1</span>
</span><span class='line'><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%d %b&quot;</span><span class="p">)</span> <span class="c1"># 1 Jan</span>
</span><span class='line'><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%d %^b&quot;</span><span class="p">)</span> <span class="c1"># 1 JAN</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整細節可以參考<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/date/rdoc/Date.html#method-i-strftime" target="_blank">官方文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 validates_format_of 中使用正規表示法(Regular Expression)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-04/new-post/"/>
    <updated>2012-01-04T17:43:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-04/new-post</id>
    <content type="html"><![CDATA[<p>在 model 的 validates_format_of 中, 有 with/without 可以透過正規表示法(Regular Expression) 來驗證欄位資料的格式是否正確</p>

<p>因此小弟不疑有他, 於是&#8230;</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates_format_of</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/[a-z\-]+/</span>
</span></code></pre></td></tr></table></div></figure>


<p>讓 name 只能存小寫英文以及 dash(-) 值</p>

<p>結果&#8230;
name = &#8220;ab-ac $@#&#8221; # 可存
name = &#8220;@#$%^ &#8221; # 不可存
預期應兩者皆不可存</p>

<p>後來去找了 <a href="http://api.rubyonrails.org/classes/ActiveModel/Validations/FormatValidator.html#method-i-validate_each" target="_blank">api source</a> 發現是透過 string =~ regexp 做驗證</p>

<p>但小弟很不用功, 不知道 =~ 和 !~ 是什麼, 所以又再回去找<a href="http://guides.ruby.tw/ruby/regexp.html" target="_blank">以前學習的資料</a>&#8230;</p>

<p>於是終於明白&#8230;<br />
=~ 用在正規表示法的意思是回傳字串中符合此表示法的位置<br />
而上述的範例中, 因為正規表示法是 /[a-z-]+/<br />
&#8220;ab-ac $@#&#8221; 有 ab-ac 所以匹配<br />
&#8221;@#$%^ &#8221; 沒有任何字串匹配<br />
若希望正規表示法可以比對整個字串, 讓 &#8220;ab-ac $@#&#8221; 也不匹配<br />
則必須善用正規表示法中的<a href="http://www.regular-expressions.info/reference.html" target="_blank">特殊語法</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates_format_of</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/\A[a-z\-]+\Z/</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 \A 是字串開頭 \Z 是字串結尾, 也可以用 ^ 和 $ 分別表示單行開頭與結尾<br />
這樣就可以啦!!!</p>

<h5>參考</h5>

<p>api source: <a href="http://api.rubyonrails.org/classes/ActiveModel/Validations/FormatValidator.html#method-i-validate_each" target="_blank">http://api.rubyonrails.org/classes/ActiveModel/Validations/FormatValidator.html#method-i-validate_each</a></p>

<p>regular expression: <a href="http://www.regular-expressions.info/reference.html" target="_blank">http://www.regular-expressions.info/reference.html</a></p>

<p>ruby: <a href="http://guides.ruby.tw/ruby/regexp.html" target="_blank">http://guides.ruby.tw/ruby/regexp.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在 datetime 的欄位中做日期的搜尋]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-01-04/query-datetime-by-date/"/>
    <updated>2012-01-04T16:54:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-01-04/query-datetime-by-date</id>
    <content type="html"><![CDATA[<p>rails 在儲存 datetime 時,會先去除時區,然後才把 +0 的原始時間存到資料庫中
因此若我們直接下 sql 時, 必須將時區考量進去</p>

<!-- more -->


<p>例如我們想要找欄位 created_at 在 2012-01-01 00:00:00 到 2012-01-03 23:59:59 的資料
以台灣 +8 時區為例, 我們應該找資料庫中 2011-12-31 16:00:00 到 2012-01-03 15:59:59 的資料
以下範例可直接達到所想要的 sql</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">date_start</span> <span class="o">=</span> <span class="s2">&quot;2012-01-01&quot;</span>
</span><span class='line'><span class="n">date_end</span> <span class="o">=</span> <span class="s2">&quot;2012-01-03&quot;</span>
</span><span class='line'><span class="n">range</span> <span class="o">=</span> <span class="n">date_start</span><span class="o">.</span><span class="n">to_date</span><span class="o">.</span><span class="n">beginning_of_day</span><span class="o">.</span><span class="n">.date_end</span><span class="o">.</span><span class="n">to_date</span><span class="o">.</span><span class="n">end_of_day</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="n">range</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://api.rubyonrails.org/classes/Date.html" target="_blank">Date</a>中有 &#8220;beginning_of_day&#8221; 和 &#8220;end_of_day&#8221; 兩個 method 將 Date 轉換為 Datetime 並且使時間落在當天的開始與結束, 透過 ActiveRecord 以 hash 方式作為 query interface, 時區才會自動轉換</p>

<p>同樣在 Date 中還有 beginning_of_month, beginning_of_quarter, beginning_of_week, beginning_of_year 可用</p>

<h6>補充</h6>

<p>有關時區設定可參考 config/application.rb</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[實作 sql 中的數值欄位的遞增(counter increment)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-30/counter-increment-with-custom-value/"/>
    <updated>2011-12-30T17:07:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-30/counter-increment-with-custom-value</id>
    <content type="html"><![CDATA[<p>針對 db 的數值欄位做直接加減以避免 inconsistent update 問題
即想在 sql 中實作出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">users</span> <span class="k">SET</span> <span class="n">score</span> <span class="o">=</span> <span class="n">score</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>rails 在實作 counter cache 中有 api 可用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">increment_counter</span> <span class="s2">&quot;score&quot;</span><span class="p">,</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>對應 sql:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">users</span> <span class="k">SET</span> <span class="n">score</span> <span class="o">=</span> <span class="n">score</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h6>參考</h6>

<p><a href="http://apidock.com/rails/ActiveRecord/CounterCache/increment_counter" target="_blank">http://apidock.com/rails/ActiveRecord/CounterCache/increment_counter</a></p>

<p>當然, 遞減的 method 相對是 decrement_counter</p>

<p>若增減值大於 1 的話, 則可用 update_counters 來實作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">update_counters</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:score</span> <span class="o">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>輸出 sql</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">users</span> <span class="k">SET</span> <span class="n">score</span> <span class="o">=</span> <span class="n">score</span> <span class="o">+</span> <span class="mi">3</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>update_counters 可以一次對多個欄位做增減</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">update_counters</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:score</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">:karma</span> <span class="o">=&gt;</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<h6>參考</h6>

<p><a href="http://apidock.com/rails/ActiveRecord/CounterCache/update_counters" target="_blank">http://apidock.com/rails/ActiveRecord/CounterCache/update_counters</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[databse 資料以 yaml 格式匯入/匯出]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-28/rake-data-dump-and-load-by-yaml/"/>
    <updated>2011-12-28T14:07:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-28/rake-data-dump-and-load-by-yaml</id>
    <content type="html"><![CDATA[<p>在備份資料的過程中常用到的一個 gem
可透過 rake 指令將 db 資料以 yaml 格式進行匯出與匯入</p>

<h2>yaml_db</h2>

<p>github: <a href="https://github.com/ludicast/yaml_db" target="_blank">https://github.com/ludicast/yaml_db</a></p>

<!-- more -->


<h2>安裝 (rails 3)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;yaml_db&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h2>匯出</h2>

<p>把資料匯出到 db/data.yml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:data:dump</span>
</span></code></pre></td></tr></table></div></figure>


<p>匯出不同環境的 database (設定在 config/database.yml, 預設是 development)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:data:dump</span> <span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span>
</span></code></pre></td></tr></table></div></figure>


<p>若要依照一個 table 一個檔案匯出..
(2011/12/28 notice: 目前此方法在 1.9.2 + 3.1.0 的環境下測試會有一些問題)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">dump_dir</span>  <span class="c1"># cd 到欲匯出的 dir 下, 理論上依然是在專案目錄內</span>
</span><span class='line'><span class="n">db</span><span class="ss">:data:dump_dir</span>
</span></code></pre></td></tr></table></div></figure>


<h2>匯入</h2>

<p>把資料從 db/data.yml 匯入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:data:load</span>
</span></code></pre></td></tr></table></div></figure>


<p>匯入不同環境的 database</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:data:load</span> <span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span>
</span></code></pre></td></tr></table></div></figure>


<p>匯入某個目錄下的所有的 yaml (原理同 rake db:data:dump_dir)
(2011/12/28 notice: 此方法在 1.9.2 + 3.1.0 下仍有問題)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">yamls_dir</span> <span class="c1"># cd 到 yaml 檔存放的 dir</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:data:load_dir</span>
</span></code></pre></td></tr></table></div></figure>


<h2>其他</h2>

<ul>
<li>配合 whenever 可做定期備份, 並且將 yml 檔上傳至其他處存放</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Capistrano 中 deploy 時能夠自動執行 rake assets:precompile]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy/"/>
    <updated>2011-12-25T15:14:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-25/assets-precompile-in-capistrano-deploy</id>
    <content type="html"><![CDATA[<p>當我們在專案目錄中執行 &#8220;capify .&#8221; 時, 會產生 Capfile 檔
在該檔案加上</p>

<figure class='code'><figcaption><span>Capfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;deploy/assets&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>capistrano 會將 current/public/assets 連結到 shared/assets 中
若 shared 下無此目錄, 記得要 mkdir 一下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[巢狀 (nested) to_json / to_xml 應用]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-23/nested-to_json-and-to_xml/"/>
    <updated>2011-12-23T21:40:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-23/nested-to_json-and-to_xml</id>
    <content type="html"><![CDATA[<p>在做 api 輸出(json,xml等)時, 想要將 model 中的某些 attribute 或關連的其他 model 一起輸出, rails 中的 to_json 或 to_xml 更可以針對 method 做輸出!</p>

<!-- more -->


<h2>參考</h2>

<ul>
<li>ApiDock</li>
</ul>


<p><a href="http://apidock.com/rails/ActiveRecord/Serialization/to_json" target="_blank">http://apidock.com/rails/ActiveRecord/Serialization/to_json</a></p>

<ul>
<li>Stackoverflow</li>
</ul>


<p><a href="http://stackoverflow.com/questions/4443218/ror-nested-include-to-include-sub-resources-in-to-xml-to-json" target="_blank">http://stackoverflow.com/questions/4443218/ror-nested-include-to-include-sub-resources-in-to-xml-to-json</a></p>

<h2>說明</h2>

<ul>
<li>參數為 include</li>
<li>可以搭配 only, methods 做部分 attribute 或 method 的輸出</li>
</ul>


<h2>範例</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="ss">:include</span> <span class="o">=&gt;</span>
</span><span class='line'>               <span class="p">{</span> <span class="ss">:emails</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:address</span> <span class="p">},</span>
</span><span class='line'>               <span class="ss">:friends</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:name</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">:include</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:emails</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="ss">:address</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>               <span class="p">}</span>
</span><span class='line'>             <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encoding::CompatibilityError: incompatible character encodings: ASCII-8BIT and UTF-8]]></title>
    <link href="http://rubyist.marsz.tw/blog/2011-12-23/encoding-error-utf8-and-ascii-8bit/"/>
    <updated>2011-12-23T21:01:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2011-12-23/encoding-error-utf8-and-ascii-8bit</id>
    <content type="html"><![CDATA[<p>在進行 regular expression 或其他字串處理時, 出現以下錯誤訊息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Encoding::CompatibilityError: incompatible character encodings: ASCII-8BIT and UTF-8</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h6>來源</h6>

<p><a href="https://rails.lighthouseapp.com/projects/8994/tickets/4336-ruby19-submitted-string-form-parameters-with-non-ascii-characters-cause-encoding-errors" target="_blank">https://rails.lighthouseapp.com/projects/8994/tickets/4336-ruby19-submitted-string-form-parameters-with-non-ascii-characters-cause-encoding-errors</a></p>

<h6>解決</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mystring</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>總之就是把所有的字串都 force_encoding :p</p>
]]></content>
  </entry>
  
</feed>
