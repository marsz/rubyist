<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2013-06-06T02:01:04+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[讓 S3 允許 cross-domain 存取]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-06-06/aws-s3-allow-cross-origin-access/"/>
    <updated>2013-06-06T01:48:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-06-06/aws-s3-allow-cross-origin-access</id>
    <content type="html"><![CDATA[<p>檔案放上 <code>S3</code> 後，可能會需要透過 <code>cross-domain</code> 存取 (例如 web font)<br/>
這時可以透過 <code>S3</code> bucket 的 <code>CORS</code> 設定達成</p>

<!-- more -->


<p><img src="http://i.imgur.com/7vjeF3g.png" alt="S3 bucket CORS" /></p>

<p>開啟後如同以下內容設定即可開放 <code>GET</code> 的跨網域存取</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;CORSRule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/CORSRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/CORSConfiguration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果要開放其他 HTTP method&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;CORSRule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedMethod&gt;</span>POST<span class="nt">&lt;/AllowedMethod&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedMethod&gt;</span>PUT<span class="nt">&lt;/AllowedMethod&gt;</span>
</span><span class='line'>        <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/CORSRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/CORSConfiguration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>參考資料</h1>

<p><a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html" target="_blank">http://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝與設定 unicorn 實現佈署時 zero down time]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-06-03/unicorn-rails-and-capistrano/"/>
    <updated>2013-06-03T11:27:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-06-03/unicorn-rails-and-capistrano</id>
    <content type="html"><![CDATA[<p>本文章的 code 可參考公開的 pull request<br/>
<a href="https://github.com/5fpro/cupid/pull/11/files" target="_blank">https://github.com/5fpro/cupid/pull/11/files</a><br/>
這是基礎到不行的設定方式，考量到 server 效能在設定上的 best practice 將會在日後持續 update 本文。</p>

<!-- more -->


<h3>安裝 gem</h3>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-unicorn&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>本文所採用的 gem 版本</p>

<figure class='code'><figcaption><span>Gemfile.lock</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">capistrano</span><span class="o">-</span><span class="n">unicorn</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="n">unicorn</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>佈署設定</h3>

<p>這裡的 <code>production.rb</code> 是針對 <code>rails_env=production</code>，而非 capistrano 中 multistage 的 production</p>

<figure class='code'><figcaption><span>config/unicorn/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker_processes</span> <span class="mi">1</span>
</span><span class='line'><span class="n">preload_app</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">listen</span> <span class="s1">&#39;/tmp/unicorn.cupid.sock&#39;</span> <span class="c1"># sock 檔名可依照 app 需求設定</span>
</span><span class='line'>
</span><span class='line'><span class="n">stderr_path</span> <span class="s1">&#39;log/unicorn.error.log&#39;</span>
</span><span class='line'><span class="n">stdout_path</span> <span class="s1">&#39;log/unicorn.log&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pid</span> <span class="s2">&quot;tmp/pids/unicorn.pid&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">rails_env</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># before/after fork 可自行擴充</span>
</span><span class='line'>
</span><span class='line'><span class="n">before_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">after_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(也可以把上述檔案放在 <code>config/unicorn.rb</code>)</p>

<h3>server 上的 nginx.conf</h3>

<figure class='code'><figcaption><span>nginx.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">upstream</span> <span class="n">my_app</span> <span class="p">{</span>  <span class="c1"># upstream 名稱可自定</span>
</span><span class='line'>  <span class="n">server</span> <span class="n">unix</span><span class="ss">:/</span><span class="n">tmp</span><span class="o">/</span><span class="n">unicorn</span><span class="o">.</span><span class="n">cupid</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span> <span class="c1"># 這裡要和 config/unicorn/production.rb 中 listen 的設定對應</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="n">server_name</span> <span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># passenger_enabled on; # 原本要設定 passenger 的記得要拿掉</span>
</span><span class='line'>  <span class="c1"># .......</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$http_host</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_pass</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">my_app</span><span class="p">;</span> <span class="c1"># upstream 名稱</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># .......</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>把 unicorn 重啟的 hook 掛到 deploy.rb 中</h3>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano-unicorn&#39;</span>
</span><span class='line'><span class="n">after</span> <span class="s1">&#39;deploy:restart&#39;</span><span class="p">,</span> <span class="s1">&#39;unicorn:restart&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>done!</p>

<h3>如何在本機測試 unicorn</h3>

<p><code>bundle exec unicorn</code></p>

<p>Go to http://localhost:8080</p>

<h3>參考資料</h3>

<ul>
<li>更多 unicorn 可以在 cap 指令中的應用: <a href="https://github.com/sosedoff/capistrano-unicorn/blob/master/lib/capistrano-unicorn/capistrano_integration.rb" target="_blank">https://github.com/sosedoff/capistrano-unicorn/blob/master/lib/capistrano-unicorn/capistrano_integration.rb</a></li>
<li>unicorn 設定檔說明: <a href="https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb" target="_blank">https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb</a></li>
<li>Github Blog 上說明他們自己的 unicorn 如何設定: <a href="https://github.com/blog/517-unicorn" target="_blank">https://github.com/blog/517-unicorn</a></li>
<li>其他 unicorn 設定相關教學:

<ul>
<li><a href="http://tech.gadii.net/blog/2013/03/07/rails-deploy-ji-chu-jiao-xue/" target="_blank">http://tech.gadii.net/blog/2013/03/07/rails-deploy-ji-chu-jiao-xue/</a></li>
<li><a href="https://devcenter.heroku.com/articles/rails-unicorn" target="_blank">https://devcenter.heroku.com/articles/rails-unicorn</a></li>
<li><a href="http://ruby-china.org/topics/471" target="_blank">http://ruby-china.org/topics/471</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 Swagger 產生互動式 API 文件]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-05-04/swagger-api-doc-rails/"/>
    <updated>2013-05-04T20:48:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-05-04/swagger-api-doc-rails</id>
    <content type="html"><![CDATA[<p><a href="https://developers.helloreverb.com/swagger/" target="_blank">Swagger</a> 是一套由 HTML + Javascript 撰寫的 REST API 文件的框架。 (core 是以 scala 寫的)</p>

<!-- more -->


<p>從 <a href="http://petstore.swagger.wordnik.com/" target="_blank">Demo 頁</a> 可了解到 Swagger 不僅僅提供 API 的規格資訊，也提供互動介面讓開發者可以直接輸入參數進行測試。<br/>
<img src="http://i.imgur.com/a5vAGKz.png" /></p>

<p>亦支援 GET &amp; POST 以外的 http method (PUT、DELETE)。</p>

<p><img src="http://i.imgur.com/L3c5TTt.png" /></p>

<p>Demo 頁面的 source code 在<a href="https://github.com/wordnik/swagger-ui" target="_blank"> Github </a>上。也可以參考 wordnik 的<a href="http://developer.wordnik.com/docs.html" target="_blank"> 官方正式 API 文件 </a>。</p>

<p>API 文件內容完全是透過 ajax 取得 JSON data 產生的，因此必須提供 server 吐出符合 Swagger 文件中所定義的 JSON 格式，讓前端網頁能夠生成 API 文件的介面。</p>

<p><img src="http://i.imgur.com/iC3LFIL.png" border="1" style="border-color:#000000" /></p>

<p>在 Swagger 文件中所定義的物件有:</p>

<ol>
<li><code>doc</code>: 代表整份 API 文件 (<a href="https://github.com/wordnik/swagger-core/wiki/Resource-Listing" target="_blank">規格文件</a>)</li>
<li><code>resource</code>: API 文件下的分類目錄 (<a href="https://github.com/wordnik/swagger-core/wiki/API-Declaration" target="_blank">規格文件</a>)</li>
<li><code>api</code>: 每一條 REST Request (<a href="https://github.com/wordnik/swagger-core/wiki/API-Declaration" target="_blank">規格文件</a>)</li>
<li><code>parameter</code>: <code>api</code> 下的每個參數 (<a href="https://github.com/wordnik/swagger-core/wiki/Parameters" target="_blank">規格文件</a>)</li>
<li><code>model</code>: 自訂的 return data type (<a href="https://github.com/wordnik/swagger-core/wiki/Datatypes" target="_blank">規格文件</a>)</li>
</ol>


<p>鑿於定義相當繁多且複雜，Swagger 本身有提供<a href="https://github.com/wordnik/swagger-codegen/tree/master/samples/server-generator" target="_blank">部分語言的 API 文件生成後台</a> (Ruby 開發者可選擇 sinatra)，讓開發者能夠花最少的時間開始使用 Swagger。</p>

<p>但筆者仍覺得 Swagger 使開發者進入狀況的門檻仍高，因此花了點時間以 rails app 開發 Swagger json data 的管理後台生成 swagger API 文件，提供後台的 web 操作介面來產生 Swagger 的 API 文件。</p>

<p>Github: <a href="https://github.com/marsz/swagger-rails" target="_blank">https://github.com/marsz/swagger-rails</a><br/>
Demo: <a href="http://swagger.5fpro.com/" target="_blank">http://swagger.5fpro.com/</a></p>

<p>功能特色:</p>

<ol>
<li>FB 登入/註冊，單一帳號下可建立多筆 <code>doc</code></li>
<li>自訂 API 實際測試的目標網域</li>
<li>可設定獨立網域 (FQDN)，若沒有設定系統也會自動產生一組給你用</li>
<li><code>resource</code> 可排序</li>
</ol>


<p>讓我們 step by step 來建立 API 文件吧。<br/>
範例是小弟在早期自己寫的 API，用來提供台灣縣市鄉鎮的資料庫。</p>

<ol>
<li>建立 <code>doc</code>，內容如下:<br/>
<img src="http://i.imgur.com/dM1Ori8.png" /></li>
<li>建立 <code>doc</code> 後，系統會提供你 API 實測時的網址格式<br/>
<img src="http://i.imgur.com/RNsHmMx.png" /></li>
<li>建立 <code>resource</code> (圖略)， <code>resource</code> 可以用來當做是管理許多 API 的目錄</li>
<li>建立 <code>api</code>: 選擇 http method 和 path<br/>
<img src="http://i.imgur.com/x9wfS0U.png" /><br/>
若 API 參數在 path 中，可用大括號包起來，必且給予參數名稱</li>
<li>填寫 return data type，若為某個 model 的 array 可以以圖內的格式表示<br/>
<img src="http://i.imgur.com/5TyRs6L.png" /></li>
<li>api path 內有參數的話，底下的 parameters 也必須增加 <code>parameter type</code> 為 <code>path</code> 的參數 (如圖)，名稱和大括號內對應<br/>
<img src="http://i.imgur.com/98IsmNe.png" /></li>
<li>有關 <code>model</code> 的定義，可在 doc 頁找到，這裡的定義與否不會影響文件的正常顯示，有定義的話文件也會顯示出來，內容也就更完整囉<br/>
<img src="http://i.imgur.com/F1vZR2E.png" /></li>
<li>點擊 doc information 內的連結即可看到結果(<a href="http://gaia-doc.5fpro.tw/#!/3/api_6_get_2" target="_blank">http://gaia-doc.5fpro.tw/#!/3/api_6_get_2</a>)<br/>
<img src="http://i.imgur.com/8x0rLQX.png" /></li>
<li>當然，API 實測要有資料，必須實作 <a href="http://gaia.5fpro.tw/cities/1.json" target="_blank">http://gaia.5fpro.tw/cities/1.json</a> 回傳的 JSON data 才行。</li>
</ol>


<p>目前的 swagger-rails 仍有許多待增加的功能:</p>

<ol>
<li>多人協作</li>
<li>修改記錄</li>
<li>自訂前端 CSS</li>
<li>後台介面優化</li>
<li>100% 實作 Swagger 所有支援的格式</li>
</ol>


<p>最後附上筆者目前正式對外開放的 API 文件給各位參考:</p>

<ol>
<li><a href="http://api-doc.thewall.tw/" target="_blank">THEWALL 這牆音樂</a></li>
<li><a href="http://gaia-doc.5fpro.tw/" target="_blank">台灣縣市鄉鎮資料庫</a>, 含郵遞區號</li>
<li><a href="http://medusa-doc.5fpro.com/" target="_blank">爬蟲系統</a> (暫不開放申請)</li>
</ol>


<p>筆者目前透過自己蓋的 <code>swagger-rails</code> 用於內部溝通居多，不論在 mobile app 開發或跨語言的資料傳遞，透過 Swagger 介面的 API 實測功能，使用者很快就可以了解每條 API 的取用方式與資料格式，大大減少了溝通的成本。</p>

<p>Swagger 參考資料:</p>

<ol>
<li><a href="https://github.com/wordnik/swagger-core/wiki" target="_blank">Swagger Specification</a></li>
<li><a href="https://github.com/wordnik/swagger-core/wiki/Downloads" target="_blank">Swagger Downloads</a></li>
<li><a href="https://developers.helloreverb.com/swagger/" target="_blank">Official Site</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server 端允許 ajax cross domain 存取]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-04-28/server-side-accept-cross-domain-ajax-request/"/>
    <updated>2013-04-28T13:07:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-04-28/server-side-accept-cross-domain-ajax-request</id>
    <content type="html"><![CDATA[<p>在 controller 中加入以下即可允許來自 cross domain 的 ajax request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Access-Control-Allow-Origin&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 在 Passenger 重起後出現 'reconnect to Redis after forking' 的錯誤訊息]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-04-13/redis-reconnect-after-fork/"/>
    <updated>2013-04-13T22:02:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-04-13/redis-reconnect-after-fork</id>
    <content type="html"><![CDATA[<p>自 <code>redis</code> 升級，每次透過 <code>capistrano</code> 佈署後，連線 server 都會噴出 &#8220;Tried to use a connection from a child process without reconnecting. You need to reconnect to Redis after forking.&#8221; 的錯誤訊息。</p>

<!-- more -->


<p>原因在於 <code>redis</code> 的 <a href="https://github.com/redis/redis-rb" target="_blank">client gem</a>。</p>

<p>因此必須在每次 passenger restart 後，也讓 redis client 進行重啓。可參考以下，必須於 initializer 或 application.rb 中執行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PhusionPassenger</span><span class="p">)</span>
</span><span class='line'>  <span class="no">PhusionPassenger</span><span class="o">.</span><span class="n">on_event</span><span class="p">(</span><span class="ss">:starting_worker_process</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">forked</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">forked</span>
</span><span class='line'>      <span class="no">Redis</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="mi">6379</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了 <code>redis</code> 之外，其他透過 redis 應用的 gem 也都會有類似的問題，例如 <code>resque</code>、<code>redis-store</code>、<code>redis-object</code>、<code>sidekiq</code> 等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新版的 git (1.7 以上) 在 merge 時預設不開編輯器的設定]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-04-09/git-merge-no-edit-default/"/>
    <updated>2013-04-09T02:02:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-04-09/git-merge-no-edit-default</id>
    <content type="html"><![CDATA[<p>打開你的 shell rc 例如 <code>~/.zshrc</code> 或 <code>~/bashrc</code><br/>
插入以下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export GIT_MERGE_AUTOEDIT=no</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>之後 merge &#8211;no-ff 的指令就都會預設用 auto message 做 commit 啦<br/>
如果想要強制編輯時，可以用 &#8211;edit 參數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git merge branch_name --no-ff --edit</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修正 IE 無法透過 cross-domain AJAX 取得 JSON 物件]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-03-29/ie-jquery-ajax-jsonp-n-cross-domain-n-cache-control-public/"/>
    <updated>2013-03-29T22:52:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-03-29/ie-jquery-ajax-jsonp-n-cross-domain-n-cache-control-public</id>
    <content type="html"><![CDATA[<p>controller 中的 <code>respond_to</code> 可用來 return 指定的 format 供 JS 取用 API 資料<br/>
但很不幸的 IE 9 以下在透過 jquery 中的 getJSON 無法取得 return 的 json 物件。</p>

<!-- more -->


<p>server 端的 action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Access-Control-Allow-Origin&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="n">expires_in</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:public</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="vi">@data</span> <span class="o">=</span> <span class="no">SomeModel</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">json</span><span class="p">{</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@data</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">xml</span><span class="p">{</span> <span class="n">render</span> <span class="ss">:xml</span> <span class="o">=&gt;</span> <span class="vi">@data</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>client 端的 javascript</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;http://apihost.com/products.json&quot;</span><span class="p">,</span><span class="s2">&quot;jsonp&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">products</span><span class="p">){</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果:  IE9 以下不 work，其他瀏覽器沒問題(生氣)</p>

<p>解決此問題的方法必須例用 jquery jsonp callback 的方式達到目的即可<br/>
因此 server 端的 response 的 content-type 必須是 javascript (見 <a href="http://d.pr/i/66d0" target="_blank">此圖</a>)</p>

<p>server 端寫法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Access-Control-Allow-Origin&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="n">expires_in</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:public</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="vi">@data</span> <span class="o">=</span> <span class="no">SomeModel</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">json</span><span class="p">{</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@data</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">xml</span><span class="p">{</span> <span class="n">render</span> <span class="ss">:xml</span> <span class="o">=&gt;</span> <span class="vi">@data</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">js</span><span class="p">{</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@data</span><span class="p">,</span> <span class="ss">:callback</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:callback</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>client 端的 javascript</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;http://apihost.com/products.js?callback=?&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>搞定!!!</p>

<p>server 端其他寫法的補充:</p>

<p>開啟 cross-domain 的 ajax request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Access-Control-Allow-Origin&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>開啟 cache-control 為 public:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expires_in</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:public</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我寫的 gem - venus 簡介]]></title>
    <link href="http://rubyist.marsz.tw/blog/2013-03-13/rubygems-venus/"/>
    <updated>2013-03-13T13:12:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2013-03-13/rubygems-venus</id>
    <content type="html"><![CDATA[<p>因受到了<a href="http://railsapps.github.com/rails-composer/" target="_blank"> rails composor </a> 的影響，決定也來寫一個客製化的 rails generator。<br/>
但後來又覺得只能在開新專案用的話，使用頻率也不太高&#8230;</p>

<!-- more -->


<p>鑿於在許多專案中，總是為了要安裝某些 gem 而必須再回去翻寫過專案中的 code 或上官網找範例 code 做 copy/paste + 修改，於是我決定寫一個 generator 來設定這些常用的 gem，僅需要如同 rails composor 一樣回答一些問題就可以把所有的設定弄到好。</p>

<p>因此 venus 因應而生</p>

<p>安裝: <a href="https://rubygems.org/gems/venus" target="_blank">https://rubygems.org/gems/venus</a>  <br/>
源碼: <a href="https://github.com/marsz/venus" target="_blank">https://github.com/marsz/venus</a></p>

<p>以下逐一介紹各個指令</p>

<p><code>rails generate venus:init</code></p>

<p>專案初始化設定，例如移除 public/index.html，安裝必要的 gem 例如分頁用的 <code>kminari</code>，剛 new 好的 rails 專案適合執行此指令。</p>

<p><code>rails generate venus:mysql</code></p>

<p>設定 mysql，包含從 <code>Gemfile</code> 安裝 mysql2，設定 <code>database.yml</code> 以及 <code>database.yml.example</code>，最後再將 <code>config/database.yml</code> 加到 .gitignore 中。</p>

<p><code>rails generate venus:paginate</code></p>

<p>單獨安裝分頁用的 gem - <code>kminari</code>，也會問你要不要產生客製化的 view 出來。</p>

<p><code>rails generate venus:simple_form</code></p>

<p>view 使用 form 必備的 <a href="https://github.com/plataformatec/simple_form" target="_blank">simple_form</a>，預設會產生 bootstrap wrapper 的設定檔。也會詢問是否要順便安裝 <a href="https://github.com/ryanb/nested_form" target="_blank">nested_form</a>，安裝 nested_form 需要在 js 中 require gem 裡面包好的 JS，所以也會詢問 require code 和 example code 要放的檔案路徑。</p>

<p><code>rails generate venus:settingslogic</code></p>

<p>gem - <a href="https://github.com/binarylogic/settingslogic" target="_blank"><code>settingslogic</code></a>。可以將多個 yml 的設定檔放在此 gem 所讀取的 yaml 下，使其能夠容易管理。此 generator 同時也會產生 .example 檔以及加入 .yml 到 .gitignore 下。</p>

<p><code>rails generate venus:rspec</code></p>

<p>安裝並且設定 <code>rspec</code>，並且移除 test 目錄，在 <code>config/application.rb</code> 中設定 generate controller 時，不自動產生 assets files 和 helper。</p>

<p><code>rails generate venus:devise</code></p>

<p>安裝並且設定 scope 為 user 的 devise gem。</p>

<p><code>rails generate venus:omniauth</code></p>

<p>會先檢查是否有安裝 settingslogic 以及 devise，然後再安裝 omniauth，過程中會詢問 facebook / twitter / github 登入的安裝與否。</p>

<p><code>rails generate venus:redis</code></p>

<p>安裝並且設定 redis client gem <a href="https://github.com/redis/redis-rb" target="_blank">redis-rb</a> 。</p>

<p><code>rails generate venus:aws</code></p>

<p>安裝並且設定 Amazon <a href="https://github.com/aws/aws-sdk-ruby" target="_blank">官方的 ruby client </a>。過程中會先檢查 settingslogic，並且將 api key 和 secret 存到其中。最後也會詢問否需要順便安裝 Amazon Simple Email Service (SES)，用來發 email。</p>

<p><code>rails generate venus:carrierwave</code></p>

<p>安裝並且設定 carrierwave，其中包含 rmagick 進行縮圖，以及 fog 將檔案上傳至S3。過程中會安裝 aws-sdk，所以也會順便詢問 SES 的設定 :p。最後會產生一個 <code>venus_uploader.rb</code> 做為範例。</p>

<p><code>rails generate venus:jqueryui</code></p>

<p>安裝 jquery ui 的 gem。其中會詢問是否要安裝 datepicker，包含產生 trigger 用的 js 範例 code。gem 的 參考連結 => <a href="https://github.com/joliss/jquery-ui-rails" target="_blank">https://github.com/joliss/jquery-ui-rails</a>。 (若有要安裝 datepicker 的話，也會詢問語系)</p>

<p><code>rails generate venus:chosen</code></p>

<p>安裝 <a href="https://github.com/tsechingho/chosen-rails" target="_blank">chosen-rails</a> 並且提供 trigger chosen 的範例 js code。</p>

<p><code>rails generate venus:bootstrap</code></p>

<p>安裝 <code>twitter bootstrap</code> ，包含 gem 設定、 assets require，最後產生範例 layout 檔於 <code>app/views/layouts/</code> 下。內建提供 <a href="http://wrapbootstrap.com/preview/WB0F35928" target="_blank">unicorn admin</a> 的版型套用，蓋後台超爽 XD</p>

<h1>TODOs</h1>

<p>對於此 gem 未來將會逐漸加入我自己寫的 best practice :p 也望各位大大能不吝指教或回報 bug :D</p>

<ul>
<li>sidekiq : 強大的 background job gem</li>
<li>unicorn : 配合 capistrano 讓佈署時可以 zero down time</li>
<li><a href="https://github.com/airblade/paper_trail" target="_blank">paper_trail</a> : 對 model 進行版本控制的 gem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自動化產生 ER 圖的 rubygem]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-11-13/auto-generate-erd-graph/"/>
    <updated>2012-11-13T05:39:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-11-13/auto-generate-erd-graph</id>
    <content type="html"><![CDATA[<p>參考連結:<br/>
1. 官網 : <a href="http://rails-erd.rubyforge.org/" target="_blank">http://rails-erd.rubyforge.org/</a><br/>
2. 相關教學 : <a href="http://zool.me/rails/2010/12/29/Rails-generate-entity-relationship-diagram-projects/" target="_blank">http://zool.me/rails/2010/12/29/Rails-generate-entity-relationship-diagram-projects/</a></p>

<!-- more -->


<h3>系統需求</h3>

<p>MAC OS 請先安裝 <code>brew</code></p>

<h3>安裝 Graphviz</h3>

<h5>MAC OS</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install cairo pango graphviz</span></code></pre></td></tr></table></div></figure>


<p>若無法順利安裝可至 <a href="http://www.graphviz.org/Download_macos.php" target="_blank">graphviz for MAC OS download</a> 頁面下載對應的系統，直接打開 finder 以 window 介面安裝</p>

<h5>Ubuntu</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo aptitude install graphviz</span></code></pre></td></tr></table></div></figure>


<h3>Rails 設定</h3>

<h5>Gemfile</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rails-erd&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h3>生成 ERD</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">erd</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的 ERD 會在專案目錄下的 erd.pdf</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubygems 處理 Amazon Web Service (AWS) EC2]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-11-09/rubygeems-for-aws-ec2/"/>
    <updated>2012-11-09T13:55:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-11-09/rubygeems-for-aws-ec2</id>
    <content type="html"><![CDATA[<p>參考: <a href="https://github.com/grempe/amazon-ec2" target="_blank">https://github.com/grempe/amazon-ec2</a></p>

<!-- more -->


<h3>安裝設定</h3>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;amazon-ec2&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s2">&quot;AWS&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/aws.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span> <span class="nl">&amp;default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:access_key_id</span><span class="p-Indicator">:</span> <span class="s">&quot;abcdabcd&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:secret_access_key</span><span class="p-Indicator">:</span> <span class="s">&quot;abcdabcd&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:host</span><span class="p-Indicator">:</span> <span class="s">&quot;ap-southeast-1.ec2.amazonaws.com&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*default</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>access_key_id</code> 和 <code>secret_access_key</code> 可至 <a href="https://portal.aws.amazon.com/gp/aws/developer/account/index.html?action=access-key" target="_blank">AWS Security Credentials</a> 查看<br/>
<code>host</code> 則是目標 region 所對應的 endpoint，對應表可至 <a href="https://github.com/garnaat/missingcloud/blob/master/aws.json#L372" target="_blank">https://github.com/garnaat/missingcloud/blob/master/aws.json#L372</a> 查看</p>

<p>養成好習慣, 請勿將 yaml 檔 commit 進去&#8230;</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">/</span><span class="n">aws</span><span class="o">.</span><span class="n">yml</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/aws.yml.example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># to see region and host mapping :</span>
</span><span class='line'><span class="c1">#   https://github.com/garnaat/missingcloud/blob/master/aws.json#L372</span>
</span><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span> <span class="nl">&amp;default</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:access_key_id</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:secret_access_key</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:host</span><span class="p-Indicator">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&lt;&lt;</span><span class="p-Indicator">:</span> <span class="nv">*default</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用方法</h3>

<ul>
<li>初始化</li>
</ul>


<figure class='code'><figcaption><span>example.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">::</span><span class="nb">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/aws.yml&quot;</span><span class="p">))</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">]</span>
</span><span class='line'><span class="n">ec2</span> <span class="o">=</span> <span class="no">AWS</span><span class="o">::</span><span class="no">EC2</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[</span><span class="ss">:access_key_id</span><span class="o">]</span><span class="p">,</span> <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[</span><span class="ss">:secret_access_key</span><span class="o">]</span><span class="p">,</span> <span class="ss">:server</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[</span><span class="ss">:host</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>取得 instance 列表</li>
</ul>


<figure class='code'><figcaption><span>exmaple.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">instances</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">describe_instances</span>
</span><span class='line'><span class="c1"># instances[&quot;reservationSet&quot;][&quot;item&quot;] 才會取得 array</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>取得所有 snapshots (自己 create 的)</li>
</ul>


<figure class='code'><figcaption><span>exmaple.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">snapshots</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">describe_snapshots</span><span class="p">(</span><span class="ss">:owner</span> <span class="o">=&gt;</span> <span class="s2">&quot;self&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># snapshots[&quot;snapshotSet&quot;][&quot;item&quot;] 才會取得 array</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>取得所有 volumes</li>
</ul>


<figure class='code'><figcaption><span>exmaple.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">volumes</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">describe_volumes</span>
</span><span class='line'><span class="c1"># volumes[&quot;volumeSet&quot;][&quot;item&quot;] 才會取得 array</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>建立 snapshot, 必須先取得 volume id</li>
</ul>


<figure class='code'><figcaption><span>example.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">volume_id</span> <span class="o">=</span> <span class="n">volumes</span><span class="o">[</span><span class="s2">&quot;volumeSet&quot;</span><span class="o">][</span><span class="s2">&quot;item&quot;</span><span class="o">].</span><span class="n">first</span><span class="o">[</span><span class="s2">&quot;volumeId&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">ec2</span><span class="o">.</span><span class="n">create_snapshot</span><span class="p">(</span><span class="ss">:volume_id</span> <span class="o">=&gt;</span> <span class="n">volume_id</span><span class="p">,</span> <span class="ss">:description</span> <span class="o">=&gt;</span> <span class="s2">&quot;my snapshot&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>建立某個 instance 的 snapshot, 有 instance id 的情況下</li>
</ul>


<figure class='code'><figcaption><span>example.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">instance_id</span> <span class="o">=</span> <span class="s2">&quot;i-abcd&quot;</span>
</span><span class='line'><span class="n">volume_id</span> <span class="o">=</span> <span class="p">(((</span><span class="n">ec2</span><span class="o">.</span><span class="n">describe_volumes</span><span class="o">[</span><span class="s2">&quot;volumeSet&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="p">{})</span><span class="o">[</span><span class="s2">&quot;item&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="o">[]</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">volume</span><span class="o">|</span>
</span><span class='line'>  <span class="p">(</span><span class="n">volume</span><span class="o">[</span><span class="s2">&quot;attachmentSet&quot;</span><span class="o">][</span><span class="s2">&quot;item&quot;</span><span class="o">].</span><span class="n">select</span><span class="p">{</span> <span class="o">|</span><span class="n">ins</span><span class="o">|</span> <span class="n">ins</span><span class="o">[</span><span class="s2">&quot;instanceId&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="n">instance_id</span> <span class="p">}</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="p">{})</span><span class="o">[</span><span class="s2">&quot;instanceId&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="n">instance_id</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="p">{})</span><span class="o">[</span><span class="s2">&quot;volumeId&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">create_snapshot</span><span class="p">(</span><span class="ss">:volume_id</span> <span class="o">=&gt;</span> <span class="n">volume_id</span><span class="p">,</span> <span class="ss">:description</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo bar&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">result</span><span class="o">[</span><span class="s2">&quot;snapshotId&quot;</span><span class="o">]</span> <span class="c1"># 新的 snapshot id</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>更多可參考 API: <a href="https://github.com/grempe/amazon-ec2/tree/master/lib/AWS/EC2" target="_blank">https://github.com/grempe/amazon-ec2/tree/master/lib/AWS/EC2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE 瀏覽器讀取 css 檔案的 selector (4096)限制]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-09-16/ie-css-selector-limitation-4096/"/>
    <updated>2012-09-16T23:24:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-09-16/ie-css-selector-limitation-4096</id>
    <content type="html"><![CDATA[<p>IE 瀏覽器在讀取每個 css 檔案時，不能超過 4096 個 selector，超過的都會被忽略</p>

<!-- more -->


<p>註: <code>.foo .bar { .... }</code> 代表一個 selector<br/>
<code>stackoverflow</code> 也有相關問題: <a href="http://bit.ly/QiuvNC" target="_blank">http://bit.ly/QiuvNC</a></p>

<p>由於 <code>twitter boostrap</code> 以及其應用外掛的流行，要破 4096 個 selector 是輕而易舉的事，要測試你所使用的瀏覽器有沒有支援超過，可以<a href="http://marc.baffl.co.uk/browser_bugs/css-selector-limit/" target="_blank">看這個網頁</a>，若顯示的背景為紅色代表不支援，綠色表示沒問題。</p>

<p>解決此問題最快的辦法就是把 css 分檔案就行了，rails 的 assets precompile 的 css 中若混雜著 bootstrap 之類的套件就會很容易超過此限制，只要把這些不會被修改的套件掛上 CDN 或分不同檔案 precompile 就可以處理了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自動隱藏 iPhone safari 的網址列]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-09-09/hide-address-bar-iphone-safari/"/>
    <updated>2012-09-09T13:46:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-09-09/hide-address-bar-iphone-safari</id>
    <content type="html"><![CDATA[<p>在 <code>html</code> 的 <code>&lt;head&gt;</code> 裡面加上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-capable&quot;</span> <span class="na">content=</span><span class="s">&quot;yes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="na">content=</span><span class="s">&quot;black&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考來源: <a href="http://stackoverflow.com/questions/4759818/how-to-hide-the-address-bar-of-a-webpage-in-android" target="_blank">http://stackoverflow.com/questions/4759818/how-to-hide-the-address-bar-of-a-webpage-in-android</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[取得獨一無二的 session id]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-09-09/unique-session-id/"/>
    <updated>2012-09-09T11:32:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-09-09/unique-session-id</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">session_options</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>參考連結: <a href="http://stackoverflow.com/questions/4824829/finding-the-session-id-in-rails-3" target="_blank">http://stackoverflow.com/questions/4824829/finding-the-session-id-in-rails-3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake db 的 tasks 整理]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-09-03/about-rake-db-tasks/"/>
    <updated>2012-09-03T15:38:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-09-03/about-rake-db-tasks</id>
    <content type="html"><![CDATA[<p>善用 rails rake 內建的 DB tasks 進行資料庫操作</p>

<!-- more -->


<p><code>rake db:migrate</code> - 執行 db/migrate 中還沒跑過的 migrations<br/>
<code>rake db:migrate VERSION=12341234</code> - 針對設定的 migrations 版本執行<br/>
<code>rake db:migrate:redo</code> - 重跑目前最新的 migration<br/>
<code>rake db:migrate:redo STEP=3</code> - 重跑目前最新的三個 migration<br/>
<code>rake db:rollback</code> - 還原跑過最新的 migration<br/>
<code>rake db:rollback STEP=3</code> - 還原跑過最新三個的 migration<br/>
<code>rake db:create</code> - 建立 database<br/>
<code>rake db:drop</code> - 刪除整個 database<br/>
<code>rake db:schema:dump</code> - 從目前 database 中實際的 schema 建立 db/schema.rb<br/>
<code>rake db:schema:load</code> - 從 db/schema.rb 中把 schema 建立到 databse 中<br/>
<code>rake db:structure:dump</code> - 從目前 database 中實際的 schema 輸出到 db/structure.sql<br/>
<code>rake db:reset</code> - 合體的 task ( db:drop => db:create => db:schema:load)</p>

<p>另外安裝了 <a href="https://github.com/ludicast/yaml_db" target="_blank"><code>yaml_db</code></a> 後，可以透過以下兩個指令把資料庫的資料做 export/import (不包含 schema)</p>

<p><code>rake db:data:dump</code> - 把資料輸出到 db/data.yml<br/>
<code>rake db:data:load</code> - 把資料從 db/data.yml 輸入到 database 中</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[layout 檔案的命名]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-21/rails-layout-file-naming/"/>
    <updated>2012-08-21T15:16:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-21/rails-layout-file-naming</id>
    <content type="html"><![CDATA[<p>今天發現 <code>layout</code> 檔 (views/layouts) 的命名是不能亂來的 ~XD<br/>
嘗試用 dash 命名 (例如 foo-bar.html.haml) 的結果造成 haml 無法被 parsing<br/>
所以還是乖一點用小寫英文和 underline 吧 :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的 Sublime Text 2 設定]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-19/sublimetext-shortcuts-and-configurations-for-sass-erb-rubytest/"/>
    <updated>2012-08-19T21:46:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-19/sublimetext-shortcuts-and-configurations-for-sass-erb-rubytest</id>
    <content type="html"><![CDATA[<p>最後更新: 2013/3/31<br/>
<a href="http://www.sublimetext.com/" target="_blank">Sublime</a> 是一套強大的文字編輯器，和我用過的 Textmate 類似，但功能更為強大 XD<br/>
以下是我的設定範例。</p>

<!-- more -->


<h1>實用快速鍵</h1>

<p>參考: <a href="https://gist.github.com/1207002" target="_blank">https://gist.github.com/1207002</a></p>

<h1>自定快速鍵</h1>

<p>以下視個人喜好而定:</p>

<p>上方選單 -> Sublime Text 2 -> Preferences -> Key Bindings Default</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // 快速顯示目前檔案所在的目錄樹下
</span><span class='line'>  { "keys": ["ctrl+super+r"], "command": "reveal_in_side_bar" },
</span><span class='line'>  // 找 swap_line_up 出來改, 可以換置上下行
</span><span class='line'>  { "keys": ["alt+up"], "command": "swap_line_up" },
</span><span class='line'>  { "keys": ["alt+down"], "command": "swap_line_down" },
</span><span class='line'>  // 找 duplicate_line 出來改, 可以快速複製一行
</span><span class='line'>  { "keys": ["super+alt+down"], "command": "duplicate_line" },
</span><span class='line'>  { "keys": ["super+alt+up"], "command": "duplicate_line" },
</span><span class='line'>  // 找 auto_complete 出來改
</span><span class='line'>  { "keys": ["super+."], "command": "auto_complete" },
</span><span class='line'>  // 刪除一整列, 記得要 search "super+d" 把其他的 key binding 砍掉, 或者可以用別的 key binding
</span><span class='line'>  { "keys": ["super+d"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Line.sublime-macro"} },</span></code></pre></td></tr></table></div></figure>


<h1>安裝好後設定 link</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl
</span><span class='line'>
</span><span class='line'>sudo ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" /usr/bin/subl</span></code></pre></td></tr></table></div></figure>


<p><code>ubuntu</code> 的話可以用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s ~/Applications/Sublime\ Text\ 2/sublime_text /usr/bin/subl</span></code></pre></td></tr></table></div></figure>


<p>shell link，編輯 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> (看你用的是哪一個 shell)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export EDITOR="/usr/local/bin/subl -w"</span></code></pre></td></tr></table></div></figure>


<h1>setting 檔 </h1>

<p><code>command + ,</code> 出現的檔案</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "color_scheme": "Packages/Color Scheme - Default/Twilight.tmTheme",
</span><span class='line'>  "font_size": 18.0,
</span><span class='line'>  "tab_size": 2,
</span><span class='line'>  "translate_tabs_to_spaces": true,  
</span><span class='line'>  "highlight_line": true,
</span><span class='line'>  "highlight_modified_tabs": true
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>(PS: 年紀大了所以用字體 size 用 18 XD)<br/>
(PS2: tab 設定隨個人/公司喜好)</p>

<h1>安裝 package control</h1>

<p>用於快速安裝其他 package 的好工具</p>

<p>參考 <a href="http://wbond.net/sublime_packages/package_control/installation" target="_blank">http://wbond.net/sublime_packages/package_control/installation</a><br/>
ctrl+` 開啟 command line 後輸入:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'</span></code></pre></td></tr></table></div></figure>


<p>重啟 sublime, <code>command+shift+p</code> 輸入 install 看到 <code>Package Control: Install Package</code> 即可透過此功能安裝其他 package</p>

<h1>安裝 sass/scss/haml 檔案支援</h1>

<ol>
<li>安裝 <code>package control</code></li>
<li><code>command+shift+p</code> 輸入 <code>install</code> 選 <code>Package Control: Install Package</code></li>
<li>鍵入 <code>sass</code> 選第一個安裝即可</li>
<li>重複 <code>2.</code>, 鍵入 <code>haml</code> 選第一個安裝即可</li>
</ol>


<h1>安裝 ERB 檔案的編輯強化</h1>

<ol>
<li>安裝 <code>package control</code></li>
<li><code>command+shift+p</code> 輸入 <code>install</code> 選 <code>Package Control: Install Package</code></li>
<li>鍵入 <code>erb snippets</code> 選第一個安裝即可</li>
</ol>


<p>參考<a href="https://github.com/matthewrobertson/ERB-Sublime-Snippets" target="_blank">官方文件</a> 有快速 block template 可產生。</p>

<p>例如在 .erb 檔中，打 <code>er</code> 然後再按 <code>tab</code> 鍵就會生成 <code>&lt;% %&gt;</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[omniauth 登入後的 redirect 設定]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-10/omniauth-redirect-after-login/"/>
    <updated>2012-08-10T14:08:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-10/omniauth-redirect-after-login</id>
    <content type="html"><![CDATA[<p>我們曾在 <a href="http://rubyist.marsz.tw/blog/2012-01-10/callbacks-of-devise-after-sign-in-or-sign-out/">Devise callbacks</a> 中，描述如何在登入後自定 redirect。這次則是在 omniauth 進行 open id 驗證時就先把 redirect 當參數先丟。</p>

<!-- more -->


<p>參考 <a href="https://github.com/intridea/omniauth/issues/218">官方作法</a><br/>
利用 <code>origin</code> 參數即可在 open id 驗證後進行 redirect</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;/auth/facebook&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:facebook_login</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/views/xxx.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># view 或 controller 下</span>
</span><span class='line'><span class="n">facebook_login_path</span><span class="p">(</span><span class="ss">:origin</span> <span class="o">=&gt;</span> <span class="s2">&quot;/url/for/redirect&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># 即 &quot;/auth/facebook?origin=/url/for/redirect&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>若 <code>devise</code> 中已經透過 application_controller.rb 的 <code>after_sign_in_path_for</code> 處理登入後的 redirect 時，則可以透過 <code>request.env['omniauth.origin']</code> 取得 origin 參數的內容。</p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">after_sign_in_path_for</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.origin&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="n">root_path</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devise 的 user 登入免驗證密碼]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-09/devise-user-without-validate_password/"/>
    <updated>2012-08-09T17:15:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-09/devise-user-without-validate_password</id>
    <content type="html"><![CDATA[<p><code>Devise</code> 加上 <code>Omniauth</code> (或其他 Open ID 登入機制) 時，資料庫的密碼欄位可能會需要為空值，因此可在 user 的 model 中覆寫 <code>password_required?</code> (為 public method) 即可。</p>

<!-- more -->




<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">password_required?</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">facebook_id</span> <span class="p">?</span> <span class="kp">false</span> <span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>該範例之邏輯為，有 facebook id 時密碼欄位可為空值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讀書心得: 刻意練習(6)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-07/reading-deliberate-practice-6/"/>
    <updated>2012-08-07T13:42:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-07/reading-deliberate-practice-6</id>
    <content type="html"><![CDATA[<p>最後一篇分享了 XD 本篇主要摘要刻意練習對創意的發展</p>

<!-- more -->


<h3>我們對創意的誤解</h3>

<p>一般我們認為創意之所以會有，乃是來自於 <code>1. 靈光乍現</code> <code>2. 置身領域之外的旁觀者</code>，
事實上這兩點都是不太正確的。任何突破性的創意產生之前，都是當事者下了多年的苦工後才有的。研究人員找出五百多首作曲，來自於個作曲家的第一部成名作或曠世巨作，發現其中只有三件作品是在作曲家職涯的前十年完成，而這三件作品完成的時間也是在第八年和第九年。而這樣的數據足以說明前述的 <code>十年法則</code>。</p>

<h3>創意的正解</h3>

<h5>知識越多創新越多</h5>

<p>在十年法則的漫長時間下，創作者做的活動大多是吸取專精知識，這些活動絕對是該領域密集而且深度的薰陶，即使沒有指導者，創新者本身也股強烈的動力，盡可能的學習與該領域相關的事物。</p>

<h5>創意是孕育出來的</h5>

<p>其實我們可以從現代科技中發現，這些創新都是既有事物的改良和延伸，透過卓越的洞見得以實現。如果不是因為了解過去的成就，這些創新肯定不可能實現。因此我們可確定<code>靈光乍現是來自多時的思索和研究</code>，絕非偶然、也不是無中生有。</p>

<h3>打造創新組織四大關鍵</h3>

<h5>動機與熱情</h5>

<p>刻意練習不是輕鬆的過程，沒有熱情支持難以持續。因此創新者本身是熱切接受自身領域的薰陶，以及其相關的深度知識。</p>

<h5>文化變革</h5>

<p>只要是組織 (2人以上) 都離不開文化的議題，而文化變革必須從上位者本身做起，只要公司的&#8221;長&#8221;字輩認為公司文化沒問題，它就永遠不可能改變。</p>

<h5>傳達需求</h5>

<p>組織想要有所創新，就得讓其中的每個人都了解哪種創新最有價值，有了方向才能夠進行深度的心智模型建立、投入大量心力，領導者在這裡扮演重要角色。</p>

<h5>賦予自由</h5>

<p>當組織內的每個人都被注入動機以及明確方向時，接下來需要注意的就是給予發揮空間，刻意練習強調的是自發性，組織在此要扮演推手的角色，而非造成限制。</p>

<hr />

<p>身為網路工作者，又是工程師。在讀完本書後，小弟首先做的就是調整作息~XD 一改平日睡到十點後才醒來的習慣，想辦法在早上擠出 1~2 小時做最困難的工作 (通常都是 coding 或 debug)，我設定給自己的關鍵指標就是開發所花的時間: 每天早上這 1~2 小時能完成多少工作。</p>

<p>在這樣的過程中剛開始是很痛苦，其實早起感覺都沒睡飽，注意力也難以集中，但震盪期大概持續一個月左右就適應了。習慣後慢慢發現另一個重要的指標: 專注力，程式開發是很注重當下的專心度，因此開始用一些方式提高專注力，關掉手機以及電腦的各種通知等，用高度的感知以及後設認知檢視自己在這段時間內的專注力是否有提昇。</p>

<p>有了一定程度的專注力後，又發現了另一個指標: 英文資料理解速度。程式開發遇到問題經常要上孤狗，而資料多半是英文，因此能夠花越少的時間孤狗，相對就能夠花越多時間在開發上，效率自然會提昇。</p>

<p>如此循環進行，發現不斷找到新的評估指標，然後持續提昇。目前小弟正在磨練的另一項技能是養成寫 blog 的習慣，將自己曾經解決的問題以及累積的知識得以文件保存，除此之外，身為工程師仍有許多能力必須提昇，例如和別人溝通時是否能以最精簡的方式傳達，專案執行前的目標設定是否足夠嚴謹、達成率是否足夠等。刻意練習概念所帶給我的，是變得更了解這些技能學習過程的運作原理，進而更能掌握自己各方面能力的提升。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讀書心得: 刻意練習(5)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-06/reading-deliberate-practice-5/"/>
    <updated>2012-08-06T13:42:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-06/reading-deliberate-practice-5</id>
    <content type="html"><![CDATA[<p>刻意練習的觀念除了用於個人之外，也可應用於組織。但多數企業的文化是與刻意練習的原則衝突，這本書提出了組織進行刻意練習的 9 項守則以及 5 項應避免不利於刻意練習的潛在問題。</p>

<!-- more -->


<h4>守則 1: 個人必須突破和成長</h4>

<p>組織必須以讓每個人突破現有能力和培養目前現階段最重要的技巧為目標。人才的培養有三分之二是來自工作的安排，剩下的三分之一才是來自指導。這是組織必須面對的掙扎與考驗，畢竟多數組織都傾向避免讓員工去做他不熟悉的工作內容。</p>

<p>研究顯示：&#8221;人在危機中所學的是平常的 10 倍以上&#8221;，因此針對經理人的栽培，直接讓他們擔任最具挑戰的工作是大部分成功組織的培養人才的核心技巧。</p>

<h4>守則 2: 在工作中找方法培養人才</h4>

<p>延續守則 1 的觀念，組織都希望每個人除了能有新的學習突破之外，同時對於現有的能力也能夠提昇。而組織必須不斷的想法在工作中找到機會和方法來達到此目標，例如職務輪調、角色改變等。</p>

<h4>守則 3: 鼓勵參與社群</h4>

<p>讓組織中的每個人都會機會擔任主導者，不論是工作或其他面向，例如某此活動的規劃人等。畢竟在多數組織中，大部分的人是少有機會擔任領導者的，透過此方式可強化每個人刻意練習的動機。</p>

<h4>守則 4: 了解反饋與指導的關鍵性</h4>

<p>研究發現: 人們在真正了解事件發生的經過後，便會渴望做的更好。行動後檢討是最具高度效益的流程，但多數組織首要問題都是必須先克服文化層面的問題，次要的問題便是如何有效進行反饋。</p>

<p>一流的組織除了經常反饋之外，同時也都在最開始便具備完整的訓練與指導計畫，同時也會有指導者在訓練過程中給予建議，指出被訓練者應關注在哪些特定技能上。</p>

<h4>守則 5: 早期發現有潛力的表現者</h4>

<p>任何組織都需要&#8221;對的人&#8221;，而能越早發現&#8221;對的人&#8221;組織便具有越高的優勢。無論是領導者本身或透過組織在訓練和工作上的流程設計，都有能有助於找出潛力工作者。</p>

<h4>守則 6: 啟發式培育</h4>

<p>透過使命感的激勵，效果最好。卓越的組織都會把領導者如何啟發工作者視為關鍵指標之一。因為命令和控制的領導模式百分之九十九式無效的，畢竟刻意練習的過程一點也不輕鬆，缺乏強烈動機是不可能熬過去的。</p>

<h4>守則 7: 投注大量時間、金錢和人力在培育上</h4>

<p>如同前述，刻意練習是必須投入時間與心力的，而且必須能夠&#8221;上行下效&#8221;，當公司內部&#8221;長&#8221;字輩的都將其心力放在培育底下人上時，其他主管也會跟著致力於培養人才。</p>

<h4>守則 8: 讓培育成為企業文化的一部分</h4>

<p>有許多刻意練習的法則，都必須成為企業文化的一部分，例如誠實的反饋、以追求個人成長為目標等，若這些無法成為文化的一部分，推行起來也相當困難。</p>

<h4>守則 9: 培育整個團隊</h4>

<p>把刻意練習的原則套用在團隊上是沒問題的，團隊同樣都要設定目標、有心智模型、反覆長時間練習以及持續反饋。因此以個人為基礎的培育是絕對不夠的，組織在設計工作安排以達成培育目的的過程中，也必須包含對團隊的培養，從個人到 3-5 人至整個團隊</p>

<hr />

<h4>最善於創造團隊績效的組織，也會避免以下不利於刻意練習的情況出現</h4>

<h5>錯誤的團隊成員</h5>

<p>人際契合度與文化是成功團隊的關鍵。團隊要的不是最佳球員，而是對的球員。</p>

<h5>低信任度</h5>

<p>信任是人與人之間互動的基礎，而信任必須經過長時間才能培養起來的。</p>

<h5>相互衝突的計畫</h5>

<p>由於組織和個人一樣必須擁有心智模型，相當於每個人所擁有的共同架構，當其中有人格格不入時，便會產生問題。最常見的是組織目標與個人規劃的不一致，但個人盤算在所難免，因此領導者本身的挑戰在於如何不讓個人盤算對組織產生殺傷力。</p>

<h5>未化解的衝突</h5>

<p>團隊成員之間難免會有摩擦衝突，然後這些衝突是過去遺留的產物，也會影響到未來。團隊領導這必須讓這些衝突浮上檯面，並且化解它，能夠做到這點，團隊就更能處理其他更常見的威脅。</p>

<h5>不願正視的議題</h5>

<p>在刻意練習中，卓越者能夠以更嚴格更誠實的方式自我評估，同樣的團隊也必須如此。若養成了得過且過的習慣，團隊自然也難以在每次的練習機會中紮實獲得成長。</p>

<hr />

<p>下一篇 (也是最後一篇)，將會針對刻意練習如何打造創意以及小弟本身的部分經驗分享。</p>
]]></content>
  </entry>
  
</feed>
