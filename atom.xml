<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[黃金俠]]></title>
  <link href="http://rubyist.marsz.tw/atom.xml" rel="self"/>
  <link href="http://rubyist.marsz.tw/"/>
  <updated>2012-08-07T12:09:46+08:00</updated>
  <id>http://rubyist.marsz.tw/</id>
  <author>
    <name><![CDATA[MarsZ]]></name>
    <email><![CDATA[marsz330@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[讀書心得: 刻意練習(5)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-06/reading-deliberate-practice-5/"/>
    <updated>2012-08-06T13:42:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-06/reading-deliberate-practice-5</id>
    <content type="html"><![CDATA[<p>刻意練習的觀念除了用於個人之外，也可應用於組織。但多數企業的文化是與刻意練習的原則衝突，這本書提出了組織進行刻意練習的 9 項守則以及 5 項應避免不利於刻意練習的潛在問題。</p>

<!-- more -->


<h4>守則 1: 個人必須突破和成長</h4>

<p>組織必須以讓每個人突破現有能力和培養目前現階段最重要的技巧為目標。人才的培養有三分之二是來自工作的安排，剩下的三分之一才是來自指導。這是組織必須面對的掙扎與考驗，畢竟多數組織都傾向避免讓員工去做他不熟悉的工作內容。</p>

<p>研究顯示：&#8221;人在危機中所學的是平常的 10 倍以上&#8221;，因此針對經理人的栽培，直接讓他們擔任最具挑戰的工作是大部分成功組織的培養人才的核心技巧。</p>

<h4>守則 2: 在工作中找方法培養人才</h4>

<p>延續守則 1 的觀念，組織都希望每個人除了能有新的學習突破之外，同時對於現有的能力也能夠提昇。而組織必須不斷的想法在工作中找到機會和方法來達到此目標，例如職務輪調、角色改變等。</p>

<h4>守則 3: 鼓勵參與社群</h4>

<p>讓組織中的每個人都會機會擔任主導者，不論是工作或其他面向，例如某此活動的規劃人等。畢竟在多數組織中，大部分的人是少有機會擔任領導者的，透過此方式可強化每個人刻意練習的動機。</p>

<h4>守則 4: 了解反饋與指導的關鍵性</h4>

<p>研究發現: 人們在真正了解事件發生的經過後，便會渴望做的更好。行動後檢討是最具高度效益的流程，但多數組織首要問題都是必須先克服文化層面的問題，次要的問題便是如何有效進行反饋。</p>

<p>一流的組織除了經常反饋之外，同時也都在最開始便具備完整的訓練與指導計畫，同時也會有指導者在訓練過程中給予建議，指出被訓練者應關注在哪些特定技能上。</p>

<h4>守則 5: 早期發現有潛力的表現者</h4>

<p>任何組織都需要&#8221;對的人&#8221;，而能越早發現&#8221;對的人&#8221;組織便具有越高的優勢。無論是領導者本身或透過組織在訓練和工作上的流程設計，都有能有助於找出潛力工作者。</p>

<h4>守則 6: 啟發式培育</h4>

<p>透過使命感的激勵，效果最好。卓越的組織都會把領導者如何啟發工作者視為關鍵指標之一。因為命令和控制的領導模式百分之九十九式無效的，畢竟刻意練習的過程一點也不輕鬆，缺乏強烈動機是不可能熬過去的。</p>

<h4>守則 7: 投注大量時間、金錢和人力在培育上</h4>

<p>如同前述，刻意練習是必須投入時間與心力的，而且必須能夠&#8221;上行下效&#8221;，當公司內部&#8221;長&#8221;字輩的都將其心力放在培育底下人上時，其他主管也會跟著致力於培養人才。</p>

<h4>守則 8: 讓培育成為企業文化的一部分</h4>

<p>有許多刻意練習的法則，都必須成為企業文化的一部分，例如誠實的反饋、以追求個人成長為目標等，若這些無法成為文化的一部分，推行起來也相當困難。</p>

<h4>守則 9: 培育整個團隊</h4>

<p>把刻意練習的原則套用在團隊上是沒問題的，團隊同樣都要設定目標、有心智模型、反覆長時間練習以及持續反饋。因此以個人為基礎的培育是絕對不夠的，組織在設計工作安排以達成培育目的的過程中，也必須包含對團隊的培養，從個人到 3-5 人至整個團隊</p>

<hr />

<h4>最善於創造團隊績效的組織，也會避免以下不利於刻意練習的情況出現</h4>

<h5>錯誤的團隊成員</h5>

<p>人際契合度與文化是成功團隊的關鍵。團隊要的不是最佳球員，而是對的球員。</p>

<h5>低信任度</h5>

<p>信任是人與人之間互動的基礎，而信任必須經過長時間才能培養起來的。</p>

<h5>相互衝突的計畫</h5>

<p>由於組織和個人一樣必須擁有心智模型，相當於每個人所擁有的共同架構，當其中有人格格不入時，便會產生問題。最常見的是組織目標與個人規劃的不一致，但個人盤算在所難免，因此領導者本身的挑戰在於如何不讓個人盤算對組織產生殺傷力。</p>

<h5>未化解的衝突</h5>

<p>團隊成員之間難免會有摩擦衝突，然後這些衝突是過去遺留的產物，也會影響到未來。團隊領導這必須讓這些衝突浮上檯面，並且化解它，能夠做到這點，團隊就更能處理其他更常見的威脅。</p>

<h5>不願正視的議題</h5>

<p>在刻意練習中，卓越者能夠以更嚴格更誠實的方式自我評估，同樣的團隊也必須如此。若養成了得過且過的習慣，團隊自然也難以在每次的練習機會中紮實獲得成長。</p>

<hr />

<p>下一篇 (也是最後一篇)，將會針對刻意練習如何打造創意以及小弟本身的部分經驗分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讀書心得: 刻意練習(4)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-05/reading-deliberate-practice-4/"/>
    <updated>2012-08-05T13:42:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-05/reading-deliberate-practice-4</id>
    <content type="html"><![CDATA[<p>刻意練習概念在生活及工作上的應用，可以分為幾個議題探討: <code>知道練習目標</code>、<code>直接練習的方式</code>、<code>在實戰中練習</code></p>

<!-- more -->


<h3>明確的目標</h3>

<p>設計刻意練習系統的首要挑戰就是找出環環相扣的各項步驟，而絕大多數的領域都不是那麼容易找到完整的學習大綱，練習的細節都必須靠自己發掘。因此<code>我們是需要協助的</code>，以此觀點我們就能用新的角度來看但導師的角色，除了練習上的反饋之外，導師最重要的是給我們正確的練習方向。</p>

<h3>直接練習</h3>

<p>直接練習是最具有效果的練習方式，模式上可分為三大類: <code>音樂模式</code>、<code>運動模式</code>、<code>棋藝模式</code></p>

<h5>音樂模式</h5>

<p>音樂早起寫成譜，卓越和平庸的表現在於演奏時能有多好的表現。在商業領域中，最明顯的就是簡報和演講。在音樂模式下，我們能做的就是分析內容，找出個環節的極致表現。卓越者會在此過程中，不惜大費周章的找出改進的方式。</p>

<h5>棋藝模式</h5>

<p><code>案例研究</code> 可以說是棋藝模式的練習方式，其核心就是要你回答: &#8220;你會怎麼做?&#8221;，因此它不像音樂模式有既定的&#8221;答案&#8221;可遵循，所以在<code>反饋</code>在棋藝模式下是非常重要的，在獨自練習的狀態下，練習過程的紀錄是少不了的。</p>

<h5>運動模式</h5>

<p>運動模式可分為兩大類: <code>調適訓練</code>、<code>培養特定技巧</code></p>

<p>調適訓練就是強會已知的基本技巧，籃球員訓練大腿、業務人員訓練談話技巧等。基本的練習方式就是不斷複習工作所仰賴的基礎技能，也可能會跳脫慣用的教材或手冊，這些就像是運動員該具備的體力一樣，沒有持續鍛鍊就會衰退。</p>

<p>培養特定技巧是針對局部或某個層面的表現進行大量反覆的練習，並且立即反饋，例如羽球選手針對特定角度的殺球不斷練習。在工作中，也可以透過模擬的方式不斷練習，甚至在每次的實戰中反覆推敲，找出最有效的反饋方式。</p>

<h3>在實戰中練習</h3>

<p>在企業中，某些技能的練習大多是難以模擬的，使得練習次數難以增加，因此你可以有不同的作法，幫助你在為數不多的實戰中改進技巧，其階段可分為: <code>實戰前</code>、<code>實戰中</code>、<code>實戰後</code> 以及長期進行的 <code>知識深化</code></p>

<h5>實戰前</h5>

<p>從設定目標開始，卓越的工作者在設定目標時，不只是結果，而是緊扣到達結果的過程，例如業務人員的目標設定不僅是敲到訂單，而是聚焦在談判過程中是否有辨識出客戶沒有明講的需求。</p>

<p>目標設定好後，接下來就是規劃如何達成，卓越的工作者或在其中擬出最確切的途徑，還記得先前提過的<code>關鍵指標</code>嗎? 卓越者會針對這些關鍵指標規劃出具體的達成方式。</p>

<p>規劃這些是相當困難的，態度和信念是關鍵所在，卓越者是帶著強烈的信念投入工作，使其有更強的驅動力定出完整的目標設定。</p>

<h5>實戰中</h5>

<p>實戰中最重要的是能夠<code>自我觀察</code>，例如耐力跑者通常喜歡把注意放在其他地方，因為跑步時很痛苦，他們想要將思緒抽息當下環境，而卓越者會全身貫注在當下的身體狀況，例如呼吸節奏與步伐。卓越者會用上更多的感知，&#8221;記錄&#8221; 其實戰當下的一切，以達到反饋的效果。</p>

<p>在工作上，大部分都是心智活動，科學上有一種稱之為 &#8220;後設認知&#8221; 的方式可達到實戰中練習的效果。後設認知用於工作中，就是將自己抽離當下環境，以第三者的角度看待自己在工作上的心智活動，例如和上司溝通的當下，你暫停了自己的心智，從外人的角度詢問自己: &#8220;我正在情緒化嗎?&#8221; 、 &#8220;我確認對方聽懂我所表達的嗎?&#8221;</p>

<h5>實戰後</h5>

<p>有效反饋是實戰後最重要的步驟，卓越者自我評估的方式，會如同他們在實戰前設定目標的態度，更為具體、更為嚴格，而且或和他們最初所設定的各階段目標相關。</p>

<p>評估的關鍵在於 &#8220;選擇能夠讓你超越目前極限的比較對象&#8221;。表現平庸者相信，有一部分的錯誤是自己無法掌控的，例如任務太難、對手走運等。而卓越者會將一切歸咎於自己，並在其中想盡辦法找到改進的方式，他們對自己會毫不留情的鞭策。</p>

<p>一般的工作者在遇到狀況時，反應的處理上會想辦法避免再度發生，而卓越者會調整自己的行為和心態，使其在下一次發生時能有更好的表現。</p>

<h5>建立心智模型</h5>

<p>如同前一篇所描述，完整的心智模型能夠讓你記憶更多、理解更多，讓你具備更高度的感知能力，使練習後的反饋效果最大化。除此之外，心智模型也能夠幫助你分辨相關或無關資訊、甚至能夠幫助你預測一下步會發生的事情，讓你能夠看得更遠。</p>

<p>卓越的表現者知道自己的心智模型永遠沒有完成的一天，他們會不斷的擴充它，甚至跨出原本的領域，以尋求更大的改進。因此你必須將充實專業知識當成工作的主要目標，而非邁向卓越的副產品。</p>

<hr />

<p>以上是有關刻意練習在個人表現上的應用，接下來會針對刻意練習觀念應用於組織整體的進行方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讀書心得: 刻意練習(3)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-08-04/reading-deliberate-practice-3/"/>
    <updated>2012-08-04T10:57:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-08-04/reading-deliberate-practice-3</id>
    <content type="html"><![CDATA[<p>這篇主要說明有關刻意練習的運作原理，於各種專業領域皆適用</p>

<!-- more -->


<h3>感知更多</h3>

<p>卓越者對於環境和自身狀態能有更細膩的感受，這讓他們不論在練習或實戰中能獲得更多的進步，而這是需要刻意培養的，培養對事物能有更敏捷更優越的理解力。</p>

<p>駕駛新手與高手的危及測驗便是一例：在同樣的環境限制下，駕駛高手的反應時間並沒有比新手特別快，但是他們在一瞬間對當下環境的理解範圍較廣，因此在不同程度的感知下，駕駛高手能做出比新手更好的處理。</p>

<p>高度的感知能力通常具備以下特性: <code>了解關鍵指標</code>、<code>看得更遠</code>、<code>能由小見大</code>、<code>辨識能力更細膩</code></p>

<h5>關鍵指標</h5>

<p>卓越者比一般人更能知道哪些指標是能影響成效最多，並且能有效的提升。這些指標通常細微但很有效。例如零售商主管知道可從停車場上的油漬判斷顧客車子的保養狀況、財務分析師可從股東信中出現&#8221;我&#8221;的次數來預測營運績效(本位主義對績效是壞消息)。</p>

<p>在某些組織或企業中，這些指標通常是不外傳的獨門秘訣。但大多數的情況下，只要勤做功課，都會知道該領域的關鍵指標，而卓越者與一般人的差異仍是在練習上。指標的發展與運用都需要透過廣泛的練習，例如打網球，你已經知道了所有的秘訣(關鍵指標)，若你不曾投入數百小時的練習，學習並且讓身體習慣的去關注這些指標，也是無法派上用場的。</p>

<h5>看得更遠</h5>

<p>簡而言之，就是看見自己的未來，卓越者會知道前方有什麼在等著他們，使他們能夠為未來做好準備。而這樣的能力是來自於提高眼光、拓展視野。擁有獨到眼光並非胡亂猜測或天生具備，而是來自於你對該領域理解的&#8221;深度&#8221;，而深度是需要長時間投入才能培養出來的。</p>

<h5>從小看大</h5>

<p>在各個領域中，見微知著的能力都是成功的關鍵，能夠以低成本快速做出妥善決策，不論到哪都是一項優勢，因為我們掌握的資訊永遠都不夠充分。例如警官學習如何在千鈞一髮之際判斷是否開槍、面試官如何在短時間內判斷面試者的個性、能力等。</p>

<h5>更細膩的辨識能力</h5>

<p>彩妝師的色彩辨識能力、音樂家對音調的辨識能力等，這些能力無非都是經過長期練習與訓練的結果，而這些能力通常也無法轉移至其他領域。刻意練習的成果就是在於幫助我們取得某個領域下出類拔萃所需的能力。</p>

<h3>理解更多</h3>

<p>關鍵在於你所具備的知識深度。各領域的頂尖高手所具備的知識較有組織，也因此能夠以完全不同或更為有效的方法處理問題，而形成差異性。累積、開發知識是刻意練習最重要的成效之一，想要不斷超越自己在某個領域的能力，就要累積更多知識，而長期耕耘能發展出&#8217;整合所有知識&#8217;、&#8217;讓知識發揮效益&#8217;的重要脈絡。</p>

<h3>記憶更多</h3>

<p>因為必須理解更多，因此卓越者的記憶力也必須比一般人更好。研究顯示，不分卓越與否所有人的短期記憶平均只能同時容納七件事物(意元)。但卓越者的&#8221;意元&#8221; (chunk) 比一般人的容量大的多。</p>

<p>何謂意元？只要用單字和字母來想就會比較容易了。一個很長的單字，你不會一個字母一個字母的記，而是從該單字中找出熟悉的其他單字，例如 expensive ，我們通常會以 ex-pen-sive 的方式記起來，這樣就只占了 3 個意元而不是硬記下 9 個字母(意元)的順序。</p>

<p>因此卓越者和一般人的記憶力差異在於他們的大腦中有更優越的&#8221;檢索架構&#8221;，而檢索架構也是來自於你對該領域所建構的知識架構，這些都必須透過刻意練習才能建立起來的。</p>

<hr />

<p>總結一下刻意練習的運作原理: <code>感知更多</code>、<code>理解更多</code>、<code>記憶更多</code></p>

<p>卓越者在長期的刻意練習下，培養出高度的感知能力，並且建構出完整的知識架構，累積更豐富的知識以追求更卓越的表現。</p>

<p>接下來我會再摘要書中將刻意練習的概念應用於生活與工作中的方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[取得 Facebook 地點的打卡數]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-05-22/fetch-facebook-place-checkins-count/"/>
    <updated>2012-05-22T15:14:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-05-22/fetch-facebook-place-checkins-count</id>
    <content type="html"><![CDATA[<p>參考 <a href="http://developers.facebook.com/docs/reference/api/" target="_blank">Facebook Graph Api 文件</a></p>

<!-- more -->


<h4>透過關鍵字搜尋某個地點</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://graph.facebook.com/search?q=[關鍵字]&type=place&access_token=[ur access token]</span></code></pre></td></tr></table></div></figure>


<h4>透過經緯度搜尋某個點範圍內的地點</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://graph.facebook.com/search?q=[關鍵字]&type=place&center=37.76,-122.427&distance=1000&access_token=[ur access token]</span></code></pre></td></tr></table></div></figure>


<h4>搜尋結果的 JSON 範例</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "data": [
</span><span class='line'>      {
</span><span class='line'>         "name": "Q Square \u4eac\u7ad9\u6642\u5c1a\u5ee3\u5834",
</span><span class='line'>         "category": "Local business",
</span><span class='line'>         "location": {
</span><span class='line'>            "street": "\u53f0\u5317\u5e02\u5927\u540c\u5340\u627f\u5fb7\u8def\u4e00\u6bb5\u4e00\u865f",
</span><span class='line'>            "city": "Taipei",
</span><span class='line'>            "country": "Taiwan",
</span><span class='line'>            "zip": "103",
</span><span class='line'>            "latitude": 25.049230908176,
</span><span class='line'>            "longitude": 121.51719644493
</span><span class='line'>         },
</span><span class='line'>         "id": "195588960470358"
</span><span class='line'>      },
</span><span class='line'>   ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>以 place id 查詢詳細資料</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://graph.facebook.com/195588960470358</span></code></pre></td></tr></table></div></figure>


<p>取得</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "id": "195588960470358",
</span><span class='line'>   "name": "\u677f\u6a4b\u6797\u5bb6\u82b1\u5712",
</span><span class='line'>   "picture": "http://profile.ak.fbcdn.net/static-ak/rsrc.php/v2/yN/r/cDKJtvtlYv5.png",
</span><span class='line'>   "link": "http://www.facebook.com/pages/\u0025E6\u00259D\u0025BF\u0025E6\u0025A9\u00258B\u0025E6\u00259E\u002597\u0025E5\u0025AE\u0025B6\u0025E8\u00258A\u0025B1\u0025E5\u00259C\u002592/195588960470358",
</span><span class='line'>   "likes": 141,
</span><span class='line'>   "category": "Local business",
</span><span class='line'>   "is_published": true,
</span><span class='line'>   "is_community_page": true,
</span><span class='line'>   "location": {
</span><span class='line'>      "street": "\u65b0\u5317\u5e02\u677f\u6a4b\u5340\u897f\u9580\u88579\u865f",
</span><span class='line'>      "city": "Taipei",
</span><span class='line'>      "country": "Taiwan",
</span><span class='line'>      "zip": "22056",
</span><span class='line'>      "latitude": 25.011011386339,
</span><span class='line'>      "longitude": 121.45513650235
</span><span class='line'>   },
</span><span class='line'>   "phone": "02-2965-3061",
</span><span class='line'>   "checkins": 2745,
</span><span class='line'>   "talking_about_count": 106
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>checkins</code> 為打卡數</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讀書心得: 刻意練習(2)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-05-15/reading-deliberate-practice-2/"/>
    <updated>2012-05-15T13:54:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-05-15/reading-deliberate-practice-2</id>
    <content type="html"><![CDATA[<p>所謂的<code>刻意練習</code>有別於我們一般所認知的<code>練習</code>，而是一套以系統化方法有效的進行自我訓練，以邁向卓越之路。書中所提到的要素如下:</p>

<!-- more -->


<h4>專為提昇表現而設計  通常有指導者</h4>

<p>幾乎在<code>任何領域的初期</code>中，有個教練在旁指導不僅能縮短時間，更重要的是他能從你自己看不到的角度觀察你，給予建議指正，讓你不會在初期就養成的不是很正確的觀念或習慣，減少你在未來修正時所花的成本。</p>

<h4>對練習成果持續反饋</h4>

<p>如果看不到自己的練習成果時: 1.你不會進步 2.你也不會再意。自然而然的就會失去練習的意願，因此指導者在此扮演了重要的角色。但多數情況下，指導者並不能全面的協助你進行反饋，你必須想辦法建立一套可以進行自我評估的機制。</p>

<p>每個人的反饋評估標準都是不一樣的，因為這是針對自己的程度，為找出改善項目而設計的。厲害的人會分析自己的行為，切割出極為具體的層面，然後專注於琢磨某個項目直到改善為止，接著就再繼續琢磨下一個項目。</p>

<p>舉例來說，籃球員一般會上健身房鍛鍊某部位的肌力，而優秀的籃球員會想辦法了解自己哪部位的肌力待改進，詢問教練最適當的器材選擇，然後自行開始進行鍛鍊，接著再從球場上的表現進行自我評估。</p>

<h4>在&#8221;學習區&#8221;多次且反覆的進行練習</h4>

<p>理論將表現層面，以三個同心圓說明: <code>舒適區</code>、<code>學習區</code>、<code>恐慌區</code>。以開車為例，在駕訓班期間可稱之為學習區，我們的<code>心智處在全神貫注的狀態</code>，感受每一次換檔、油門、煞車的經驗。上路一段時間後我們脫離了全神貫注，可以一邊開車一邊思考別的事情(當然這不是對的:p)，可稱之為舒適區，而恐慌區則是難到我們連怎麼著手都不知道。</p>

<p>假如我們想要更精進開車技術，就必須將心智帶往學習區，例如在停車場建立練習環境或平常開車時讓自己的心智脫離&#8221;自動導航&#8221;狀態，隨時注意每一瞬間的細節。人必須處在學習區才能保持進步。</p>

<p>因此<code>找出學習區</code>(通常不太容易)，然後隨著學習區的變化，強迫自己持續待在學習區反覆練習(這更難)，過程中肯定是苦在其中、乏味無趣，並且不斷尋找自己不擅長的事，這就是刻意練習最重要的一環!!!</p>

<h4>心力交瘁</h4>

<p>如同前述開車的例子，練習過程是保持全神貫注的，因此肯定無法連續長時間如此。不管在哪個領域，<code>一天 4~5 小時是刻意練習的上限</code>，而過程中又會<code>分成幾個不超過 60~90 分鐘的時段</code>，沒有人能夠持續練習一整天的，因為專注力會減退。我想這也算是一個好消息吧 :p</p>

<p>而卓越者絕對不允許自己在專精領域中受到自動化綁架，除了平時刻意練習要避免自動化之外，一旦發現自己因為練習到心力交瘁而進入自動化狀態時，就應該停止練習，直到恢復專注力為止。</p>

<hr />

<p>再整理一下刻意練習的特點: <code>通常有指導者</code>、<code>持續反饋</code>、<code>待在學習區反覆練習</code>、<code>全神貫注直到心力交瘁</code></p>

<p>這些特點有助於你設計自己的練習架構，但書中仍一再提到，不管練習是經過多縝密的設計，另一項重要的變數是<code>個人努力程度</code>，包括你如何安排自己的練習時間、花了多久的時間進行刻意練習，這些才是成為頂尖最重要的因素。</p>

<p>接下來將會說明刻意練習運作的原理，深入了解卓越者為何能夠和一般人不同之處!!!當你了解之後，便會明白你和卓越人士之間的差距不再遙不可及或無從理解起。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讀書心得: 刻意練習(1)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-05-14/reading-deliberate-practice-1/"/>
    <updated>2012-05-14T12:28:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-05-14/reading-deliberate-practice-1</id>
    <content type="html"><![CDATA[<p>博客來: <a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010456601" target="_blank">http://www.books.com.tw/exep/prod/booksfile.php?item=0010456601</a><br/>
原書名為 <code>我比別人更認真</code>, 標題下 <code>刻意練習</code> 是因為這是本書的主軸<br/>
我大約在 2010 年中買來看完, 覺得和 <a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010482162" target="_blank"><code>Rework</code></a> 一樣都是值得一讀再讀的好書 :)</p>

<!-- more -->


<h3>前言</h3>

<p>一~三章舉證不少卓越人士和一般人之間的差異，天賦的因素幾乎是微乎其微，影響最深遠的差異在於 <code>你花了多少時間努力</code></p>

<p>第四章則是本書重點的開始，以一位著名的足球運動員為例，說明努力是如何扭轉態勢&#8230;</p>

<h5>努力通常不是卓越的保證</h5>

<p>因此本書大量研究了各種卓越人士的案例，嘗試從其中找出 &#8220;努力的方法&#8221;，因為不努力是絕對無法邁向頂尖的!!</p>

<h5>自發練習</h5>

<p>大量的統計報告指出，卓越人士和一般人接受訓練的時間是差不多的，智商.環境.生活也都沒有顯著差異。而要提昇表現水準，<code>自發練習</code> 占了最重要的因素。以書中為例，卓越的小提琴家平均獨自練習的時間遠遠多於一般的小提琴家。</p>

<h5>自發練習多半集中在上午</h5>

<p>為了成為頂尖，必須安排固定的時間才能做大量練習，因此多半會選擇在&#8221;精神狀況較佳&#8221;的狀態下進行自發練習。而我個人對此的解讀是 <code>剛睡醒的2 ~ 3小時內</code>，這段時間身心都處在最佳狀態，沒有任何時間比這時候做自發練習更好了。這也可以解釋為什麼成功人士都在早上六起點起床(甚至更早)，利用早晨這 1~2 小時完成當天最重要的工作，然後才準備去上班。</p>

<h5>睡得比較多</h5>

<p>因為投入於自發練習的時間較長較集中，因此卓越人士也比平常人更耗費心力，所以為了保持在最佳狀態下做練習，自然睡得就比較多啦</p>

<h5>十年法則</h5>

<p>頂尖表現者的研究發現一個基調: 不管這些人是誰，也不管他們表現如此精進的原因為何，<code>他們都是經過多年</code>才變得如此出眾，無一例外。也因此說明了許多科學家或作家偉大的成果或作品都是在二十年以上的潛心努力後才問世。這和不久前看到的 <a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010516443" target="_blank"><code>一萬小時法則</code></a> 呼應。</p>

<h5>刻意練習</h5>

<p>矛盾的是，花在自發練習的時間長並不代表一定能有卓越表現，而這問題在於 <code>對練習定義的模糊</code>，所謂的練習並非是我們所想的&#8221;熟能生巧&#8221;這麼簡單，而是一套更為具體更有架構的 <code>刻意練習</code>，這也是本書從第五章開始所帶出的重點.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 backup gem 做自動化備份]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-03-08/backup-gem/"/>
    <updated>2012-03-08T11:57:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-03-08/backup-gem</id>
    <content type="html"><![CDATA[<p>source: <a href="https://github.com/meskyanichi/backup" target="_blank">https://github.com/meskyanichi/backup</a><br/>
和 <a href="http://godrb.com/" target="_blank">God</a> 一樣是一個獨立的 gem，因此也可用於其他語言</p>

<!-- more -->


<p><code>backup</code> 的特色:</p>

<ol>
<li>可備份 <code>Redis</code>、<code>MongoDB</code>、<code>Mysql</code> 等 DB</li>
<li>可備份檔案、目錄</li>
<li>備份可儲存於 local disk、<code>Amazon S3</code>、<code>Dropbox</code> 或透過 <code>ftp</code>.<code>scp</code> 等協定將檔案上傳</li>
</ol>


<p>範例檔的備份標的:</p>

<ol>
<li><code>Mysql</code></li>
<li>使用者上傳之頭像圖檔儲存於 <code>Rails</code> public/uploads</li>
<li>備份檔案上傳至 <code>Amazon S3</code></li>
</ol>


<h4>安裝</h4>

<p><code>gem install backup</code></p>

<h4>範例</h4>

<p>打開空檔案即可使用</p>

<figure class='code'><figcaption><span>backup_config.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Backup</span><span class="o">::</span><span class="no">Model</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:my_app</span><span class="p">,</span> <span class="s1">&#39;db data of my app&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># mysql 備份</span>
</span><span class='line'>  <span class="n">database</span> <span class="no">MySQL</span> <span class="k">do</span> <span class="o">|</span><span class="n">db</span><span class="o">|</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">name</span>               <span class="o">=</span> <span class="s2">&quot;my_app_db&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">username</span>           <span class="o">=</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">password</span>           <span class="o">=</span> <span class="s2">&quot;12341234&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">host</span>               <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">port</span>               <span class="o">=</span> <span class="mi">3306</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">socket</span>             <span class="o">=</span> <span class="s2">&quot;/tmp/mysql.sock&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># user 頭像檔案  </span>
</span><span class='line'>  <span class="n">archive</span> <span class="ss">:uploads</span> <span class="k">do</span> <span class="o">|</span><span class="n">archive</span><span class="o">|</span>
</span><span class='line'>    <span class="n">archive</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;/path/to/my_app/public/uploads&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 上傳至 S3  </span>
</span><span class='line'>  <span class="n">store_with</span> <span class="no">S3</span> <span class="k">do</span> <span class="o">|</span><span class="n">s3</span><span class="o">|</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">access_key_id</span>      <span class="o">=</span> <span class="s2">&quot;12341234&quot;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">secret_access_key</span>  <span class="o">=</span> <span class="s2">&quot;!@#$%^&amp;*(&quot;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">region</span>             <span class="o">=</span> <span class="s2">&quot;us-east-1&quot;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">bucket</span>             <span class="o">=</span> <span class="s2">&quot;my_app_backup&quot;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">path</span>               <span class="o">=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">keep</span>               <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 壓縮打包設定</span>
</span><span class='line'>  <span class="n">compress_with</span> <span class="no">Gzip</span> <span class="k">do</span> <span class="o">|</span><span class="n">compression</span><span class="o">|</span>
</span><span class='line'>    <span class="n">compression</span><span class="o">.</span><span class="n">best</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">compression</span><span class="o">.</span><span class="n">fast</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">backup</span> <span class="n">perform</span> <span class="o">-</span><span class="n">t</span> <span class="n">my_app</span> <span class="o">-</span><span class="n">c</span> <span class="n">backup_config</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>就可進行備份</p>

<p>若要做 <code>Rails</code> 定期備份, 再將指令整合於 <code>whenever</code> 即可<br/>
另外再提供儲存於 local disk 的範例</p>

<figure class='code'><figcaption><span>backup_config.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">store_with</span> <span class="no">Local</span> <span class="k">do</span> <span class="o">|</span><span class="n">local</span><span class="o">|</span>
</span><span class='line'>    <span class="n">local</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;/path/to/back/dir&quot;</span>
</span><span class='line'>    <span class="n">local</span><span class="o">.</span><span class="n">keep</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec 設定 request 或 controller 的 spec 中 render view]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-03-06/rspec-render-views/"/>
    <updated>2012-03-06T11:05:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-03-06/rspec-render-views</id>
    <content type="html"><![CDATA[<p><code>rspec rails</code> 中預設是不會 render view 的, 因此 <code>response.body</code> 的內容會是空字串</p>

<!-- more -->


<p>為了讓 response.body 能實際的把 view render 出來, 可以有個別或預設的作法</p>

<p>個別</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">UsersController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">render_views</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;GET #index&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">should</span> <span class="n">match</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>預設</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">render_views</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>小弟個人較偏好每個 request / controller 的 spec 都要 render_view<br/>
一方面可以檢驗 view 的正確性<br/>
若 view 中有使用 helper method, 也可以順便檢驗</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec 檔案上傳的測試]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-03-04/rspec-file-upload/"/>
    <updated>2012-03-04T10:45:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-03-04/rspec-file-upload</id>
    <content type="html"><![CDATA[<p><code>controller</code> 的測試中, 總是免不了要處理檔案上傳, rails 中的測試環境當然也提供了這樣的機制</p>

<!-- more -->


<h4>範例</h4>

<p>假設要模擬 view 中 <code>&lt;input type="file" name="user[avatar]" /&gt;</code> 的檔案上傳</p>

<figure class='code'><figcaption><span>spec/requests/users_controller_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">querys</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:avatar</span> <span class="o">=&gt;</span> <span class="n">fixture_file_upload</span><span class="p">(</span><span class="s2">&quot;/example.jpg&quot;</span><span class="p">,</span><span class="s2">&quot;image/jpeg&quot;</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="n">querys</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">be_success</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/example.jpg</code> 會抓 <code>spec/fixtures/example.jpg</code> 做為上傳用的範例圖檔<br/>
<code>image/jpeg</code> 則是 <code>MIME type</code></p>

<p>亦可寫在 <code>factory</code> 中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Factory</span> <span class="ss">:video_file</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span> <span class="n">fixture_file_upload</span> <span class="s1">&#39;/test.png&#39;</span><span class="p">,</span> <span class="s1">&#39;image/png&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_create</span> <span class="k">do</span> <span class="o">|</span><span class="n">video</span><span class="p">,</span> <span class="n">proxy</span><span class="o">|</span>
</span><span class='line'>    <span class="n">proxy</span><span class="o">.</span><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>相關可參考<a href="http://apidock.com/rails/ActionDispatch/TestProcess/fixture_file_upload" target="_blank">Api Dock</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Url helper 中自定 host]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-03-02/url-helper-set-host/"/>
    <updated>2012-03-02T10:39:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-03-02/url-helper-set-host</id>
    <content type="html"><![CDATA[<p>想要吐出 full url 時, 會用 <code>xxx_url</code>, rails 會抓 request 中的 host 做為 url 的 host, 但是當執行環境並非透過 http request (例如 background job), host 得自行指定</p>

<!-- more -->


<p>rails 的 url helper 有提供參數 <code>:host</code> 可自行指定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users_url</span> <span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>若想要設定為預設, 可在 controller 中 override <code>default_url_options</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_url_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s2">&quot;ohmygod.com&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Girl 的回呼 (callbacks)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-29/factory-girl-callbacks/"/>
    <updated>2012-02-29T10:18:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-29/factory-girl-callbacks</id>
    <content type="html"><![CDATA[<p>在寫測試中, 有許多的情境, 可能會需要在產生測試用資料後做許多處理, 因此 <code>Factory Girl</code> 本身也提供了 <code>callback</code> 機制&#8230;</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;foo</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@bar.com&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;barbar&quot;</span>
</span><span class='line'>    <span class="n">password</span> <span class="s2">&quot;12341234&quot;</span>
</span><span class='line'>    <span class="n">after_create</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># callback code block here</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>詳細使用方式可見 <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md" target="_blank">官方說明文件</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[factory_girl 中的 model 關連 (association)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-27/factory-girl-for-associations/"/>
    <updated>2012-02-27T09:42:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-27/factory-girl-for-associations</id>
    <content type="html"><![CDATA[<p>不論是 <code>one-to-one</code> <code>one-to-many</code> 或 <code>many-to-many</code>, 我們都希望 model 中的關連也能反應到 <code>factory_girl</code> 的定義中</p>

<!-- more -->


<p>方法如下:  (brand has many products)</p>

<figure class='code'><figcaption><span>spec/factories/brands.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:brand</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="s2">&quot;brand name </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/factories/products.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:products</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;product name&quot;</span>
</span><span class='line'>    <span class="n">brand</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Factory</span> <span class="ss">:brand</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/models/product.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:brand</span>  <span class="c1"># brand_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此只要每次 <code>Factory(:product)</code> , 該 product 的 brancd 也會透過 brancd 產生, 而不需要再每次的 factory 中去進行關連了 <code>Factory(:product, :brand =&gt; Factory(:brand))</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[factory_girl 的 validates_uniqueness_of 欄位問題]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-25/factory-girl-for-uniqueness-column/"/>
    <updated>2012-02-25T09:25:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-25/factory-girl-for-uniqueness-column</id>
    <content type="html"><![CDATA[<p><code>model</code> 中有 <code>validates_uniqueness_of</code> 的欄位, 在 <code>factory_girl</code> 中可透過 <code>sequence</code> 來避免兩次以上的 factory 因 validation 沒過而無法產生假資料的情況</p>

<!-- more -->




<figure class='code'><figcaption><span>spec/factories/users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sequence</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>      <span class="s2">&quot;foo</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">@bar.com&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s2">&quot;barbar&quot;</span>
</span><span class='line'>    <span class="n">password</span> <span class="s2">&quot;12341234&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>n</code> 為流水號, 因此可用於 <code>number</code> 或 <code>string</code> 類型的 column</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bigtuna 保持 delayed_job 持續執行]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-23/bigtuna-delayedjob-persistant-by-god/"/>
    <updated>2012-02-23T08:59:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-23/bigtuna-delayedjob-persistant-by-god</id>
    <content type="html"><![CDATA[<p><code>BigTuna</code> 是透過 <a href="https://github.com/tobi/delayed_job" target="_blank">delayed_job</a> 讓所有 build 中的 process 的能夠正常運作<br/>
當 <code>delayed_job</code> 因為某種不明因素終止時, 就得再 ssh 到 server 重啟 <code>delayed_job</code>&#8230;</p>

<!-- more -->


<p><a href="http://godrb.com/" target="_blank">God</a> 是一套獨立的 <code>rubygems</code> <br/>
可以讓你在 <code>linux</code> 環境下監控某 process, 並且保持其持續且正常運作<br/>
因此我們可透過 <code>God</code> 來使 <code>delayed_job</code> 不被意外終止</p>

<h4>安裝</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su -
</span><span class='line'>gem install god</span></code></pre></td></tr></table></div></figure>


<h4>BigTuna 的 god-ruby 範例檔</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">God</span><span class="o">.</span><span class="n">watch</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">uid</span> <span class="o">=</span> <span class="s2">&quot;passenger&quot;</span>  <span class="c1"># bigtuna 在 linux 下的 user id</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">gid</span> <span class="o">=</span> <span class="s2">&quot;passenger&quot;</span>  <span class="c1"># bigtuna 在 linux 下的 group id</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;bigtuna-delayed_job&quot;</span>  <span class="c1"># 在 god 中的名稱</span>
</span><span class='line'>  <span class="c1"># 執行 delayed_job 的指令</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="s2">&quot;cd /path/to/bigtuna &amp;&amp; RAILS_ENV=production ./script/delayed_job start&quot;</span>
</span><span class='line'>  <span class="n">w</span><span class="o">.</span><span class="n">keepalive</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>以 root 身分執行 god</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span> <span class="o">-</span><span class="n">c</span> <span class="n">delayed_job</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行後可透過 <code>ps axu|grep "god"</code> 或 <code>ps axu|grep "delayed_job"</code> 看到 <code>god</code> 啟動 <code>delayed_job</code> 的相關 process</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 ( 佈署篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-21/resque-deploy-worker/"/>
    <updated>2012-02-21T01:56:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-21/resque-deploy-worker</id>
    <content type="html"><![CDATA[<p>透過 capistrano 佈署到 server 時，除了需要啟動 worker 之外，也會希望在每次佈署後，也重新啟動 worker<br/>
因為 worker 是透過 rake 啟動的，所以當 perform 相關的程式有修改時，worker 也必須重新啟動<br/>
以下將介紹如何將重啟 worker 整合到 capistrano 中</p>

<!-- more -->


<h4>將 worker 丟背景執行的方法</h4>

<p>resque 1.9 以上有提供參數 :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work</span></code></pre></td></tr></table></div></figure>


<p>背景的 worker 要留一下 pid file, 以方便 kill</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PIDFILE=./resque.pid BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work</span></code></pre></td></tr></table></div></figure>


<h4>整合 capistrano</h4>

<p>deploy 中加 restart_resque 的 task</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># .....</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart_resque</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">queues</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:foo_queue</span><span class="p">,</span> <span class="ss">:barbar</span><span class="o">]</span>
</span><span class='line'>    <span class="n">queues</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">queue</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pid_file</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/tmp/pids/resque-</span><span class="si">#{</span><span class="n">queue</span><span class="si">}</span><span class="s2">.pid&quot;</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;test -f </span><span class="si">#{</span><span class="n">pid_file</span><span class="si">}</span><span class="s2"> &amp;&amp; cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; kill -s QUIT `cat </span><span class="si">#{</span><span class="n">pid_file</span><span class="si">}</span><span class="s2">` || rm -f </span><span class="si">#{</span><span class="n">pid_file</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">run</span> <span class="s2">&quot;cd </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2"> &amp;&amp; PIDFILE=</span><span class="si">#{</span><span class="n">pid_file</span><span class="si">}</span><span class="s2"> RAILS_ENV=</span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2"> BACKGROUND=yes QUEUE=</span><span class="si">#{</span><span class="n">queue</span><span class="si">}</span><span class="s2"> bundle exec rake environment resque:work&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子是以一條 queue 配一個 worker 的方式執行，若要通通塞一個 worker 就 QUEUE=* 吧 XD</p>

<p>restart app 後就 restart resque worker 吧!!</p>

<figure class='code'><figcaption><span>config/deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after</span> <span class="s1">&#39;deploy:restart&#39;</span><span class="p">,</span> <span class="s1">&#39;deploy:restart_resque&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>有關啟動 worker 的參數</h4>

<p>resque 提供了許多參數，讓你可以依照不同的需求執行worker，底下將介紹</p>

<h6>將 worker 執行的結果輸出</h6>

<p>debug 很好用，但個人還是推薦用 rspec 去 debug 吧 XD</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VVERBOSE</span><span class="o">=</span><span class="mi">1</span> <span class="no">QUEUE</span><span class="o">=*</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">environment</span> <span class="n">resque</span><span class="ss">:work</span>
</span></code></pre></td></tr></table></div></figure>


<h6>指定 queue (一條或多條)</h6>

<p>多條可以逗號隔開</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">QUEUES</span><span class="o">=</span><span class="n">file_serve</span><span class="p">,</span><span class="n">warm_cache</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">environment</span> <span class="n">resque</span><span class="ss">:work</span>
</span></code></pre></td></tr></table></div></figure>


<p>* 則是所有的 queue</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">QUEUES</span><span class="o">=*</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">environment</span> <span class="n">resque</span><span class="ss">:work</span>
</span></code></pre></td></tr></table></div></figure>


<h6>polling 的頻率</h6>

<p>針對即時性高的需求,以秒計,預設為 5 秒</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">INTERVAL</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="no">QUEUE</span><span class="o">=</span><span class="n">foo</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">environment</span> <span class="n">resque</span><span class="ss">:work</span>
</span></code></pre></td></tr></table></div></figure>


<h6>多個 worker 同步執行</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">COUNT</span><span class="o">=</span><span class="mi">5</span> <span class="no">QUEUE</span><span class="o">=*</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">environment</span> <span class="n">resque</span><span class="ss">:workers</span>
</span></code></pre></td></tr></table></div></figure>


<p>但官方推薦用 gem &#8220;god&#8221; 來執行多個 worker<br/>
相關可參考 <a href="https://github.com/defunkt/resque/blob/master/examples/god/resque.god" target="_blank">官方範例</a><br/>
god 也可以用來解決 worker 掛掉的問題<br/>
有關 god 的整合, 有空再分享 :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 ( mailer 篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-19/resque-mailer/"/>
    <updated>2012-02-19T01:36:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-19/resque-mailer</id>
    <content type="html"><![CDATA[<p>寄信的工作是最必要丟背景的。在 web 前端使用的過程中，若要等待 server 產生 email 內容、和 smtp 連線、然後再把信送出去，這樣的過程肯定讓使用品質大大扣分&#8230;<br/>
因此 gem &#8220;resque_mailer&#8221; 將 resque 的 enqueue 和 perform 實作到 ActionMailer::Base 中</p>

<!-- more -->


<p>即原本的 deliver 應該是要根據 app 的 mailer 設定 (smtp或sendmail等) 把信送出<br/>
bundle resqie_mailer 後, deliver 的結果則變成送到 mq 上 (透過 Resque.enqueue)</p>

<h4>安裝</h4>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;resque&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;resque_mailer&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>設定</h4>

<figure class='code'><figcaption><span>config/initializers/resque_mailer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># queue 的名稱</span>
</span><span class='line'><span class="no">Resque</span><span class="o">::</span><span class="no">Mailer</span><span class="o">.</span><span class="n">default_queue_name</span> <span class="o">=</span> <span class="s2">&quot;foo_mailer&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 有 resque_spec</span>
</span><span class='line'><span class="no">Resque</span><span class="o">::</span><span class="no">Mailer</span><span class="o">.</span><span class="n">excluded_environments</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="c1"># 無 resque_spec</span>
</span><span class='line'><span class="no">Resque</span><span class="o">::</span><span class="no">Mailer</span><span class="o">.</span><span class="n">excluded_environments</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:test</span><span class="p">,</span> <span class="ss">:cucumber</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyMailer</span> <span class="o">&lt;</span> <span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Resque</span><span class="o">::</span><span class="no">Mailer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># .....</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>寄信 (送到 mq)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MyMailer</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">deliver</span>
</span></code></pre></td></tr></table></div></figure>


<p>寄信 (直接寄出不送 mq)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MyMailer</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">deliver!</span>
</span></code></pre></td></tr></table></div></figure>


<p>這裡要注意!!!!! 因為 resque 會將參數內容送到 mq 上, 而 redis 無法處理 number, string, array, hash 以外的變數, 所以在定義 mailer action 時, 參數務必限制在上述這些變數類型的範圍內</p>

<h4>worker 的執行</h4>

<p>一般 mailer 的 worker 建議獨立一條 queue 執行, 效率會比較好 :p</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">QUEUE</span><span class="o">=</span><span class="n">foo_mailer</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">resque</span><span class="ss">:work</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>resque_mailer 簡單, 但仍是 background job<br/>
因此測試還是要多多寫 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 (測試篇 - Rspec)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-17/resque-spec/"/>
    <updated>2012-02-17T00:40:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-17/resque-spec</id>
    <content type="html"><![CDATA[<p>不管用什麼方式實作 background job 後<br/>
令人頭痛的是很難知道 worker 在執行工作時有沒有噴 exception<br/>
因此測試就顯得更為重要, 每次佈署前必須做好完整的測試, 以減少 worker 出錯<br/>
當然也可以搭配 Exceptional 或 Aribrake 之類的雲端服務來進行監控&#8230;</p>

<!-- more -->


<p>resque 的測試有專門的 gem, 用來在測試環境下模擬 message queue 和 worker</p>

<p>resque_spec : <a href="https://github.com/leshill/resque_spec" target="_blank">https://github.com/leshill/resque_spec</a></p>

<h4>安裝</h4>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;resque_spec&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這裡要注意一點, 不要在 development 環境下 bundle resque_spec, 即 Gemfile 中的 resque_spec 只能 group 在 test 下, 否則執行 Resque.enqueue 就不會送到 redis 而是送進 resque_spec 中</p>

<h4>使用</h4>

<p>resque_spec 的作法是讓原本丟工作到 mq 上的 Resque.enqueue 改為丟到 resque_spec 模擬的 mq 中<br/>
因此 Gemfile bundle 後, 就可以直接在 rspec 中使用, 以下將介紹 rspec 中常用的語法</p>

<h6>清空 mq 所有的 job</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;#foo&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">ResqueSpec</span><span class="o">.</span><span class="n">reset!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h6>檢查某個 worker 的 job 數</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">FooWorker</span><span class="o">.</span><span class="n">should</span> <span class="n">have_queue_size_of</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h6>檢查某個 worker 的 queue 中應該要有的 job</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">FooWorker</span><span class="o">.</span><span class="n">should</span> <span class="n">have_queued</span><span class="p">(</span><span class="n">foo</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>foo.id, &#8220;bar&#8221; 都是 enqueue 的參數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># some where enqueue</span>
</span><span class='line'>  <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">FooWorker</span><span class="p">,</span> <span class="n">foo</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h6>立即執行不送 queue</h6>

<p>用 &#8220;with_resque&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;should works&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">with_resque</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@foo</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>假設 run 的內容是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>  <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">FooWorker</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 with_resque 內, Resque.enqueue(FooWorker, id) 相當於 FooWorker.perform(id)</p>

<h6>執行 queue 裡面所有的 job</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;should  works&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@foo</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>  <span class="no">ResqueSpec</span><span class="o">.</span><span class="n">perform_all</span><span class="p">(</span><span class="ss">:queue_foo</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8220;queue_foo&#8221; 是 Worker 中定義的 queue name</p>

<h4>整合 ResqueMailer</h4>

<p>gem &#8220;resque_mailer&#8221; 會將 mailer 中的 deliver 行為內容改為 Resque.enqueue<br/>
但是在 test 環境中, resque_mailer 則會還原 deliver 原本的行為<br/>
所以為了 rspec 中也可以測試 mailer 是否 enqueu, 要在 resque_mailer 中的 config 將原本排除掉的 test 環境加入 resque_mailer 的運作中</p>

<figure class='code'><figcaption><span>config/initializers/resque_mailer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Resque</span><span class="o">::</span><span class="no">Mailer</span><span class="o">.</span><span class="n">excluded_environments</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>一般我們都會將複雜或吃效能的工作丟到背景執行<br/>
而複雜的工作又常常需要 debug<br/>
因此平常應該要養成寫 spec 的習慣<br/>
才不會讓自己跟這些複雜的功能過不去 :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 (基本使用篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-15/resque-basic-usage/"/>
    <updated>2012-02-15T15:36:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-15/resque-basic-usage</id>
    <content type="html"><![CDATA[<p>上篇提到如何進行 redis, resque, worker 的設定安裝
本篇將介紹基本使用方式</p>

<!-- more -->


<h4>參考連結</h4>

<p>RailsCast - 影片: <a href="http://railscasts.com/episodes/271-resque" target="_blank">Resque</a>
RailsCast - 文字: <a href="http://railscasts.com/episodes/271-resque?view=asciicast" target="_blank">
Resque</a>
官方文件: <a href="https://github.com/defunkt/resque" target="_blank">Github</a></p>

<h4>基本使用</h4>

<p>情境: 文章內容更新後, 要重新計算其價值(p幣~XD)</p>

<p>先寫好 worker 要做的事情, worker 可以是任何 class</p>

<figure class='code'><figcaption><span>app/workers/post_evaluate.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostEvaluate</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@queue</span> <span class="o">=</span> <span class="ss">:post_evaluate</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">post_id</span><span class="p">,</span> <span class="n">total_time_seconds</span><span class="p">)</span>
</span><span class='line'>    <span class="n">evaluate</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">post_id</span><span class="p">),</span> <span class="n">total_time_seconds</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>worker 必備兩個部分:
1. @queue 指定 queue 的名稱
2. class method: perform 執行 job 內容, 參數可自定</p>

<p>接下來是如何把 job 丟上 queue</p>

<figure class='code'><figcaption><span>app/models/post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after_save</span> <span class="ss">:evaluate</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span>
</span><span class='line'>  <span class="no">Resque</span><span class="o">.</span><span class="n">enqueue</span> <span class="no">PostEvaluate</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">total_secs</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resque.enqueue [worker class], [argument 1], [argument 2], &#8230;..</p>

<p>相當於 worker 執行了 PostEvaluate.perform(self.id, total_secs)</p>

<h4>注意事項</h4>

<p>enqueue 的參數類型儘可能簡單: Fixnum, String, Array, Hash<br/>
不要將整個 model 或 class instance 丟到 mq 上<br/>
redis 無法儲存像 model 這樣複雜的變數類型</p>

<p>下一篇將介紹如何寫測試(Rspec)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 resque 實作背景作業 (前置設定篇)]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-13/resque-redis-and-worker-config/"/>
    <updated>2012-02-13T14:51:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-13/resque-redis-and-worker-config</id>
    <content type="html"><![CDATA[<p>resque 是一套可以用來實作 background job 的 gem<br/>
舉凡長時間的執行如 email, 點數計算等等非即時性的工作, 都可以採用非同步執行<br/>
以加速前端服務的反應速度<br/>
resque 是以 redis 做為 message queue server 的方式來進行&#8230;</p>

<!-- more -->


<h4>參考連結</h4>

<p>RailsCast - 影片: <a href="http://railscasts.com/episodes/271-resque" target="_blank">Resque</a><br/>
RailsCast - 文字: <a href="http://railscasts.com/episodes/271-resque?view=asciicast" target="_blank">Resque</a><br/>
官方文件: <a href="https://github.com/defunkt/resque" target="_blank">Github</a></p>

<h4>安裝 Gem</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Gemfile
</span><span class='line'>gem "resque"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h4>安裝 redis</h4>

<p>MacOS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew install redis</span></code></pre></td></tr></table></div></figure>


<p>Debian / Ubuntu</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install redis-server</span></code></pre></td></tr></table></div></figure>


<h4>啟動/停止 redis server</h4>

<p>MacOS</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 啟動
</span><span class='line'>/usr/local/bin/redis-server /usr/local/etc/redis.conf
</span><span class='line'># 停止 ps + kill :p
</span><span class='line'>sudo kill -SIGHUP $(ps aux|grep 'redis-server'|grep -v 'grep'|awk '{print $2}')</span></code></pre></td></tr></table></div></figure>


<p>Debian / Ubuntu</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 啟動
</span><span class='line'>sudo service redis-server start
</span><span class='line'># 停止
</span><span class='line'>sudo service redis-server stop</span></code></pre></td></tr></table></div></figure>


<h4>Resque 中的 redis 設定</h4>

<p>由於 resque 必須將 job 丟上 redis (mq server)<br/>
因此必須設定連線的位址</p>

<p>手動建立兩個檔案<br/>
config/redis.yml => redis 的連線設定檔<br/>
config/initializers/resque.rb => 初始化 resque</p>

<figure class='code'><figcaption><span>config/redis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:redis</span><span class="p-Indicator">:</span> <span class="s">&quot;localhost:6379&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/initializers/resque.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/resque.yml&quot;</span><span class="p">)</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">]</span>
</span><span class='line'><span class="no">Resque</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="ss">:redis</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h6>RedisToGo</h6>

<p>若是使用雲端的Redis服務-<a href="https://redistogo.com/" target="_blank">RedisToGo</a><br/>
可以直接在 yml 中貼上 instance 的 uri, 如</p>

<figure class='code'><figcaption><span>config/redis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:redis</span><span class="p-Indicator">:</span> <span class="s">&quot;redis://marsz:xxxxxx@stingfish.redistogo.com:9999&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>redis-rb</h6>

<p>若 redis 有同時兼作 cache 或 db 用, 而且是透過 gem &#8220;redis&#8221; 進行連線的話<br/>
則可以直接將變數指定</p>

<figure class='code'><figcaption><span>config/redis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:db</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:host</span><span class="p-Indicator">:</span> <span class="s">&quot;localhost&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">6379</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/initializers/resque.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/redis.yml&quot;</span><span class="p">))</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">]</span>
</span><span class='line'><span class="no">Resque</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="ss">:host</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[</span><span class="ss">:host</span><span class="o">]</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[</span><span class="ss">:port</span><span class="o">]</span><span class="p">,</span> <span class="ss">:db</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[</span><span class="ss">:db</span><span class="o">]</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般小弟比較偏好最後一個方法, 因為 redis 太方便了, 只做 background job 有點可惜 XD</p>

<h4>Resque server</h4>

<p>想要有直觀的介面可以看目前 message queue (redis) 上的 job 執行狀況<br/>
resque 也有提供 :)</p>

<figure class='code'><figcaption><span>config/initializers/resque.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 在任何 initial 的檔案中加都可</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;resque/server&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mount</span> <span class="no">Resque</span><span class="o">::</span><span class="no">Server</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s2">&quot;/admin/resque&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>啟動 rails server, 連線 <a href="http://localhost:3000/admin/resque" target="_blank">http://localhost:3000/admin/resque</a> 就可以看到啦</p>

<h4>啟動 worker</h4>

<p>丟上 message queue 的工作, 必須透過 worker 逐個要下來執行<br/>
啟動worker&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">QUEUE</span><span class="o">=*</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">resque</span><span class="ss">:work</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述指令啟動後就會掛著, 而 server 上的啟動可以透過 BACKGROUND=yes 讓 worker 變成背景執行, 之後會再介紹完整參數說明</p>

<p>worker 在 message queue 中有許多 issue, 例如:<br/>
1. 佈署時如何自動的重啟<br/>
2. server 上的 worker 掛了要怎麼自動重啟<br/>
3. worker 能否 multi-thread 執行或針對特定 queue 等等<br/>
將在後續會有相關 solution 的分享</p>

<hr />

<p>以上是有關 resque 的環境設定</p>

<p>redis => resuqe config => worker</p>

<p>下一篇將會介紹在 rails 中的基本使用方式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise + Omniauth 的 Facebook 登入範例]]></title>
    <link href="http://rubyist.marsz.tw/blog/2012-02-11/devise-omniauth-for-facebook-login/"/>
    <updated>2012-02-11T01:20:00+08:00</updated>
    <id>http://rubyist.marsz.tw/blog/2012-02-11/devise-omniauth-for-facebook-login</id>
    <content type="html"><![CDATA[<p>以下範例應用於 rails 3.1.3 + devise 1.4.9 + oa-oauth 0.3.2<br/>
直接使用 devise 中的 omniauthable 有許多彈性不足的問題<br/>
因此小弟參考了網路上的作法, 加上因應某些需求的修改&#8230;</p>

<!-- more -->


<h4>參考</h4>

<p><a href="http://blog.railsrumble.com/blog/2010/10/08/intridea-omniauth" target="_blank">http://blog.railsrumble.com/blog/2010/10/08/intridea-omniauth</a></p>

<h4>步驟</h4>

<p>(以下範例以 user 做為 model 名稱)</p>

<p>安裝 gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;devise&quot;</span><span class="p">,</span> <span class="s2">&quot;1.4.9&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;oa-oauth&quot;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s2">&quot;omniauth/oauth&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;oa-openid&quot;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s2">&quot;omniauth/openid&quot;</span> <span class="c1"># for google 或其他 openid auth</span>
</span></code></pre></td></tr></table></div></figure>


<p>devise initial setup</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">devise</span><span class="ss">:install</span>
</span><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">devise</span> <span class="n">user</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 users 的 migration 中, 依照需求可自行選擇加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span> <span class="c1"># 儲存使用者名稱</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">confirmable</span> <span class="c1"># email 認證, 若未來有提供註冊流程產生新使用者的可能性, 就加吧</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">change_column</span> <span class="ss">:users</span><span class="p">,</span><span class="ss">:email</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="c1"># 若登入 open id 的 provider 不提供 email, 則必須做此設定, 讓 email 可以為 null</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立對應 opend id 和 user 的 model - authorization</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="n">authorization</span> <span class="n">provider</span><span class="ss">:string</span> <span class="n">uid</span><span class="ss">:string</span> <span class="n">user_id</span><span class="ss">:integer</span>
</span></code></pre></td></tr></table></div></figure>


<p>user model 內容<br/>
1. devise 的 module 比預設的多了 confirmable, 主要為了提供未來也能使用站內註冊流程的可能<br/>
2. create_from_auth 處理 omniauth 丟過來的 auth_hash 並且以 email 為 unique key 新增 user</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">:recoverable</span><span class="p">,</span> <span class="ss">:rememberable</span><span class="p">,</span> <span class="ss">:trackable</span><span class="p">,</span> <span class="ss">:validatable</span><span class="p">,</span>
</span><span class='line'>         <span class="ss">:confirmable</span> <span class="c1"># 加上 confirmable</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:authorizations</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_from_auth!</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="n">created_hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:user_info</span><span class="o">][</span><span class="ss">:email</span><span class="o">]</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:user_info</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="p">(</span><span class="n">created_hash</span><span class="o">[</span><span class="ss">:email</span><span class="o">].</span><span class="n">nil?</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_email</span><span class="p">(</span><span class="n">created_hash</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">))</span> <span class="o">||</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">created_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">confirm!</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">user</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>authorization model 內容<br/>
1. 對應 user 和 open id, 使其不重複<br/>
2. #create_by_omniauth 處理從 omniauth 登入後的資料, 可以將 provider 的資料整合進指定的user(例如目前登入者) 或相同 email 的 user<br/>
3. constant PROVIDERS 用以提供未來擴充 provider 的彈性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Authorization</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="no">PROVIDERS</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:facebook</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:uid</span><span class="p">,</span> <span class="ss">:provider</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:uid</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:provider</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_by_omniauth</span><span class="p">(</span><span class="nb">hash</span><span class="p">,</span> <span class="n">current_user</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span> <span class="nb">hash</span>
</span><span class='line'>    <span class="n">auth</span> <span class="o">=</span> <span class="n">find_from_hash</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">auth</span>
</span><span class='line'>      <span class="n">current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">create_from_auth!</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>      <span class="n">auth</span> <span class="o">=</span> <span class="no">Authorization</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:user</span><span class="o">=&gt;</span><span class="n">current_user</span><span class="p">,</span><span class="ss">:uid</span><span class="o">=&gt;</span><span class="nb">hash</span><span class="o">[</span><span class="ss">:uid</span><span class="o">]</span><span class="p">,</span><span class="ss">:provider</span><span class="o">=&gt;</span><span class="nb">hash</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">auth</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">auth</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_from_hash</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:uid</span><span class="o">]</span>
</span><span class='line'>      <span class="n">find_by_provider_and_uid</span><span class="p">(</span><span class="nb">hash</span><span class="o">[</span><span class="ss">:provider</span><span class="o">]</span><span class="p">,</span><span class="nb">hash</span><span class="o">[</span><span class="ss">:uid</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定 omniauth (facebook 登入的 app data), 同時讓 /auth/facebook 的 route 可以連接 fb 的 oauth, 相關可參考 <a href="https://github.com/intridea/omniauth" target="_blank">omniauth 的說明</a></p>

<figure class='code'><figcaption><span>config/initializers/omniauth.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/omniauth.yml&quot;</span><span class="p">))</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">]</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:facebook</span><span class="p">,</span> <span class="n">config</span><span class="o">[</span><span class="ss">:facebook</span><span class="o">][</span><span class="ss">:api_id</span><span class="o">]</span><span class="p">,</span> <span class="n">config</span><span class="o">[</span><span class="ss">:facebook</span><span class="o">][</span><span class="ss">:api_secret</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/omniauth.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:facebook</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:domain</span><span class="p-Indicator">:</span> <span class="s">&quot;foo.com&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:api_id</span><span class="p-Indicator">:</span> <span class="s">&quot;12341234&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:api_secret</span><span class="p-Indicator">:</span> <span class="s">&quot;barbarbarbar&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:facebook</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:domain</span><span class="p-Indicator">:</span> <span class="s">&quot;foo.com&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:api_id</span><span class="p-Indicator">:</span> <span class="s">&quot;12341234&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:api_secret</span><span class="p-Indicator">:</span> <span class="s">&quot;barbarbarbar&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:facebook</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:domain</span><span class="p-Indicator">:</span> <span class="s">&quot;foo.com&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:api_id</span><span class="p-Indicator">:</span> <span class="s">&quot;12341234&quot;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">:api_secret</span><span class="p-Indicator">:</span> <span class="s">&quot;barbarbarbar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如同 omniauth 的做法, 把接 facebook (或其他 provider) 的 route 和 controller 寫好</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">sessions</span>
</span></code></pre></td></tr></table></div></figure>


<p>有可能登入 facebook 會 fail, 所以也要把 fail 的部份寫好</p>

<figure class='code'><figcaption><span>app/controllers/sessions_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@auth</span> <span class="o">=</span> <span class="no">Authorization</span><span class="o">.</span><span class="n">create_by_omniauth</span><span class="p">(</span><span class="n">auth_hash</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@auth</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>       <span class="n">sign_in_and_redirect</span> <span class="ss">:user</span><span class="p">,</span> <span class="vi">@auth</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;auth_hash: </span><span class="si">#{</span><span class="n">auth_hash</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;@auth: </span><span class="si">#{</span><span class="vi">@auth</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="n">new_user_session_path</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">failure</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">]</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">new_user_session_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">auth_hash</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.auth&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定 route, 包含 omniauth 和 devise</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">match</span> <span class="s1">&#39;/auth/:provider/callback&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;sessions#create&#39;</span>
</span><span class='line'>  <span class="n">match</span> <span class="s1">&#39;/auth/failure&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sessions#failure&#39;</span>
</span><span class='line'>  <span class="n">devise_for</span> <span class="ss">:users</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/users/sign_in&#39;</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/sessions#new&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:new_user_session</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/users/sign_out&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;devise/sessions#destroy&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:user_sign_out</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>view 裡面的 Facebook 登入按鈕 (html)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/auth/facebook&quot;</span><span class="nt">&gt;</span>Facebook 登入<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>若希望 Facebook 登入後可以導回登入前的頁面, 則可以做以下設定<br/>
主要參考 <a href="https://github.com/plataformatec/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-in" target="_blank">Devise Wiki</a></p>

<figure class='code'><figcaption><span>app/controllers/application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_sign_in_path_for</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.origin&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="n">stored_location_for</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="o">||</span> <span class="n">users_path</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前沒有使用 devise 1.5 以上的原因是在這裡會遇到 redirect loop 的問題</p>

<h4>結論</h4>

<p>本篇範例主要以最常用的 facebook 登入為主<br/>
另外也提供了整合 openid 至現有帳號的功能<br/>
大多數的使用者帳號系統最在意的是能否拿到 email, 雖然 Facebook 是最多人使用的 open id, 但是基於網站本身的內容特性, 提供網站自己的註冊流程也是必要的<br/>
接下來還有另一篇介紹上述範例中的 rspec 會怎麼寫</p>
]]></content>
  </entry>
  
</feed>
